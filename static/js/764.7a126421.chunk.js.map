{"version":3,"file":"static/js/764.7a126421.chunk.js","mappings":"kNAKA,SAASA,IAeP,OAdAA,EAAWC,OAAOC,QAAU,SAAUC,GACpC,IAAK,IAAIC,EAAI,EAAGA,EAAIC,UAAUC,OAAQF,IAAK,CACzC,IAAIG,EAASF,UAAUD,GAEvB,IAAK,IAAII,KAAOD,EACVN,OAAOQ,UAAUC,eAAeC,KAAKJ,EAAQC,KAC/CL,EAAOK,GAAOD,EAAOC,IAK3B,OAAOL,GAGFH,EAASY,MAAMC,KAAMR,WAkB9B,IAAIS,EAAY,CAAC,YAAa,QAM1BC,GAAwBC,EAAAA,EAAAA,KAAW,SAAUC,EAAOC,GACtD,IAAIC,GAASC,EAAAA,EAAAA,IAAe,WAAYH,GAEpCI,GAAoBC,EAAAA,EAAAA,IAAiBL,GACrCM,EAAYF,EAAkBE,UAC9BC,EAAOH,EAAkBG,KACzBC,EA3BN,SAAuClB,EAAQmB,GAC7C,GAAc,MAAVnB,EAAgB,MAAO,GAC3B,IAEIC,EAAKJ,EAFLD,EAAS,GACTwB,EAAa1B,OAAO2B,KAAKrB,GAG7B,IAAKH,EAAI,EAAGA,EAAIuB,EAAWrB,OAAQF,IACjCI,EAAMmB,EAAWvB,GACbsB,EAASG,QAAQrB,IAAQ,IAC7BL,EAAOK,GAAOD,EAAOC,IAGvB,OAAOL,EAeI2B,CAA8BT,EAAmBP,GAExDiB,GAAgBC,EAAAA,EAAAA,IAAeP,GAE/BQ,EAAiBT,GAAOU,EAAAA,EAAAA,IAAKf,EADnB,CAAC,IAAK,OAAQ,SAAU,cACcA,EACpD,OAAoBgB,EAAAA,cAAoBC,EAAAA,GAAAA,SAAiBpC,EAAS,CAChEkB,IAAKA,EACLM,KAAMA,GACLO,EAAe,CAChBR,WAAWc,EAAAA,EAAAA,IAAG,kBAAmBd,GACjCe,MAAOL,QAIPM,EAAAA,KACFxB,EAASyB,YAAc,Y,+DCuBzB,EAzEoC,WAClC,IAAOC,GAAmBC,EAAAA,EAAAA,KAAnBD,gBACP,GAAoCE,EAAAA,EAAAA,UAAiB,IAArD,eAAOC,EAAP,KAAmBC,EAAnB,KACA,GAAuEC,EAAAA,EAAAA,KAAhEC,EAAP,EAAOA,MAAOC,EAAd,EAAcA,SAAUC,EAAxB,EAAwBA,aAAcC,EAAtC,EAAsCA,cAAcC,EAApD,EAAoDA,iBAEpDC,EAAAA,EAAAA,YAAW,WACT,GAAGF,IACDG,QAAQC,IAAIJ,IACTK,EAAAA,EAAAA,GAAqBJ,EAAiBD,KAAmBN,GAAY,CACtE,IAAMY,EAAQN,EAAcC,GACR,kBAAVK,GACRX,EAAcW,MAKnB,CAACL,EAAiBD,IAMrB,OAAIA,GAIF,+BACE,UAAC,KAAD,CACEO,QAAS,MACTC,EAAG,OAAQC,KAAM,OACjBC,cAAc,SAEdC,QAAS,EACTC,eAAe,SACfC,GAAI,EACJC,GAAI,EACJC,GAAI,EACJC,GAAI,EAVN,WAYE,SAACnD,EAAD,CACEoD,YAAapB,EACbqB,SAvByD,SAACC,GAChExB,EAAcwB,EAAMlE,OAAOqD,QAuBrBA,MAAOZ,EACP0B,aAAc,CAACC,MAAO,iBAAkBC,SAAU,OAClDC,EAAG,EACHC,EAAG,EACHC,GAAIlC,EACJmC,EAAG,MACHlB,EAAG,OACHD,QAAS,KACToB,KAAK,QAEP,SAAC,KAAD,CACElB,KAAM,GACND,EAAE,MACFoB,UAAW7B,EACX0B,GAAIlC,EACJsC,YAAa,aACbC,QAAS,kBAAMhC,EAASJ,IAN1B,0BA7BG,SAACqC,EAAA,EAAD","sources":["../node_modules/@chakra-ui/textarea/dist/chakra-ui-textarea.esm.js","Components/TextFieldQuestion.tsx"],"sourcesContent":["import { useFormControl } from '@chakra-ui/form-control';\nimport { forwardRef, useStyleConfig, omitThemingProps, chakra } from '@chakra-ui/system';\nimport { omit, cx, __DEV__ } from '@chakra-ui/utils';\nimport * as React from 'react';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nvar _excluded = [\"className\", \"rows\"];\n\n/**\n * Textarea is used to enter an amount of text that's longer than a single line\n * @see Docs https://chakra-ui.com/textarea\n */\nvar Textarea = /*#__PURE__*/forwardRef(function (props, ref) {\n  var styles = useStyleConfig(\"Textarea\", props);\n\n  var _omitThemingProps = omitThemingProps(props),\n      className = _omitThemingProps.className,\n      rows = _omitThemingProps.rows,\n      rest = _objectWithoutPropertiesLoose(_omitThemingProps, _excluded);\n\n  var textareaProps = useFormControl(rest);\n  var omitted = [\"h\", \"minH\", \"height\", \"minHeight\"];\n  var textareaStyles = rows ? omit(styles, omitted) : styles;\n  return /*#__PURE__*/React.createElement(chakra.textarea, _extends({\n    ref: ref,\n    rows: rows\n  }, textareaProps, {\n    className: cx(\"chakra-textarea\", className),\n    __css: textareaStyles\n  }));\n});\n\nif (__DEV__) {\n  Textarea.displayName = \"Textarea\";\n}\n\nexport { Textarea };\n","\nimport useThoughtRecord from '../Hooks/UseThoughtRecord'\n\nimport {\n  Textarea,\n  Button,\n  VStack,\n} from '@chakra-ui/react'\n\nimport { useEffect, useState } from \"react\"\nimport UseThemeColors from '../Hooks/useThemeColors'\nimport {isKeyOfThoughtRecord, ThoughtRecord} from './types'\nimport LoadingTextField from './LoadingTextField'\n\n\nconst TextFieldQuestion: React.FC = () => {\n  const {foregroundColor} = UseThemeColors()\n  const [fieldState, setFieldState] = useState<string>(\"\")\n  const {label, onSubmit, isSubmitting, thoughtRecord,currentQuestion} = useThoughtRecord()  \n\n  useEffect (() => {\n    if(thoughtRecord) {\n      console.log(thoughtRecord)\n      if(isKeyOfThoughtRecord(currentQuestion, thoughtRecord) && !fieldState) {\n        const value = thoughtRecord[currentQuestion]\n        if(typeof value === 'string'){\n          setFieldState(value)\n        }\n      }\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentQuestion, thoughtRecord])\n\n  const onChange:  React.ChangeEventHandler<HTMLTextAreaElement> = (event) => {\n    setFieldState(event.target.value)\n  }\n  \n  if(!thoughtRecord) {\n    return <LoadingTextField/>\n  }\n  return (\n    <>    \n      <VStack \n        rounded={'3xl'} \n        w={\"full\"} minH={\"100%\"} \n        flexDirection='column' \n        \n        spacing={8}\n        justifyContent='center' \n        mx={2} \n        pb={6} \n        px={5} \n        pt={2} \n      >        \n        <Textarea \n          placeholder={label} \n          onChange={onChange}\n          value={fieldState}\n          _placeholder={{color: 'blackAlpha.800', fontSize: \"3xl\"}}\n          p={4} \n          m={2}\n          bg={foregroundColor} \n          h={'80%'}  \n          w={\"full\"}\n          rounded={\"xl\"} \n          size=\"lg\"\n        />\n        <Button \n          minH={10}\n          w=\"60%\"\n          isLoading={isSubmitting}\n          bg={foregroundColor}\n          loadingText={\"Submitting\"}\n          onClick={() => onSubmit(fieldState)} \n          \n        >\n          Submit\n        </Button> \n      </VStack>\n        \n      \n          \n      \n    </>\n      \n  );\n}\n\nexport default TextFieldQuestion\n"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","_excluded","Textarea","forwardRef","props","ref","styles","useStyleConfig","_omitThemingProps","omitThemingProps","className","rows","rest","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","textareaProps","useFormControl","textareaStyles","omit","React","chakra","cx","__css","__DEV__","displayName","foregroundColor","UseThemeColors","useState","fieldState","setFieldState","useThoughtRecord","label","onSubmit","isSubmitting","thoughtRecord","currentQuestion","useEffect","console","log","isKeyOfThoughtRecord","value","rounded","w","minH","flexDirection","spacing","justifyContent","mx","pb","px","pt","placeholder","onChange","event","_placeholder","color","fontSize","p","m","bg","h","size","isLoading","loadingText","onClick","LoadingTextField"],"sourceRoot":""}