{"version":3,"file":"static/js/756.edae6649.chunk.js","mappings":"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","sources":["Components/ThoughtRecordDisplay/EmotionDisplay.tsx","Components/ThoughtRecordDisplay/HotThoughtDisplay.tsx","Components/ThoughtRecordDisplay/ThoughtRecordDisplay.tsx","Components/ThoughtRecordQuestions/AccordianElement.tsx","Components/ThoughtRecordQuestions/ArgumentAccordion.tsx","Components/ThoughtRecordQuestions/EmotionButton.tsx","Components/ThoughtRecordQuestions/EmotionPicker.tsx","Components/ThoughtRecordQuestions/MoodSlider.tsx","Hooks/UseThoughtRecord.tsx","Hooks/useThoughtRecordApi.tsx"],"sourcesContent":["import { Heading, VStack } from '@chakra-ui/react'\nimport { SizeProp } from '@fortawesome/fontawesome-svg-core'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { emotions } from '../ThoughtRecordQuestions/EmotionPicker'\n\ninterface EmotionDisplayProps {\n\temotionName: string\n\tlabel?: string\n\tsize?: SizeProp\n}\n\nconst EmotionDisplay: React.FC<EmotionDisplayProps> = ({\n\temotionName,\n\tlabel,\n\tsize,\n}) => {\n\tif (!size) {\n\t\tsize = '5x' as SizeProp\n\t}\n\tconst emotion = emotions.filter(\n\t\t(emotion) => emotionName === emotion.emotionName,\n\t)[0]\n\tconst { icon, emotionColor } = emotion\n\treturn (\n\t\t<>\n\t\t\t<VStack spacing={4}>\n\t\t\t\t{label && <Heading textAlign={'center'}> {label} </Heading>}\n\t\t\t\t<FontAwesomeIcon size={size} icon={icon} color={emotionColor} />\n\t\t\t\t{label && <Heading color={emotionColor}> {emotionName} </Heading>}\n\t\t\t</VStack>\n\t\t</>\n\t)\n}\n\nexport default EmotionDisplay\n","import { Badge, Center, VStack } from '@chakra-ui/react'\ninterface Props {\n\thotThought: string\n}\n\nconst HotThoughtDisplay: React.FC<Props> = ({ hotThought }) => {\n\treturn (\n\t\t<VStack w={'full'} spacing={-1}>\n\t\t\t<Badge\n\t\t\t\talignSelf={'end'}\n\t\t\t\tmy={2}\n\t\t\t\tmr={6}\n\t\t\t\tcolorScheme=\"red\"\n\t\t\t\tvariant={'solid'}\n\t\t\t>\n\t\t\t\tHot Thought\n\t\t\t</Badge>\n\t\t\t<Center\n\t\t\t\tcolor={'white'}\n\t\t\t\tbg={'red.500'}\n\t\t\t\tp={2}\n\t\t\t\talignSelf={'center'}\n\t\t\t\tw={{ base: '90%', lg: '93%' }}\n\t\t\t\ttextAlign={'center'}\n\t\t\t\tminH={{ base: '80px', lg: '20vh' }}\n\t\t\t\trounded={'2xl'}\n\t\t\t>\n\t\t\t\t{hotThought}\n\t\t\t</Center>\n\t\t</VStack>\n\t)\n}\n\nexport default HotThoughtDisplay\n","import {\n\tFlex,\n\tProgress,\n\tScaleFade,\n\tLightMode,\n\tList,\n\tListItem,\n\tText,\n\tListIcon,\n\tHeading,\n\tVStack,\n} from '@chakra-ui/react'\nimport LoadingTextField from '../Loading/LoadingTextField'\nimport EmotionDisplay from './EmotionDisplay'\nimport { Mood, ThoughtRecord } from '../../types'\nimport UseThemeColors from '../../Hooks/useThemeColors'\nimport { sliderColor } from '../ThoughtRecordQuestions/MoodSlider'\nimport { Accordion } from '@chakra-ui/react'\nimport { RiNodeTree } from 'react-icons/ri'\nimport AccordionElement from '../ThoughtRecordQuestions/AccordianElement'\nimport HotThoughtDisplay from './HotThoughtDisplay'\nimport ArgumentAccordion from '../ThoughtRecordQuestions/ArgumentAccordion'\n\ninterface MoodDisplayProps {\n\tmoods: Mood[]\n\tlabel: string\n}\nconst MoodDisplay: React.FC<MoodDisplayProps> = ({ moods, label }) => {\n\tconst { foregroundColor, textColor } = UseThemeColors()\n\treturn (\n\t\t<Flex\n\t\t\tflexDirection={'column'}\n\t\t\tm={2}\n\t\t\talignItems={'flexStart'}\n\t\t\tjustifyContent={'left'}\n\t\t\tw={{ base: '100%', lg: '75vw' }}\n\t\t>\n\t\t\t<Heading m={2} ml={4} textAlign={'center'}>\n\t\t\t\t{label}\n\t\t\t</Heading>\n\t\t\t<List\n\t\t\t\tm={2}\n\t\t\t\tw={{ base: '85%', lg: '45%' }}\n\t\t\t\talignItems={'center'}\n\t\t\t\talignSelf={'center'}\n\t\t\t\tbg={foregroundColor}\n\t\t\t\tp={2}\n\t\t\t\tpb={4}\n\t\t\t>\n\t\t\t\t{moods.map(({ mood, moodRating }) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<ListItem p={2} width=\"full\" key={mood}>\n\t\t\t\t\t\t\t<ListIcon\n\t\t\t\t\t\t\t\tboxSize={8}\n\t\t\t\t\t\t\t\tcolor={sliderColor(moodRating)}\n\t\t\t\t\t\t\t\tas={RiNodeTree}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<Text\n\t\t\t\t\t\t\t\tm={2}\n\t\t\t\t\t\t\t\tcolor={textColor}\n\t\t\t\t\t\t\t\tposition={'relative'}\n\t\t\t\t\t\t\t\tbottom={2}\n\t\t\t\t\t\t\t\ttextAlign={'center'}\n\t\t\t\t\t\t\t\tdisplay={'inline-flex'}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{mood}\n\t\t\t\t\t\t\t</Text>\n\t\t\t\t\t\t\t<LightMode>\n\t\t\t\t\t\t\t\t<Progress\n\t\t\t\t\t\t\t\t\tsize={'sm'}\n\t\t\t\t\t\t\t\t\tcolorScheme={sliderColor(moodRating).slice(0, -4)}\n\t\t\t\t\t\t\t\t\tvalue={moodRating}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</LightMode>\n\t\t\t\t\t\t</ListItem>\n\t\t\t\t\t)\n\t\t\t\t})}\n\t\t\t</List>\n\t\t</Flex>\n\t)\n}\n\ninterface ThoughtRecordDisplayProps {\n\tthoughtRecord: ThoughtRecord | undefined\n}\nconst ThoughtRecordDisplay: React.FC<ThoughtRecordDisplayProps> = ({\n\tthoughtRecord,\n}) => {\n\tconst { backgroundColor } = UseThemeColors()\n\tif (!thoughtRecord) {\n\t\treturn <LoadingTextField />\n\t}\n\n\tconst argFor = thoughtRecord.evidencefor ? thoughtRecord.evidencefor : ''\n\tconst argAgainst = thoughtRecord.evidenceagainst\n\t\t? thoughtRecord.evidenceagainst\n\t\t: ''\n\tconst argumentsText = {\n\t\targFor: argFor,\n\t\targAgainst: argAgainst,\n\t}\n\treturn (\n\t\t<>\n\t\t\t<ScaleFade in delay={{ enter: 0.3 }}>\n\t\t\t\t<VStack\n\t\t\t\t\tm={0}\n\t\t\t\t\tbg={backgroundColor}\n\t\t\t\t\toverflow={{ base: 'auto', lg: 'visible' }}\n\t\t\t\t\tspacing={10}\n\t\t\t\t\twidth={{ base: '100%', lg: '100%' }}\n\t\t\t\t>\n\t\t\t\t\t{thoughtRecord.emotion && (\n\t\t\t\t\t\t<EmotionDisplay\n\t\t\t\t\t\t\tlabel=\"Emotion\"\n\t\t\t\t\t\t\temotionName={thoughtRecord.emotion}\n\t\t\t\t\t\t/>\n\t\t\t\t\t)}\n\t\t\t\t\t{thoughtRecord.situationquestion && (\n\t\t\t\t\t\t<Accordion allowToggle w={'100%'}>\n\t\t\t\t\t\t\t<AccordionElement\n\t\t\t\t\t\t\t\tlabel=\"The Situation\"\n\t\t\t\t\t\t\t\tpopoverText={thoughtRecord.situationquestion}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</Accordion>\n\t\t\t\t\t)}\n\n\t\t\t\t\t{thoughtRecord.mood && (\n\t\t\t\t\t\t<MoodDisplay moods={thoughtRecord.mood} label={'Moods'} />\n\t\t\t\t\t)}\n\n\t\t\t\t\t{thoughtRecord.thoughts && (\n\t\t\t\t\t\t<MoodDisplay\n\t\t\t\t\t\t\tmoods={thoughtRecord.thoughts.thoughts}\n\t\t\t\t\t\t\tlabel={'Thoughts'}\n\t\t\t\t\t\t/>\n\t\t\t\t\t)}\n\n\t\t\t\t\t{thoughtRecord.thoughts && (\n\t\t\t\t\t\t<HotThoughtDisplay hotThought={thoughtRecord.thoughts.hotThought} />\n\t\t\t\t\t)}\n\n\t\t\t\t\t<ArgumentAccordion argumentsText={argumentsText} />\n\t\t\t\t\t{thoughtRecord.alternativethought && (\n\t\t\t\t\t\t<MoodDisplay\n\t\t\t\t\t\t\tmoods={thoughtRecord.alternativethought}\n\t\t\t\t\t\t\tlabel={'Alternative thoughts'}\n\t\t\t\t\t\t/>\n\t\t\t\t\t)}\n\n\t\t\t\t\t{thoughtRecord.rerateemotion && (\n\t\t\t\t\t\t<EmotionDisplay\n\t\t\t\t\t\t\tlabel=\"After Emotion\"\n\t\t\t\t\t\t\temotionName={thoughtRecord.rerateemotion}\n\t\t\t\t\t\t/>\n\t\t\t\t\t)}\n\t\t\t\t</VStack>\n\t\t\t</ScaleFade>\n\t\t</>\n\t)\n}\nexport default ThoughtRecordDisplay\n","import {\n\tAccordionItem,\n\tAccordionButton,\n\tBox,\n\tAccordionIcon,\n\tAccordionPanel,\n\tHeading,\n} from '@chakra-ui/react'\n\ninterface PopoverButtonProps {\n\tlabel: string\n\tpopoverText: string\n}\n\nconst AccordionElement: React.FC<PopoverButtonProps> = ({\n\tlabel,\n\tpopoverText,\n}) => {\n\treturn (\n\t\t<AccordionItem\n\t\t\talignSelf={'center'}\n\t\t\tmy={2}\n\t\t\tml={{ base: 5, lg: 0 }}\n\t\t\tw={{ base: '90%', lg: '100%' }}\n\t\t>\n\t\t\t<Heading>\n\t\t\t\t<AccordionButton>\n\t\t\t\t\t<Box flex=\"1\" textAlign=\"left\">\n\t\t\t\t\t\t{label}\n\t\t\t\t\t</Box>\n\t\t\t\t\t<AccordionIcon />\n\t\t\t\t</AccordionButton>\n\t\t\t</Heading>\n\t\t\t<AccordionPanel color=\"white\" p={4}>\n\t\t\t\t{popoverText}\n\t\t\t</AccordionPanel>\n\t\t</AccordionItem>\n\t)\n}\n\nexport default AccordionElement\n","import { Accordion } from '@chakra-ui/react'\nimport AccordionElement from './AccordianElement'\n\ninterface Arguments {\n\targFor: string\n\targAgainst: string\n}\n\ninterface Props {\n\targumentsText: Arguments\n}\nconst ArgumentAccordion: React.FC<Props> = ({ argumentsText }) => {\n\tconst { argFor, argAgainst } = argumentsText\n\treturn (\n\t\t<Accordion allowMultiple alignSelf={'center'} w={'100%'} allowToggle>\n\t\t\t<AccordionElement label={'Arguments For'} popoverText={argFor} />\n\t\t\t<AccordionElement label={'Arguments Against'} popoverText={argAgainst} />\n\t\t</Accordion>\n\t)\n}\n\nexport default ArgumentAccordion\n","import { useBreakpointValue, useColorModeValue } from '@chakra-ui/react'\nimport { IconDefinition } from '@fortawesome/free-solid-svg-icons'\nimport { Dispatch, SetStateAction } from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { emotions } from './EmotionPicker'\n\nexport interface Emotion {\n\ticon: IconDefinition\n\temotionColor: string\n\temotionName: string\n}\n\ntype ButtonSizes = '3x' | '5x'\n\ninterface EmotionButtonProps {\n\temotionName: string\n\tsetSelected: Dispatch<SetStateAction<string>>\n\tselected: string\n}\n\nconst EmotionButton: React.FC<EmotionButtonProps> = ({\n\temotionName,\n\tsetSelected,\n\tselected,\n}) => {\n\tconst emotion = emotions.filter(\n\t\t(emotion) => emotionName === emotion.emotionName,\n\t)[0]\n\tconst { emotionColor, icon } = emotion\n\tconst iconColor = useColorModeValue('black', 'white')\n\tconst buttonSize = useBreakpointValue<string>({\n\t\tbase: '3x',\n\t\tmd: '5x',\n\t\tlg: '9x',\n\t}) as ButtonSizes\n\n\tconst getIconColor = (emotionName: string) => {\n\t\tif (selected && emotionName !== selected) {\n\t\t\treturn iconColor\n\t\t} else {\n\t\t\treturn emotionColor\n\t\t}\n\t}\n\n\tconst handleOnClick = (emotionName: string) => {\n\t\tif (emotionName === selected) {\n\t\t\tsetSelected('')\n\t\t} else {\n\t\t\tsetSelected(emotionName)\n\t\t}\n\t}\n\tconst displayColor = getIconColor(emotionName)\n\n\treturn (\n\t\t<>\n\t\t\t<FontAwesomeIcon\n\t\t\t\tsize={buttonSize}\n\t\t\t\tonClick={() => handleOnClick(emotionName)}\n\t\t\t\taria-label={`${emotionName} button`}\n\t\t\t\tcolor={displayColor}\n\t\t\t\ticon={icon}\n\t\t\t/>\n\t\t</>\n\t)\n}\n\nexport default EmotionButton\n","import {\n\tButton,\n\tFlex,\n\tCenter,\n\tHeading,\n\tHStack,\n\tVStack,\n\tScaleFade,\n} from '@chakra-ui/react'\nimport React, { useEffect, useState } from 'react'\nimport EmotionButton, { Emotion } from './EmotionButton'\nimport LoadingTextField from '../Loading/LoadingTextField'\nimport useThoughtRecord from '../../Hooks/UseThoughtRecord'\nimport {\n\tfaFaceMeh,\n\tfaFaceFrownOpen,\n\tfaFaceGrin,\n\tfaFaceSmile,\n} from '@fortawesome/free-solid-svg-icons'\nimport { isKeyOfThoughtRecord } from '../../types'\n\nexport const emotions: Emotion[] = [\n\t{ icon: faFaceFrownOpen, emotionColor: '#322659', emotionName: 'Awful' },\n\t{ icon: faFaceMeh, emotionColor: '#2C5282', emotionName: 'Meh' },\n\t{ icon: faFaceSmile, emotionColor: '#68D391', emotionName: 'Good' },\n\t{ icon: faFaceGrin, emotionColor: '#F6E05E', emotionName: 'Awesome' },\n]\n\nconst getEmotionColorByName = (emotionName: string) => {\n\treturn emotions.filter((emotion) => emotion.emotionName === emotionName)[0]\n\t\t?.emotionColor\n}\n\nconst EmotionPicker: React.FC = () => {\n\tconst [selected, setSelected] = useState<string>('')\n\tconst emotionColor = getEmotionColorByName(selected)\n\tconst { label, isSubmitting, onSubmit, currentQuestion, thoughtRecord } =\n\t\tuseThoughtRecord()\n\n\tuseEffect(() => {\n\t\tif (thoughtRecord) {\n\t\t\tif (isKeyOfThoughtRecord(currentQuestion, thoughtRecord)) {\n\t\t\t\tconst value = thoughtRecord[currentQuestion]\n\t\t\t\tif (typeof value === 'string') {\n\t\t\t\t\tsetSelected(value)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}, [currentQuestion, thoughtRecord])\n\n\tif (!thoughtRecord) {\n\t\treturn <LoadingTextField />\n\t}\n\treturn (\n\t\t<>\n\t\t\t<ScaleFade in delay={{ enter: 0.3 }}>\n\t\t\t\t<Flex p={2} minH={'80vh'}>\n\t\t\t\t\t<Center\n\t\t\t\t\t\tmt={4}\n\t\t\t\t\t\trounded={'75px'}\n\t\t\t\t\t\tborder={selected ? '15px solid' : 'none'}\n\t\t\t\t\t\tborderColor={emotionColor}\n\t\t\t\t\t\tmx={-20}\n\t\t\t\t\t\tw={{ base: 'auto', sm: '90vw', md: '100vw' }}\n\t\t\t\t\t\tp={2}\n\t\t\t\t\t\tminHeight={'70vh'}\n\t\t\t\t\t\tflexDir={'column'}\n\t\t\t\t\t>\n\t\t\t\t\t\t<Heading>{label}</Heading>\n\t\t\t\t\t\t<HStack\n\t\t\t\t\t\t\theight={'50%'}\n\t\t\t\t\t\t\tmx={1}\n\t\t\t\t\t\t\tp={2}\n\t\t\t\t\t\t\tw={{ base: 'auto', lg: '80%' }}\n\t\t\t\t\t\t\tspacing={{ base: '9', md: 'auto' }}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{emotions.map(({ emotionName }) => (\n\t\t\t\t\t\t\t\t<EmotionButton\n\t\t\t\t\t\t\t\t\tkey={emotionName}\n\t\t\t\t\t\t\t\t\temotionName={emotionName}\n\t\t\t\t\t\t\t\t\tselected={selected}\n\t\t\t\t\t\t\t\t\tsetSelected={setSelected}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</HStack>\n\t\t\t\t\t\t<VStack p={2} w={'full'} height={'10vh'} spacing={6}>\n\t\t\t\t\t\t\t{selected ? (\n\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t<Heading color={emotionColor}> {selected} </Heading>\n\t\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t\tm={2}\n\t\t\t\t\t\t\t\t\t\tvariant={'submit'}\n\t\t\t\t\t\t\t\t\t\tisLoading={isSubmitting}\n\t\t\t\t\t\t\t\t\t\tonClick={() => onSubmit(selected)}\n\t\t\t\t\t\t\t\t\t\tw={'60%'}\n\t\t\t\t\t\t\t\t\t\tminH={'40px'}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\tSubmit\n\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t) : null}\n\t\t\t\t\t\t</VStack>\n\t\t\t\t\t</Center>\n\t\t\t\t</Flex>\n\t\t\t</ScaleFade>\n\t\t</>\n\t)\n}\n\nexport default EmotionPicker\n","import {\n\tTooltip,\n\tBox,\n\tSlider,\n\tText,\n\tIconButton,\n\tHStack,\n\tSliderFilledTrack,\n\tSliderThumb,\n\tSliderTrack,\n\tVStack,\n\tCenter,\n\tFade,\n} from '@chakra-ui/react'\nimport { CloseIcon } from '@chakra-ui/icons'\nimport { Mood } from '../../types'\nimport { SetStateAction, useState } from 'react'\nimport React from 'react'\nimport UseThemeColors from '../../Hooks/useThemeColors'\nimport UseThoughtRecord from '../../Hooks/UseThoughtRecord'\ninterface ButtonProps {\n\tdeleteHandler: React.MouseEventHandler<HTMLButtonElement>\n}\ninterface MoodEntryProps {\n\tmood: string\n\tmoodRating: number\n\tsliderChange: (value: number) => void\n\tdeleteHandler: () => void\n}\n\nexport const sliderColor = (value: number): string => {\n\tif (value < 25) {\n\t\treturn 'green.400'\n\t}\n\tif (value < 50) {\n\t\treturn 'yellow.600'\n\t}\n\tif (value < 75) {\n\t\treturn 'orange.400'\n\t}\n\treturn 'red.800'\n}\ninterface SliderProps {\n\tmoods: Mood[]\n\tsetMoods: (value: SetStateAction<Mood[]>) => void\n}\nconst MoodSlider: React.FC<SliderProps> = ({ moods, setMoods }) => {\n\tconst deleteHandler = (moodName: string) => {\n\t\tsetMoods(moods.filter((mood) => mood.mood !== moodName))\n\t}\n\tconst sliderChange = (moodName: string) => (value: number) => {\n\t\tsetMoods((moods) =>\n\t\t\tmoods.map((mood) => {\n\t\t\t\tif (mood.mood === moodName) {\n\t\t\t\t\treturn { mood: mood.mood, moodRating: value }\n\t\t\t\t} else {\n\t\t\t\t\treturn mood\n\t\t\t\t}\n\t\t\t}),\n\t\t)\n\t}\n\treturn (\n\t\t<Center flexDirection={'column'} w={'100%'} mt={0} mb={0}>\n\t\t\t{moods.map(({ mood, moodRating }) => (\n\t\t\t\t<MoodEntry\n\t\t\t\t\tmood={mood}\n\t\t\t\t\tkey={mood}\n\t\t\t\t\tdeleteHandler={() => deleteHandler(mood)}\n\t\t\t\t\tsliderChange={sliderChange(mood)}\n\t\t\t\t\tmoodRating={moodRating}\n\t\t\t\t/>\n\t\t\t))}\n\t\t</Center>\n\t)\n}\nconst MoodEntry: React.FC<MoodEntryProps> = ({\n\tdeleteHandler,\n\tmood,\n\tmoodRating,\n\tsliderChange,\n}: MoodEntryProps) => {\n\tconst { currentQuestion } = UseThoughtRecord()\n\tconst [isDeleting, setIsDeleting] = useState(false)\n\tconst animateThenDelete = (deleteHandler: () => void) => {\n\t\tsetIsDeleting(true)\n\t\tsetTimeout(deleteHandler, 500)\n\t}\n\tconst { foregroundColor } = UseThemeColors()\n\treturn (\n\t\t<>\n\t\t\t<Fade\n\t\t\t\tin={!isDeleting}\n\t\t\t\ttransition={{ enter: { duration: 0.5 }, exit: { duration: 0.5 } }}\n\t\t\t\tstyle={{\n\t\t\t\t\tflexDirection: 'column',\n\t\t\t\t\talignItems: 'center',\n\t\t\t\t\tdisplay: 'flex',\n\t\t\t\t\theight: 'auto',\n\t\t\t\t\twidth: '100%',\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<Box w={{ base: 'full', lg: '80%' }} my={3} alignSelf={'center'}>\n\t\t\t\t\t<HStack\n\t\t\t\t\t\trounded={'2xl'}\n\t\t\t\t\t\tmx={3}\n\t\t\t\t\t\tbg={foregroundColor}\n\t\t\t\t\t\tpl={2}\n\t\t\t\t\t\tminH={20}\n\t\t\t\t\t\tpr={1}\n\t\t\t\t\t\tjustifyContent={'center'}\n\t\t\t\t\t>\n\t\t\t\t\t\t<VStack ml={2} spacing={2} p={1} w={'100%'}>\n\t\t\t\t\t\t\t<Text w={'100%'} textAlign={'left'}>\n\t\t\t\t\t\t\t\t{mood}\n\t\t\t\t\t\t\t</Text>\n\t\t\t\t\t\t\t<Slider\n\t\t\t\t\t\t\t\tcolorScheme={sliderColor(moodRating).slice(0, -4)}\n\t\t\t\t\t\t\t\tml={2}\n\t\t\t\t\t\t\t\tmr={1}\n\t\t\t\t\t\t\t\tmb={2}\n\t\t\t\t\t\t\t\tonChange={(value) => sliderChange(value)}\n\t\t\t\t\t\t\t\tvalue={moodRating}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<SliderTrack>\n\t\t\t\t\t\t\t\t\t<SliderFilledTrack />\n\t\t\t\t\t\t\t\t</SliderTrack>\n\t\t\t\t\t\t\t\t<Tooltip\n\t\t\t\t\t\t\t\t\thasArrow\n\t\t\t\t\t\t\t\t\tzIndex={-9999}\n\t\t\t\t\t\t\t\t\tfontSize={'sm'}\n\t\t\t\t\t\t\t\t\tbg={sliderColor(moodRating)}\n\t\t\t\t\t\t\t\t\tcolor=\"white\"\n\t\t\t\t\t\t\t\t\tplacement=\"right\"\n\t\t\t\t\t\t\t\t\tisOpen={!isDeleting}\n\t\t\t\t\t\t\t\t\tlabel={`${moodRating}%`}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<SliderThumb bg=\"teal.400\" />\n\t\t\t\t\t\t\t\t</Tooltip>\n\t\t\t\t\t\t\t</Slider>\n\t\t\t\t\t\t</VStack>\n\t\t\t\t\t\t{currentQuestion !== 'reratemoods' ? (\n\t\t\t\t\t\t\t<DeleteButton\n\t\t\t\t\t\t\t\tdeleteHandler={() => animateThenDelete(deleteHandler)}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t) : null}\n\t\t\t\t\t</HStack>\n\t\t\t\t</Box>\n\t\t\t</Fade>\n\t\t</>\n\t)\n}\nconst DeleteButton: React.FC<ButtonProps> = ({ deleteHandler }) => {\n\treturn (\n\t\t<IconButton\n\t\t\tcolor={'black'}\n\t\t\taria-label=\"Delete Mood\"\n\t\t\tvariant=\"ghost\"\n\t\t\tsize={'sm'}\n\t\t\ticon={<CloseIcon />}\n\t\t\tonClick={deleteHandler}\n\t\t/>\n\t)\n}\n\nexport default MoodSlider\n","import { useToast } from '@chakra-ui/react'\nimport { useEffect, useState } from 'react'\nimport { useLocation, useNavigate } from 'react-router-dom'\nimport {\n\tThoughtRecord,\n\tisThoughtRecord,\n\tisKeyOfThoughtRecord,\n\tQuestionType,\n\tquestion,\n\tthoughtRecordData,\n\tisQuestion,\n\tFormValues,\n} from '../types'\nimport useThoughtRecordApi from './useThoughtRecordApi'\n\ninterface UseThoughtRecordReturn {\n\tlabel: string\n\tonSubmit: (data: FormValues) => void\n\tisSubmitting: boolean\n\tcurrentQuestion: string\n\tisValidQuestion: boolean | null\n\tthoughtRecord: ThoughtRecord | undefined\n}\n\nconst getLastValid = (pathname: QuestionType, thoughtRecord: ThoughtRecord) => {\n\tfor (let path of question) {\n\t\tlet thoughtRecordKey = path.slice(1)\n\t\tif (path === pathname) {\n\t\t\treturn path\n\t\t}\n\t\tif (isKeyOfThoughtRecord(thoughtRecordKey, thoughtRecord)) {\n\t\t\tif (thoughtRecord[thoughtRecordKey] === null) {\n\t\t\t\treturn path\n\t\t\t}\n\t\t}\n\t}\n\treturn pathname\n}\nconst UseThoughtRecord = (): UseThoughtRecordReturn | never => {\n\tconst toast = useToast()\n\tconst navigate = useNavigate()\n\tconst { pathname, state } = useLocation()\n\tconst [thoughtRecord, setThoughtRecord] = useState<ThoughtRecord>()\n\tconst [isValidQuestion, setIsValidQuestion] = useState<boolean | null>(null)\n\tconst {\n\t\tupdateThoughtRecord,\n\t\tgetActiveThoughtRecord,\n\t\tisSubmitting,\n\t\tsaveThoughtRecord,\n\t} = useThoughtRecordApi()\n\n\tuseEffect(() => {\n\t\tif (!isValidQuestion && isQuestion(pathname)) {\n\t\t\tif (thoughtRecord) {\n\t\t\t\tconst lastValid = getLastValid(pathname, thoughtRecord)\n\t\t\t\tif (lastValid !== pathname) {\n\t\t\t\t\tnavigate(lastValid)\n\t\t\t\t} else {\n\t\t\t\t\tsetIsValidQuestion(true)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}, [isValidQuestion, navigate, pathname, thoughtRecord])\n\n\tuseEffect(() => {\n\t\tconst getThoughtRecord = async () => {\n\t\t\tif (!thoughtRecord) {\n\t\t\t\tif (isThoughtRecord(state)) {\n\t\t\t\t\tsetThoughtRecord(state)\n\t\t\t\t} else {\n\t\t\t\t\tsetThoughtRecord(await getActiveThoughtRecord())\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (!thoughtRecord) {\n\t\t\tgetThoughtRecord()\n\t\t}\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, [])\n\n\tconst onSubmit = async (data: FormValues) => {\n\t\tif (isQuestion(pathname)) {\n\t\t\tif (pathname === '/submit') {\n\t\t\t\ttry {\n\t\t\t\t\tawait saveThoughtRecord()\n\t\t\t\t\tnavigate('/thoughtrecords')\n\t\t\t\t} catch (error) {\n\t\t\t\t\tif (error instanceof Error) {\n\t\t\t\t\t\ttoast({\n\t\t\t\t\t\t\tstatus: 'error',\n\t\t\t\t\t\t\tdescription: 'problem submitting',\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst updateKey = pathname.slice(1)\n\t\t\t\tconst activeThoughtRecord: string = isThoughtRecord(thoughtRecord)\n\t\t\t\t\t? thoughtRecord.key\n\t\t\t\t\t: ''\n\t\t\t\tconst NextLinkIndex = question.indexOf(pathname) + 1\n\t\t\t\ttry {\n\t\t\t\t\tconst updatedRecord = await updateThoughtRecord(\n\t\t\t\t\t\tdata,\n\t\t\t\t\t\tactiveThoughtRecord,\n\t\t\t\t\t\tupdateKey,\n\t\t\t\t\t)\n\t\t\t\t\tnavigate(question[NextLinkIndex], { state: { ...updatedRecord } })\n\t\t\t\t} catch {\n\t\t\t\t\ttoast({\n\t\t\t\t\t\tstatus: 'error',\n\t\t\t\t\t\tdescription: 'problem with update',\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tlet label: string = ''\n\tlet currentQuestion: string = ''\n\tif (isQuestion(pathname)) {\n\t\tlabel = thoughtRecordData[pathname].label\n\t\tcurrentQuestion = pathname.slice(1)\n\t}\n\treturn {\n\t\tlabel: label,\n\t\tonSubmit: onSubmit,\n\t\tisSubmitting: isSubmitting,\n\t\tcurrentQuestion: currentQuestion,\n\t\tthoughtRecord: thoughtRecord,\n\t\tisValidQuestion: isValidQuestion,\n\t}\n}\nexport default UseThoughtRecord\n","import { useState } from 'react'\nimport {\n\tthoughtRecordEndPoint,\n\tgetAuthHeader,\n\tuserEndPoint,\n} from '../Utils/api'\nimport useAuth from './useAuth'\nimport { FormValues, ThoughtRecord, isThoughtRecord, User } from '../types'\n/* returns a function that takes in the current path and active thought record \nto update and a piece of state that shows if the data is currently being fetched */\n\ntype FetchThoughtRecord = () => Promise<ThoughtRecord>\n\ninterface useThoughtRecordReturn {\n\tdeleteThoughtRecord: (thoughtRecord: string) => Promise<string>\n\tgetActiveThoughtRecord: FetchThoughtRecord\n\tgetNewThoughtRecord: FetchThoughtRecord\n\tgetAllThoughtRecords: () => Promise<ThoughtRecord[]>\n\tupdateThoughtRecord: (\n\t\tdata: FormValues,\n\t\tactiveThoughtRecord: string,\n\t\tupdateKey: string,\n\t) => Promise<ThoughtRecord>\n\tsaveThoughtRecord: () => Promise<User>\n\teditThoughtRecord: (thoughtRecordId: string) => Promise<ThoughtRecord>\n\tisSubmitting: boolean\n}\n\nconst useThoughtRecordApi = (): useThoughtRecordReturn => {\n\tconst { logout } = useAuth()\n\tconst authHeader = getAuthHeader()\n\tconst [isSubmitting, setIsSubmitting] = useState(false)\n\n\tconst handleFetch = async (endPoint: string, fetchOptions: RequestInit) => {\n\t\tif (isSubmitting) {\n\t\t\treturn\n\t\t}\n\t\tawait setIsSubmitting(true)\n\t\tconst response = await fetch(endPoint, fetchOptions)\n\t\tif (response.ok) {\n\t\t\tconst data = await response.json()\n\t\t\tsetIsSubmitting(false)\n\t\t\treturn data\n\t\t}\n\t\tif (response.status === 401 || 403) {\n\t\t\tlogout()\n\t\t} else throw Error(response.statusText)\n\t}\n\n\tconst getActiveThoughtRecord = async (): Promise<ThoughtRecord> => {\n\t\tconst data = await handleFetch(thoughtRecordEndPoint, authHeader)\n\t\tif (isThoughtRecord(data)) {\n\t\t\treturn data\n\t\t}\n\t\tthrow Error('not a thought record')\n\t}\n\tconst getNewThoughtRecord = async (): Promise<ThoughtRecord> => {\n\t\tconst options = { method: 'POST', ...authHeader }\n\t\tconst thoughtRecord = await handleFetch(thoughtRecordEndPoint, options)\n\n\t\tif (isThoughtRecord(thoughtRecord)) {\n\t\t\treturn thoughtRecord\n\t\t} else {\n\t\t\tthrow Error('response isnt valid')\n\t\t}\n\t}\n\n\tconst getAllThoughtRecords = async (): Promise<ThoughtRecord[]> => {\n\t\tconst options: RequestInit = {\n\t\t\t...authHeader,\n\t\t}\n\t\treturn await handleFetch(`${thoughtRecordEndPoint}/all`, options)\n\t}\n\n\tconst saveThoughtRecord = async (): Promise<User> => {\n\t\tconst saveOptions: RequestInit = {\n\t\t\theaders: {\n\t\t\t\t...authHeader.headers,\n\t\t\t\tAccept: 'application/json',\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t},\n\t\t\tmethod: 'POST',\n\t\t}\n\n\t\treturn await handleFetch(`${userEndPoint}/thoughtrecord`, saveOptions)\n\t}\n\tconst deleteThoughtRecord = async (\n\t\tthoughtRecord: string,\n\t): Promise<string> => {\n\t\tconst deleteOptions: RequestInit = {\n\t\t\t...authHeader,\n\t\t\tmethod: 'DELETE',\n\t\t}\n\t\treturn await handleFetch(\n\t\t\t`${thoughtRecordEndPoint}/${thoughtRecord}`,\n\t\t\tdeleteOptions,\n\t\t)\n\t}\n\n\tconst editThoughtRecord = async (thoughtRecordId: string) => {\n\t\tconst editOptions: RequestInit = {\n\t\t\t...authHeader,\n\t\t\tmethod: 'POST',\n\t\t}\n\t\tconst thoughtRecord = await handleFetch(\n\t\t\t`${thoughtRecordEndPoint}/edit/${thoughtRecordId}`,\n\t\t\teditOptions,\n\t\t)\n\t\tif (isThoughtRecord(thoughtRecord)) {\n\t\t\treturn thoughtRecord\n\t\t}\n\t\tthrow Error('Invalid return')\n\t}\n\tconst updateThoughtRecord = async (\n\t\tdata: FormValues,\n\t\tactiveThoughtRecord: string,\n\t\tupdateKey: string,\n\t): Promise<ThoughtRecord> => {\n\t\tconst updateOptions: RequestInit = {\n\t\t\theaders: {\n\t\t\t\tAccept: 'application/json',\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t...authHeader.headers,\n\t\t\t},\n\t\t\tmethod: 'PATCH',\n\t\t}\n\t\tupdateOptions.body = JSON.stringify({ [updateKey]: data })\n\t\treturn await handleFetch(\n\t\t\t`${thoughtRecordEndPoint}/${activeThoughtRecord}`,\n\t\t\tupdateOptions,\n\t\t)\n\t}\n\treturn {\n\t\tdeleteThoughtRecord,\n\t\tgetAllThoughtRecords,\n\t\tupdateThoughtRecord,\n\t\tgetActiveThoughtRecord,\n\t\tgetNewThoughtRecord,\n\t\tisSubmitting,\n\t\tsaveThoughtRecord,\n\t\teditThoughtRecord,\n\t}\n}\n\nexport default useThoughtRecordApi\n"],"names":["emotionName","label","size","emotion","emotions","icon","emotionColor","spacing","textAlign","color","hotThought","w","alignSelf","my","mr","colorScheme","variant","bg","p","base","lg","minH","rounded","MoodDisplay","moods","UseThemeColors","foregroundColor","textColor","flexDirection","m","alignItems","justifyContent","ml","pb","map","mood","moodRating","width","boxSize","sliderColor","as","RiNodeTree","position","bottom","display","slice","value","thoughtRecord","backgroundColor","argumentsText","argFor","evidencefor","argAgainst","evidenceagainst","in","delay","enter","overflow","situationquestion","allowToggle","popoverText","thoughts","alternativethought","rerateemotion","flex","allowMultiple","setSelected","selected","filter","iconColor","useColorModeValue","buttonSize","useBreakpointValue","md","displayColor","getIconColor","onClick","handleOnClick","faFaceFrownOpen","faFaceMeh","faFaceSmile","faFaceGrin","useState","getEmotionColorByName","useThoughtRecord","isSubmitting","onSubmit","currentQuestion","useEffect","isKeyOfThoughtRecord","mt","border","borderColor","mx","sm","minHeight","flexDir","height","isLoading","LoadingTextField","MoodEntry","deleteHandler","sliderChange","UseThoughtRecord","isDeleting","setIsDeleting","transition","duration","exit","style","pl","pr","mb","onChange","hasArrow","zIndex","fontSize","placement","isOpen","DeleteButton","setTimeout","animateThenDelete","setMoods","moodName","toast","useToast","navigate","useNavigate","useLocation","pathname","state","setThoughtRecord","isValidQuestion","setIsValidQuestion","useThoughtRecordApi","updateThoughtRecord","getActiveThoughtRecord","saveThoughtRecord","isQuestion","lastValid","question","path","thoughtRecordKey","getLastValid","getThoughtRecord","isThoughtRecord","data","Error","status","description","updateKey","activeThoughtRecord","key","NextLinkIndex","updatedRecord","thoughtRecordData","logout","useAuth","authHeader","getAuthHeader","setIsSubmitting","handleFetch","endPoint","fetchOptions","fetch","response","ok","json","statusText","thoughtRecordEndPoint","getNewThoughtRecord","options","method","getAllThoughtRecords","saveOptions","headers","Accept","userEndPoint","deleteThoughtRecord","deleteOptions","editThoughtRecord","thoughtRecordId","editOptions","updateOptions","body","JSON","stringify"],"sourceRoot":""}