{"version":3,"file":"static/js/834.0f2f9b8e.chunk.js","mappings":"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","sources":["Components/ThoughtRecordQuestions/MoodSlider.tsx","Components/ThoughtRecordQuestions/SelectQuestion.tsx","Components/ThoughtRecordQuestions/HotThoughtSelect.tsx","Components/ThoughtRecordQuestions/ThoughtQuestion.tsx","Hooks/UseThoughtRecord.tsx","Hooks/useThoughtRecordApi.tsx"],"sourcesContent":["import {\n\tTooltip,\n\tBox,\n\tSlider,\n\tText,\n\tIconButton,\n\tHStack,\n\tSliderFilledTrack,\n\tSliderThumb,\n\tSliderTrack,\n\tVStack,\n\tCenter,\n\tFade,\n} from '@chakra-ui/react'\nimport { CloseIcon } from '@chakra-ui/icons'\nimport { Mood } from '../../types'\nimport { SetStateAction, useState } from 'react'\nimport React from 'react'\nimport UseThemeColors from '../../Hooks/useThemeColors'\nimport UseThoughtRecord from '../../Hooks/UseThoughtRecord'\ninterface ButtonProps {\n\tdeleteHandler: React.MouseEventHandler<HTMLButtonElement>\n}\ninterface MoodEntryProps {\n\tmood: string\n\tmoodRating: number\n\tsliderChange: (value: number) => void\n\tdeleteHandler: () => void\n}\n\nexport const sliderColor = (value: number): string => {\n\tif (value < 25) {\n\t\treturn 'green.400'\n\t}\n\tif (value < 50) {\n\t\treturn 'yellow.600'\n\t}\n\tif (value < 75) {\n\t\treturn 'orange.400'\n\t}\n\treturn 'red.800'\n}\ninterface SliderProps {\n\tmoods: Mood[]\n\tsetMoods: (value: SetStateAction<Mood[]>) => void\n}\nconst MoodSlider: React.FC<SliderProps> = ({ moods, setMoods }) => {\n\tconst deleteHandler = (moodName: string) => {\n\t\tsetMoods(moods.filter((mood) => mood.mood !== moodName))\n\t}\n\tconst sliderChange = (moodName: string) => (value: number) => {\n\t\tsetMoods((moods) =>\n\t\t\tmoods.map((mood) => {\n\t\t\t\tif (mood.mood === moodName) {\n\t\t\t\t\treturn { mood: mood.mood, moodRating: value }\n\t\t\t\t} else {\n\t\t\t\t\treturn mood\n\t\t\t\t}\n\t\t\t}),\n\t\t)\n\t}\n\treturn (\n\t\t<Center flexDirection={'column'} w={'100%'} mt={0} mb={0}>\n\t\t\t{moods.map(({ mood, moodRating }) => (\n\t\t\t\t<MoodEntry\n\t\t\t\t\tmood={mood}\n\t\t\t\t\tkey={mood}\n\t\t\t\t\tdeleteHandler={() => deleteHandler(mood)}\n\t\t\t\t\tsliderChange={sliderChange(mood)}\n\t\t\t\t\tmoodRating={moodRating}\n\t\t\t\t/>\n\t\t\t))}\n\t\t</Center>\n\t)\n}\nconst MoodEntry: React.FC<MoodEntryProps> = ({\n\tdeleteHandler,\n\tmood,\n\tmoodRating,\n\tsliderChange,\n}: MoodEntryProps) => {\n\tconst { currentQuestion } = UseThoughtRecord()\n\tconst [isDeleting, setIsDeleting] = useState(false)\n\tconst animateThenDelete = (deleteHandler: () => void) => {\n\t\tsetIsDeleting(true)\n\t\tsetTimeout(deleteHandler, 500)\n\t}\n\tconst { foregroundColor } = UseThemeColors()\n\treturn (\n\t\t<>\n\t\t\t<Fade\n\t\t\t\tin={!isDeleting}\n\t\t\t\ttransition={{ enter: { duration: 0.5 }, exit: { duration: 0.5 } }}\n\t\t\t\tstyle={{\n\t\t\t\t\tflexDirection: 'column',\n\t\t\t\t\talignItems: 'center',\n\t\t\t\t\tdisplay: 'flex',\n\t\t\t\t\theight: 'auto',\n\t\t\t\t\twidth: '100%',\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<Box w={{ base: 'full', lg: '80%' }} my={3} alignSelf={'center'}>\n\t\t\t\t\t<HStack\n\t\t\t\t\t\trounded={'2xl'}\n\t\t\t\t\t\tmx={3}\n\t\t\t\t\t\tbg={foregroundColor}\n\t\t\t\t\t\tpl={2}\n\t\t\t\t\t\tminH={20}\n\t\t\t\t\t\tpr={1}\n\t\t\t\t\t\tjustifyContent={'center'}\n\t\t\t\t\t>\n\t\t\t\t\t\t<VStack ml={2} spacing={2} p={1} w={'100%'}>\n\t\t\t\t\t\t\t<Text w={'100%'} textAlign={'left'}>\n\t\t\t\t\t\t\t\t{mood}\n\t\t\t\t\t\t\t</Text>\n\t\t\t\t\t\t\t<Slider\n\t\t\t\t\t\t\t\tcolorScheme={sliderColor(moodRating).slice(0, -4)}\n\t\t\t\t\t\t\t\tml={2}\n\t\t\t\t\t\t\t\tmr={1}\n\t\t\t\t\t\t\t\tmb={2}\n\t\t\t\t\t\t\t\tonChange={(value) => sliderChange(value)}\n\t\t\t\t\t\t\t\tvalue={moodRating}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<SliderTrack>\n\t\t\t\t\t\t\t\t\t<SliderFilledTrack />\n\t\t\t\t\t\t\t\t</SliderTrack>\n\t\t\t\t\t\t\t\t<Tooltip\n\t\t\t\t\t\t\t\t\thasArrow\n\t\t\t\t\t\t\t\t\tzIndex={-9999}\n\t\t\t\t\t\t\t\t\tfontSize={'sm'}\n\t\t\t\t\t\t\t\t\tbg={sliderColor(moodRating)}\n\t\t\t\t\t\t\t\t\tcolor=\"white\"\n\t\t\t\t\t\t\t\t\tplacement=\"right\"\n\t\t\t\t\t\t\t\t\tisOpen={!isDeleting}\n\t\t\t\t\t\t\t\t\tlabel={`${moodRating}%`}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<SliderThumb bg=\"teal.400\" />\n\t\t\t\t\t\t\t\t</Tooltip>\n\t\t\t\t\t\t\t</Slider>\n\t\t\t\t\t\t</VStack>\n\t\t\t\t\t\t{currentQuestion !== 'reratemoods' ? (\n\t\t\t\t\t\t\t<DeleteButton\n\t\t\t\t\t\t\t\tdeleteHandler={() => animateThenDelete(deleteHandler)}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t) : null}\n\t\t\t\t\t</HStack>\n\t\t\t\t</Box>\n\t\t\t</Fade>\n\t\t</>\n\t)\n}\nconst DeleteButton: React.FC<ButtonProps> = ({ deleteHandler }) => {\n\treturn (\n\t\t<IconButton\n\t\t\tcolor={'black'}\n\t\t\taria-label=\"Delete Mood\"\n\t\t\tvariant=\"ghost\"\n\t\t\tsize={'sm'}\n\t\t\ticon={<CloseIcon />}\n\t\t\tonClick={deleteHandler}\n\t\t/>\n\t)\n}\n\nexport default MoodSlider\n","import { CreatableSelect, ActionMeta } from 'chakra-react-select'\nimport { Dispatch, SetStateAction } from 'react'\nimport { Button, Box, FormLabel, Heading, SlideFade } from '@chakra-ui/react'\nimport { useState } from 'react'\nimport { Mood } from '../../types'\nimport MoodList from './MoodSlider'\nimport useThoughtRecord from '../../Hooks/UseThoughtRecord'\n\ntype Option = {\n\tvalue: string\n\tlabel: string\n}\ninterface SelectOption {\n\tlabel: string\n\tvalue: string\n}\ninterface RecordProps {\n\tmoods: Mood[]\n\tsetMoods: Dispatch<SetStateAction<Mood[]>>\n\tselectOptions: SelectOption[]\n\tlabel: string\n\tisSubmitting: boolean\n}\n\nconst SelectQuestion: React.FC<RecordProps> = ({\n\tisSubmitting,\n\tmoods,\n\tsetMoods,\n\tselectOptions,\n\tlabel,\n}: RecordProps) => {\n\tconst { currentQuestion } = useThoughtRecord()\n\tconst [selectedMood, setSelectedMood] = useState<string>('')\n\n\tconst addMood = (mood: string) => {\n\t\tif (!moods.map((mood) => mood.mood).includes(mood) && mood) {\n\t\t\tsetMoods([...moods, { mood: mood, moodRating: 0 }])\n\t\t}\n\t}\n\tconst handleChange = (\n\t\toption: Option | null,\n\t\tactionMeta: ActionMeta<Option>,\n\t) => {\n\t\tif (option) {\n\t\t\tsetSelectedMood(option.value)\n\t\t}\n\t}\n\treturn (\n\t\t<>\n\t\t\t{currentQuestion !== 'reratemoods' ? (\n\t\t\t\t<SlideFade\n\t\t\t\t\toffsetY={0}\n\t\t\t\t\toffsetX={50}\n\t\t\t\t\ttransition={{\n\t\t\t\t\t\tenter: { delay: 0.2, duration: 0.5 },\n\t\t\t\t\t\texit: { delay: 0.4, duration: 0.5 },\n\t\t\t\t\t}}\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tflexDirection: 'column',\n\t\t\t\t\t\talignItems: 'center',\n\t\t\t\t\t\tdisplay: 'flex',\n\t\t\t\t\t\theight: 'auto',\n\t\t\t\t\t\twidth: '100%',\n\t\t\t\t\t}}\n\t\t\t\t\tin={!isSubmitting}\n\t\t\t\t>\n\t\t\t\t\t<Box p={2} w={'92%'} mt={6} mb={2} mx={7}>\n\t\t\t\t\t\t<FormLabel mb={2} color={'white'} fontSize={14}>\n\t\t\t\t\t\t\t{label}\n\t\t\t\t\t\t</FormLabel>\n\t\t\t\t\t\t<CreatableSelect\n\t\t\t\t\t\t\tsize=\"md\"\n\t\t\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\t\t\toptions={selectOptions}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Box>\n\t\t\t\t\t<Button\n\t\t\t\t\t\talignSelf={'center'}\n\t\t\t\t\t\tonClick={() => addMood(selectedMood)}\n\t\t\t\t\t\tw={'60%'}\n\t\t\t\t\t\tminH={10}\n\t\t\t\t\t\tmy={6}\n\t\t\t\t\t>\n\t\t\t\t\t\tAdd\n\t\t\t\t\t</Button>\n\t\t\t\t</SlideFade>\n\t\t\t) : (\n\t\t\t\t<Heading> {label} </Heading>\n\t\t\t)}\n\n\t\t\t<MoodList moods={moods} setMoods={setMoods} />\n\t\t</>\n\t)\n}\n\nexport default SelectQuestion\n","import { Center, Heading } from '@chakra-ui/react'\nimport UseThemeColors from '../../Hooks/useThemeColors'\n\ninterface HotThoughtProps {\n\tthoughts: string[]\n\tonSelect: (value: string) => void\n\tselected: string\n}\n\nconst HotThoughtSelect: React.FC<HotThoughtProps> = ({\n\tthoughts,\n\tonSelect,\n\tselected,\n}) => {\n\tconst { foregroundColor } = UseThemeColors()\n\treturn (\n\t\t<>\n\t\t\t<Heading mt={4} mx={4} textAlign={'center'}>\n\t\t\t\tChoose the Hot Thought\n\t\t\t</Heading>\n\t\t\t<Center\n\t\t\t\tp={4}\n\t\t\t\tflexDirection={'column'}\n\t\t\t\tmx={2}\n\t\t\t\tw={'100%'}\n\t\t\t\tminHeight={'50vh'}\n\t\t\t\tjustifyContent={'space-evenly'}\n\t\t\t>\n\t\t\t\t{thoughts.map((thought) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<Center\n\t\t\t\t\t\t\tkey={thought}\n\t\t\t\t\t\t\tp={2}\n\t\t\t\t\t\t\trounded={'2xl'}\n\t\t\t\t\t\t\tfontSize={14}\n\t\t\t\t\t\t\tcolor={selected === thought ? 'white' : 'inital'}\n\t\t\t\t\t\t\tminH={'10vh'}\n\t\t\t\t\t\t\twidth={'90%'}\n\t\t\t\t\t\t\tbg={selected === thought ? 'red.500' : foregroundColor}\n\t\t\t\t\t\t\tonClick={() => onSelect(thought)}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{thought}\n\t\t\t\t\t\t</Center>\n\t\t\t\t\t)\n\t\t\t\t})}\n\t\t\t</Center>\n\t\t</>\n\t)\n}\n\nexport default HotThoughtSelect\n","import { useEffect, useState } from 'react'\nimport partialThoughtData from '../../Data/thoughts.json'\nimport SelectQuestion from './SelectQuestion'\nimport { Mood } from '../../types'\nimport { Button, SlideFade } from '@chakra-ui/react'\nimport HotThoughtSelect from './HotThoughtSelect'\nimport UseThoughtRecord from '../../Hooks/UseThoughtRecord'\nimport UseThemeColors from '../../Hooks/useThemeColors'\nimport LoadingTextField from '../Loading/LoadingTextField'\n\nconst ThoughtQuestion = () => {\n\tconst thoughtData = partialThoughtData.map((thought) => ({\n\t\t...thought,\n\t\tvalue: thought.label,\n\t}))\n\tconst [thoughts, setThoughts] = useState<Mood[]>([])\n\tconst [selected, SetSelected] = useState<string>('')\n\tconst { label, onSubmit, isSubmitting, thoughtRecord } = UseThoughtRecord()\n\tconst [doneThoughts, setDoneThoughts] = useState<Boolean>(false)\n\tconst { foregroundColor } = UseThemeColors()\n\tconst onSelect = (value: string) => {\n\t\tSetSelected(value)\n\t}\n\tuseEffect(() => {\n\t\tif (thoughtRecord?.thoughts) {\n\t\t\tsetThoughts(thoughtRecord.thoughts.thoughts)\n\t\t}\n\t}, [thoughtRecord, setThoughts])\n\tconst handleMoodSubmit = () => {\n\t\tif (!doneThoughts) {\n\t\t\tsetDoneThoughts(true)\n\t\t} else {\n\t\t\tif (selected) {\n\t\t\t\tonSubmit({ thoughts: thoughts, hotThought: selected })\n\t\t\t}\n\t\t}\n\t}\n\tconst thoughtIDs = thoughts.map((thought) => thought.mood)\n\tif (!thoughtRecord) {\n\t\treturn <LoadingTextField />\n\t}\n\treturn (\n\t\t<>\n\t\t\t{!doneThoughts ? (\n\t\t\t\t<SelectQuestion\n\t\t\t\t\tmoods={thoughts}\n\t\t\t\t\tisSubmitting={isSubmitting}\n\t\t\t\t\tsetMoods={setThoughts}\n\t\t\t\t\tselectOptions={thoughtData}\n\t\t\t\t\tlabel={label}\n\t\t\t\t/>\n\t\t\t) : (\n\t\t\t\t<SlideFade\n\t\t\t\t\tin={!isSubmitting}\n\t\t\t\t\toffsetY={-100}\n\t\t\t\t\ttransition={{\n\t\t\t\t\t\tenter: { delay: 0.3, duration: 0.5 },\n\t\t\t\t\t\texit: { delay: 0.5, duration: 0.5 },\n\t\t\t\t\t}}\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tflexDirection: 'column',\n\t\t\t\t\t\talignItems: 'center',\n\t\t\t\t\t\tdisplay: 'flex',\n\t\t\t\t\t\tminHeight: '50%',\n\t\t\t\t\t\twidth: '100%',\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t<HotThoughtSelect\n\t\t\t\t\t\tthoughts={thoughtIDs}\n\t\t\t\t\t\tonSelect={onSelect}\n\t\t\t\t\t\tselected={selected}\n\t\t\t\t\t/>\n\t\t\t\t</SlideFade>\n\t\t\t)}\n\t\t\t{thoughts.length > 0 ? (\n\t\t\t\t<SlideFade\n\t\t\t\t\toffsetY={50}\n\t\t\t\t\ttransition={{\n\t\t\t\t\t\tenter: { delay: 0.4, duration: 0.5 },\n\t\t\t\t\t\texit: { delay: 0.3, duration: 0.5 },\n\t\t\t\t\t}}\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tflexDirection: 'column',\n\t\t\t\t\t\talignItems: 'center',\n\t\t\t\t\t\tdisplay: 'flex',\n\t\t\t\t\t\tminHeight: 'auto',\n\t\t\t\t\t\twidth: '100%',\n\t\t\t\t\t}}\n\t\t\t\t\tin={!isSubmitting}\n\t\t\t\t>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tmb={2}\n\t\t\t\t\t\tminH={10}\n\t\t\t\t\t\tw=\"60%\"\n\t\t\t\t\t\tmt={8}\n\t\t\t\t\t\tisLoading={isSubmitting}\n\t\t\t\t\t\tbg={foregroundColor}\n\t\t\t\t\t\tloadingText={'Submitting'}\n\t\t\t\t\t\tonClick={handleMoodSubmit}\n\t\t\t\t\t>\n\t\t\t\t\t\tSubmit\n\t\t\t\t\t</Button>\n\t\t\t\t</SlideFade>\n\t\t\t) : null}\n\t\t</>\n\t)\n}\n\nexport default ThoughtQuestion\n","import { useToast } from '@chakra-ui/react'\nimport { useEffect, useState } from 'react'\nimport { useLocation, useNavigate } from 'react-router-dom'\nimport {\n\tThoughtRecord,\n\tisThoughtRecord,\n\tisKeyOfThoughtRecord,\n\tQuestionType,\n\tquestion,\n\tthoughtRecordData,\n\tisQuestion,\n\tFormValues,\n} from '../types'\nimport useThoughtRecordApi from './useThoughtRecordApi'\n\ninterface UseThoughtRecordReturn {\n\tlabel: string\n\tonSubmit: (data: FormValues) => void\n\tisSubmitting: boolean\n\tcurrentQuestion: string\n\tisValidQuestion: boolean | null\n\tthoughtRecord: ThoughtRecord | undefined\n}\n\nconst getLastValid = (pathname: QuestionType, thoughtRecord: ThoughtRecord) => {\n\tfor (let path of question) {\n\t\tlet thoughtRecordKey = path.slice(1)\n\t\tif (path === pathname) {\n\t\t\treturn path\n\t\t}\n\t\tif (isKeyOfThoughtRecord(thoughtRecordKey, thoughtRecord)) {\n\t\t\tif (thoughtRecord[thoughtRecordKey] === null) {\n\t\t\t\treturn path\n\t\t\t}\n\t\t}\n\t}\n\treturn pathname\n}\nconst UseThoughtRecord = (): UseThoughtRecordReturn | never => {\n\tconst toast = useToast()\n\tconst navigate = useNavigate()\n\tconst { pathname, state } = useLocation()\n\tconst [thoughtRecord, setThoughtRecord] = useState<ThoughtRecord>()\n\tconst [isValidQuestion, setIsValidQuestion] = useState<boolean | null>(null)\n\tconst {\n\t\tupdateThoughtRecord,\n\t\tgetActiveThoughtRecord,\n\t\tisSubmitting,\n\t\tsaveThoughtRecord,\n\t} = useThoughtRecordApi()\n\n\tuseEffect(() => {\n\t\tif (!isValidQuestion && isQuestion(pathname)) {\n\t\t\tif (thoughtRecord) {\n\t\t\t\tconst lastValid = getLastValid(pathname, thoughtRecord)\n\t\t\t\tif (lastValid !== pathname) {\n\t\t\t\t\tnavigate(lastValid)\n\t\t\t\t} else {\n\t\t\t\t\tsetIsValidQuestion(true)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}, [isValidQuestion, navigate, pathname, thoughtRecord])\n\n\tuseEffect(() => {\n\t\tconst getThoughtRecord = async () => {\n\t\t\tif (!thoughtRecord) {\n\t\t\t\tif (isThoughtRecord(state)) {\n\t\t\t\t\tsetThoughtRecord(state)\n\t\t\t\t} else {\n\t\t\t\t\tsetThoughtRecord(await getActiveThoughtRecord())\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (!thoughtRecord) {\n\t\t\tgetThoughtRecord()\n\t\t}\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, [])\n\n\tconst onSubmit = async (data: FormValues) => {\n\t\tif (isQuestion(pathname)) {\n\t\t\tif (pathname === '/submit') {\n\t\t\t\ttry {\n\t\t\t\t\tawait saveThoughtRecord()\n\t\t\t\t\tnavigate('/thoughtrecords')\n\t\t\t\t} catch (error) {\n\t\t\t\t\tif (error instanceof Error) {\n\t\t\t\t\t\ttoast({\n\t\t\t\t\t\t\tstatus: 'error',\n\t\t\t\t\t\t\tdescription: 'problem submitting',\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst updateKey = pathname.slice(1)\n\t\t\t\tconst activeThoughtRecord: string = isThoughtRecord(thoughtRecord)\n\t\t\t\t\t? thoughtRecord.key\n\t\t\t\t\t: ''\n\t\t\t\tconst NextLinkIndex = question.indexOf(pathname) + 1\n\t\t\t\ttry {\n\t\t\t\t\tconst updatedRecord = await updateThoughtRecord(\n\t\t\t\t\t\tdata,\n\t\t\t\t\t\tactiveThoughtRecord,\n\t\t\t\t\t\tupdateKey,\n\t\t\t\t\t)\n\t\t\t\t\tnavigate(question[NextLinkIndex], { state: { ...updatedRecord } })\n\t\t\t\t} catch {\n\t\t\t\t\ttoast({\n\t\t\t\t\t\tstatus: 'error',\n\t\t\t\t\t\tdescription: 'problem with update',\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tlet label: string = ''\n\tlet currentQuestion: string = ''\n\tif (isQuestion(pathname)) {\n\t\tlabel = thoughtRecordData[pathname].label\n\t\tcurrentQuestion = pathname.slice(1)\n\t}\n\treturn {\n\t\tlabel: label,\n\t\tonSubmit: onSubmit,\n\t\tisSubmitting: isSubmitting,\n\t\tcurrentQuestion: currentQuestion,\n\t\tthoughtRecord: thoughtRecord,\n\t\tisValidQuestion: isValidQuestion,\n\t}\n}\nexport default UseThoughtRecord\n","import { useState } from 'react'\nimport {\n\tthoughtRecordEndPoint,\n\tgetAuthHeader,\n\tuserEndPoint,\n} from '../Utils/api'\nimport useAuth from './useAuth'\nimport { FormValues, ThoughtRecord, isThoughtRecord, User } from '../types'\n/* returns a function that takes in the current path and active thought record \nto update and a piece of state that shows if the data is currently being fetched */\n\ntype FetchThoughtRecord = () => Promise<ThoughtRecord>\n\ninterface useThoughtRecordReturn {\n\tdeleteThoughtRecord: (thoughtRecord: string) => Promise<string>\n\tgetActiveThoughtRecord: FetchThoughtRecord\n\tgetNewThoughtRecord: FetchThoughtRecord\n\tgetAllThoughtRecords: () => Promise<ThoughtRecord[]>\n\tupdateThoughtRecord: (\n\t\tdata: FormValues,\n\t\tactiveThoughtRecord: string,\n\t\tupdateKey: string,\n\t) => Promise<ThoughtRecord>\n\tsaveThoughtRecord: () => Promise<User>\n\teditThoughtRecord: (thoughtRecordId: string) => Promise<ThoughtRecord>\n\tisSubmitting: boolean\n}\n\nconst useThoughtRecordApi = (): useThoughtRecordReturn => {\n\tconst { logout } = useAuth()\n\tconst authHeader = getAuthHeader()\n\tconst [isSubmitting, setIsSubmitting] = useState(false)\n\n\tconst handleFetch = async (endPoint: string, fetchOptions: RequestInit) => {\n\t\tif (isSubmitting) {\n\t\t\treturn\n\t\t}\n\t\tawait setIsSubmitting(true)\n\t\tconst response = await fetch(endPoint, fetchOptions)\n\t\tif (response.ok) {\n\t\t\tconst data = await response.json()\n\t\t\tsetIsSubmitting(false)\n\t\t\treturn data\n\t\t}\n\t\tif (response.status === 401 || 403) {\n\t\t\tlogout()\n\t\t} else throw Error(response.statusText)\n\t}\n\n\tconst getActiveThoughtRecord = async (): Promise<ThoughtRecord> => {\n\t\tconst data = await handleFetch(thoughtRecordEndPoint, authHeader)\n\t\tif (isThoughtRecord(data)) {\n\t\t\treturn data\n\t\t}\n\t\tthrow Error('not a thought record')\n\t}\n\tconst getNewThoughtRecord = async (): Promise<ThoughtRecord> => {\n\t\tconst options = { method: 'POST', ...authHeader }\n\t\tconst thoughtRecord = await handleFetch(thoughtRecordEndPoint, options)\n\n\t\tif (isThoughtRecord(thoughtRecord)) {\n\t\t\treturn thoughtRecord\n\t\t} else {\n\t\t\tthrow Error('response isnt valid')\n\t\t}\n\t}\n\n\tconst getAllThoughtRecords = async (): Promise<ThoughtRecord[]> => {\n\t\tconst options: RequestInit = {\n\t\t\t...authHeader,\n\t\t}\n\t\treturn await handleFetch(`${thoughtRecordEndPoint}/all`, options)\n\t}\n\n\tconst saveThoughtRecord = async (): Promise<User> => {\n\t\tconst saveOptions: RequestInit = {\n\t\t\theaders: {\n\t\t\t\t...authHeader.headers,\n\t\t\t\tAccept: 'application/json',\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t},\n\t\t\tmethod: 'POST',\n\t\t}\n\n\t\treturn await handleFetch(`${userEndPoint}/thoughtrecord`, saveOptions)\n\t}\n\tconst deleteThoughtRecord = async (\n\t\tthoughtRecord: string,\n\t): Promise<string> => {\n\t\tconst deleteOptions: RequestInit = {\n\t\t\t...authHeader,\n\t\t\tmethod: 'DELETE',\n\t\t}\n\t\treturn await handleFetch(\n\t\t\t`${thoughtRecordEndPoint}/${thoughtRecord}`,\n\t\t\tdeleteOptions,\n\t\t)\n\t}\n\n\tconst editThoughtRecord = async (thoughtRecordId: string) => {\n\t\tconst editOptions: RequestInit = {\n\t\t\t...authHeader,\n\t\t\tmethod: 'POST',\n\t\t}\n\t\tconst thoughtRecord = await handleFetch(\n\t\t\t`${thoughtRecordEndPoint}/edit/${thoughtRecordId}`,\n\t\t\teditOptions,\n\t\t)\n\t\tif (isThoughtRecord(thoughtRecord)) {\n\t\t\treturn thoughtRecord\n\t\t}\n\t\tthrow Error('Invalid return')\n\t}\n\tconst updateThoughtRecord = async (\n\t\tdata: FormValues,\n\t\tactiveThoughtRecord: string,\n\t\tupdateKey: string,\n\t): Promise<ThoughtRecord> => {\n\t\tconst updateOptions: RequestInit = {\n\t\t\theaders: {\n\t\t\t\tAccept: 'application/json',\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t...authHeader.headers,\n\t\t\t},\n\t\t\tmethod: 'PATCH',\n\t\t}\n\t\tupdateOptions.body = JSON.stringify({ [updateKey]: data })\n\t\treturn await handleFetch(\n\t\t\t`${thoughtRecordEndPoint}/${activeThoughtRecord}`,\n\t\t\tupdateOptions,\n\t\t)\n\t}\n\treturn {\n\t\tdeleteThoughtRecord,\n\t\tgetAllThoughtRecords,\n\t\tupdateThoughtRecord,\n\t\tgetActiveThoughtRecord,\n\t\tgetNewThoughtRecord,\n\t\tisSubmitting,\n\t\tsaveThoughtRecord,\n\t\teditThoughtRecord,\n\t}\n}\n\nexport default useThoughtRecordApi\n"],"names":["sliderColor","value","MoodEntry","deleteHandler","mood","moodRating","sliderChange","currentQuestion","UseThoughtRecord","useState","isDeleting","setIsDeleting","foregroundColor","UseThemeColors","in","transition","enter","duration","exit","style","flexDirection","alignItems","display","height","width","w","base","lg","my","alignSelf","rounded","mx","bg","pl","minH","pr","justifyContent","ml","spacing","p","textAlign","colorScheme","slice","mr","mb","onChange","hasArrow","zIndex","fontSize","color","placement","isOpen","label","DeleteButton","setTimeout","animateThenDelete","variant","size","icon","onClick","moods","setMoods","mt","map","moodName","filter","isSubmitting","selectOptions","useThoughtRecord","selectedMood","setSelectedMood","offsetY","offsetX","delay","option","actionMeta","options","includes","thoughts","onSelect","selected","minHeight","thought","thoughtData","partialThoughtData","setThoughts","SetSelected","onSubmit","thoughtRecord","doneThoughts","setDoneThoughts","useEffect","thoughtIDs","SelectQuestion","length","isLoading","loadingText","hotThought","LoadingTextField","toast","useToast","navigate","useNavigate","useLocation","pathname","state","setThoughtRecord","isValidQuestion","setIsValidQuestion","useThoughtRecordApi","updateThoughtRecord","getActiveThoughtRecord","saveThoughtRecord","isQuestion","lastValid","question","path","thoughtRecordKey","isKeyOfThoughtRecord","getLastValid","getThoughtRecord","isThoughtRecord","data","Error","status","description","updateKey","activeThoughtRecord","key","NextLinkIndex","updatedRecord","thoughtRecordData","logout","useAuth","authHeader","getAuthHeader","setIsSubmitting","handleFetch","endPoint","fetchOptions","fetch","response","ok","json","statusText","thoughtRecordEndPoint","getNewThoughtRecord","method","getAllThoughtRecords","saveOptions","headers","Accept","userEndPoint","deleteThoughtRecord","deleteOptions","editThoughtRecord","thoughtRecordId","editOptions","updateOptions","body","JSON","stringify"],"sourceRoot":""}