{"version":3,"file":"static/js/982.52af1162.chunk.js","mappings":"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","sources":["Components/EmotionSlider.tsx","Components/MoodEntry.tsx","Components/FeelingSlider.tsx","Hooks/UseThoughtRecord.tsx"],"sourcesContent":["import { Button } from '@chakra-ui/react'\nimport { useState } from 'react'\nimport feelings from '../Data/feelings.json'\nimport UseThoughtRecord from '../Hooks/UseThoughtRecord'\nimport FeelingSlider,{Mood} from './FeelingSlider'\n\n\n\nconst EmotionSlider = () => {\n  const [moods, setMoods] = useState<Mood[]>([])\n  const [label,onSubmit] = UseThoughtRecord({moods})\n\n  \n  return (\n    <>\n      <FeelingSlider \n        moods={moods} \n        setMoods={setMoods} \n        selectOptions={feelings} \n        label={label}\n      / >\n      {moods.length > 0 ? <Button onClick={onSubmit} variant=\"submit\"> Submit </Button> : null}\n    </>\n  )\n}\n\nexport default EmotionSlider\n\n","import { \n  Tooltip,\n  Box, \n  Slider, Text, IconButton, HStack, SliderFilledTrack, SliderThumb, SliderTrack, VStack} from \"@chakra-ui/react\"\nimport {CloseIcon} from '@chakra-ui/icons'\n\n\n\ninterface ButtonProps {\n  deleteHandler: React.MouseEventHandler<HTMLButtonElement>\n}\n\ninterface MoodEntryProps {\n  mood: string,\n  moodRating: number,\n  sliderChange: (value: number) => void,\n  deleteHandler: () => void\n}\n\nconst sliderColor = (value: number):string => {\n  if(value < 25) {\n    return \"green.400\"\n  }\n  if(value < 50) {\n    return \"yellow.300\"\n  }\n  if(value < 75) {\n    return \"red.500\"\n  }\n  return \"red.800\"\n}\nconst MoodEntry: React.FC<MoodEntryProps> =\n  ( {deleteHandler,mood, moodRating, sliderChange}: MoodEntryProps ) => {\n    \n    return (\n      <>\n        <Box w={{base:\"full\", lg:\"50%\"}} alignSelf={\"center\"}>\n          <HStack mx={3} pl={2} my={4} minH={20} bg={\"white\"} justifyContent={\"center\"}>\n            <VStack ml={2} spacing={1} p={1} w={\"100%\"}>\n              <Text w={\"100%\"} textAlign={\"left\"}>\n                {mood} \n              </Text>\n              <Slider colorScheme={\"teal\"} ml={2} mb={2} onChange={(value) => sliderChange(value)} value={moodRating}>\n                <SliderTrack>\n                  <SliderFilledTrack />\n                </SliderTrack>\n                <Tooltip\n                  hasArrow\n                  fontSize={\"sm\"}\n                  bg={sliderColor(moodRating)}\n                  color='white'\n                  placement='right'\n                  isOpen\n                  label={`${moodRating}%`}\n                > \n                  <SliderThumb bg=\"teal.400\"/>\n                </Tooltip>\n              </Slider>\n            </VStack>\n            {<DeleteButton deleteHandler={deleteHandler}/>}\n          </HStack>\n        </Box>\n      </>\n    )\n  }\n\n\nconst DeleteButton : React.FC<ButtonProps> = ({deleteHandler}) => {\n  return (\n    \n    <IconButton \n      aria-label='Delete Mood' \n      variant='ghost'\n      size={\"lg\"}\n      icon={<CloseIcon/>}\n      onClick={deleteHandler}/>\n  )\n}\n\nexport default MoodEntry","import {CreatableSelect, ActionMeta} from 'chakra-react-select'\nimport { Dispatch, SetStateAction } from 'react'\nimport {Button,Box, FormLabel} from '@chakra-ui/react'\nimport {useState } from 'react'\n\nimport MoodEntry from './MoodEntry'\nimport UseThemeColors from '../Hooks/useThemeColors'\n\n\ntype Option = {\n  value: string,\n  label: string\n}\n\nexport type Mood = {\n  mood: string,\n  moodRating: number\n}\n\n\ninterface SelectOption {\n  label: string,\n  value: string\n}\n\ninterface RecordProps {\n  moods: Mood[],\n  setMoods: Dispatch<SetStateAction<Mood[]>>,\n  selectOptions: SelectOption[],\n  label:string,\n}\n\nconst FeelingSlider: React.FC<RecordProps> = ({moods,setMoods,  selectOptions,label}: RecordProps) => {\n  const {backgroundColor, foregroundColor} = UseThemeColors()\n  const [selectedMood, setSelectedMood] = useState<string>(\"\")\n  \n\n  const deleteHandler = (moodName: string) => {\n    setMoods(moods.filter(mood => mood.mood !== moodName))\n  }\n\n  const sliderChange = (moodName:string) => (value: number) => {\n    setMoods(moods => moods.map(mood => {\n      if(mood.mood === moodName) {\n        return {mood: mood.mood, moodRating: value}\n      } else {\n        return mood\n      }\n    }))\n  }\n\n  const handleChange = (option: Option | null, actionMeta: ActionMeta<Option>) => {\n    if(option) {\n      setSelectedMood(option.value)\n    }\n  }\n\n  const onCreate = async(value: string) => { \n    addMood(value)\n  }\n\n  const addMood = (mood: string) => {\n    \n    if(!(moods.map(mood => mood.mood)).includes(mood) && mood) {\n      setMoods([...moods, {mood: selectedMood, moodRating: 0}])\n    }\n  }\n  \n  return (\n    <>\n      \n      <Box p={2} bg={foregroundColor} mt={10} mx={7} >\n        <FormLabel mb={2} fontSize={14}> {label} </FormLabel>\n        <CreatableSelect\n          size='md'\n          onChange={handleChange}\n          options={selectOptions}\n        />\n      </Box>\n      <Button alignSelf={'center'} onClick={() => addMood(selectedMood)} w={\"60%\"} minH={10} mb={4} mt={7}> Add </Button>\n      {moods.map(({mood,moodRating}) => \n        <MoodEntry \n          mood={mood} \n          key={mood}\n          deleteHandler={() => deleteHandler(mood)}\n          sliderChange={sliderChange(mood)} \n          moodRating={moodRating} \n        />\n      )\n      }\n      \n      \n    </>\n  )\n}\n\n\nexport default FeelingSlider","import { useEffect } from \"react\"\nimport { useLocation, useNavigate } from \"react-router-dom\"\nimport { Mood } from \"../Components/FeelingSlider\"\n\n\n\nconst question = [\n  \"/situationquestion\" ,\n  \"/mood\",\n  \"/thoughts\",\n  \"/evidencefor\",\n  \"/evidenceagainst\",\n  \"/alternativethought\",\n  \"/reratemood\",\n  \"/Submit\"\n] as const\n\nconst labels = {\n  \"/situationquestion\": \"What is the Situation?\",\n  \"/mood\": \"Add any emotions you felt and rate them\",\n  \"/thoughts\": \"List any thoughts and rate your Belief\",\n  \"/evidencefor\": \"What is the Evidence for\",\n  \"/evidenceagainst\": \"What is the Evidence Against\",\n  \"/alternativethought\": \"List any alternative thoughts and rate them\",\n  \"/reratemood\": \"rerate your moods\",\n  \"/Submit\": \"something\"\n} \n\nexport interface ThoughtRecordState {\n  moods?: Mood[],\n  hotThought?: string,\n  answer?: string\n\n}\n\nconst UseThoughtRecord= (recordState: ThoughtRecordState): [string,() => void] => {\n  const navigate = useNavigate()\n  const pathName = useLocation().pathname as typeof question[number]\n  console.log(pathName)\n  const label = labels[pathName]\n  console.log(label)\n  \n  useEffect(() => {\n    window.localStorage.setItem(pathName, JSON.stringify(recordState))\n    console.log(pathName,  window.localStorage.getItem(pathName))\n  },[recordState, pathName])\n  \n  const submitGenerator = () => {\n    const NextLinkIndex = question.indexOf(pathName) + 1\n    return () => navigate(question[NextLinkIndex])\n  }\n  \n  \n\n  \n\n  \n  return [label, submitGenerator()]\n}\n\nexport default UseThoughtRecord"],"names":["useState","moods","setMoods","UseThoughtRecord","label","onSubmit","FeelingSlider","selectOptions","feelings","length","onClick","variant","DeleteButton","deleteHandler","size","icon","value","mood","moodRating","sliderChange","w","base","lg","alignSelf","mx","pl","my","minH","bg","justifyContent","ml","spacing","p","textAlign","colorScheme","mb","onChange","hasArrow","fontSize","color","placement","isOpen","UseThemeColors","foregroundColor","backgroundColor","selectedMood","setSelectedMood","addMood","map","includes","mt","option","actionMeta","options","moodName","filter","question","labels","recordState","navigate","useNavigate","pathName","useLocation","pathname","console","log","useEffect","window","localStorage","setItem","JSON","stringify","getItem","NextLinkIndex","indexOf","submitGenerator"],"sourceRoot":""}