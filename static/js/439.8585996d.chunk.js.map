{"version":3,"file":"static/js/439.8585996d.chunk.js","mappings":"yPAmDA,EAlCoD,SAAC,GAAsC,IAArCA,EAAoC,EAApCA,QAASC,EAA2B,EAA3BA,YAAaC,EAAc,EAAdA,SACnEC,GAAmBC,EAAAA,EAAAA,KAAnBD,gBACAE,EAAmCL,EAAnCK,YAAaC,EAAsBN,EAAtBM,aAAcC,EAAQP,EAARO,KAelC,OACE,+BACE,SAAC,KAAD,CACEC,KAAM,KACNC,OAAQ,CAACC,WAAWP,GACpBQ,QAAS,CAACD,WAAWP,GACrBS,QAAS,kBAbO,SAACP,GAEnBJ,EADCI,IAAgBH,EACL,GAEAG,GASKQ,CAAcR,IAC7B,uBAAeA,EAAf,WACAS,GAAIP,EACJQ,GAAIZ,EACJa,MAxBe,SAACX,GACpB,OAAGH,GAAYG,IAAgBH,EACtB,QAEAI,EAoBEW,CAAaZ,Q,mBCnCfa,EACX,CACE,CAACX,KAAMY,EAAAA,IAAqBb,aAAc,WAAYD,YAAY,OAClE,CAACE,KAAMa,EAAAA,IAAoBd,aAAc,YAAaD,YAAa,QACnE,CAACE,KAAMc,EAAAA,IAAef,aAAc,aAAcD,YAAa,WAC/D,CAACE,KAAMe,EAAAA,IAAsBhB,aAAc,aAAcD,YAAa,UAyC1E,EAlCgC,WAC9B,OAAgCkB,EAAAA,EAAAA,UAAiB,IAAjD,eAAOrB,EAAP,KAAiBD,EAAjB,KACMK,EANsB,SAACD,GAAyB,IAAD,EACrD,iBAAOa,EAASM,QAAO,SAAAxB,GAAO,OAAIA,EAAQK,cAAgBA,KAAa,UAAvE,aAAO,EAAoEC,aAKtDmB,CAAsBvB,GAC3C,GAAuDwB,EAAAA,EAAAA,KAAhDC,EAAP,EAAOA,MAAOC,EAAd,EAAcA,aAAcC,EAA5B,EAA4BA,SAE5B,OAFA,EAAsCC,eAMpC,+BACE,UAAC,KAAD,CAAQC,QAAS,OAAQC,OAAQ9B,EAAW,aAAe,OAAQ+B,YAAa3B,EAAe4B,EAAG,EAAGC,OAAQ,OAAQC,UAAW,MAAOC,QAAS,SAAhJ,WACE,UAAC,KAAD,CAASC,SAAU,QAASC,IAAK,OAAjC,cAA2CZ,EAA3C,QACA,SAAC,KAAD,CAAQQ,OAAQ,MAAOK,EAAG,OAAQC,QAAS,EAA3C,SACGvB,EAASwB,KAAI,SAAA1C,GAAO,OACnB,SAAC,EAAD,CAAyCA,QAASA,EAASE,SAAUA,EAAUD,YAAaA,GAAxED,EAAQK,mBAIhC,SAAC,KAAD,CAAQ6B,EAAG,EAAGM,EAAG,OAAQL,OAAQ,OAAQM,QAAS,GAAlD,SACGvC,GAEC,iCACE,UAAC,KAAD,CAASc,MAAOV,EAAhB,eAAiCJ,EAAjC,QACA,SAAC,KAAD,CAAQyC,UAAWf,EAAchB,QAAS,kBAAMiB,EAAS3B,IAAWsC,EAAG,MAAOI,KAAM,OAAQ7B,GAAI,QAAhG,yBAEA,aAnBH,SAAC8B,EAAA,EAAD,M,sGCvBJ,IAAMC,EACX,SAACC,EAAkBjB,GACjB,OAAOiB,KAAYjB,GAEjBkB,EACL,CACE,MACA,UACA,UACA,cACA,OACA,WACA,SACA,gBACA,oBACA,cACA,kBAAmB,sBASTC,EAAkB,SAACC,GAC9B,QAAGA,GACM,gBAAiBA,GAIfC,EAAsB,SAACD,GAClC,IAAIA,EACF,OAAO,EAGT,IADA,IACA,MADaE,OAAOC,KAAKH,GACzB,eAAqB,CAAjB,IAAII,EAAG,KACT,IAAIN,EAAkBO,SAASD,GAC7B,OAAO,EAGX,OAAO,I,4KC/BHP,EAAW,CACf,WACA,qBACA,QACA,YACA,eACA,mBACA,sBACA,iBACA,kBAKIS,EAAoB,CACxB,WAAY,CAAC7B,MAAM,mBAAoB8B,KAAK,WAC5C,qBAAsB,CAAC9B,MAAM,yBAA0B8B,KAAM,QAC7D,QAAS,CAAC9B,MAAM,0CAA2C8B,KAAM,QACjE,YAAa,CAAC9B,MAAM,yCAA0C8B,KAAM,YACpE,eAAe,CAAC9B,MAAO,2BAA4B8B,KAAM,QACzD,mBAAoB,CAAC9B,MAAM,+BAAgC8B,KAAM,QACjE,sBAAsB,CAAC9B,MAAO,GAAI8B,KAAM,QACxC,iBAAkB,CAAC9B,MAAM,uBAAuB8B,KAAK,WACrD,iBAAkB,CAAC9B,MAAM,YAAa8B,KAAK,WAKvCC,EAAa,SAACC,GAClB,OAAOZ,EAASQ,SAASI,IAgE3B,EA7DyB,WACvB,IAAMC,GAAQC,EAAAA,EAAAA,MACRC,GAAWC,EAAAA,EAAAA,MACjB,GAA0BC,EAAAA,EAAAA,MAAnBL,EAAP,EAAOA,SAAUM,EAAjB,EAAiBA,MACjB,GAA0C1C,EAAAA,EAAAA,YAA1C,eAAOO,EAAP,KAAsBoC,EAAtB,KACA,EC1CiC,WACjC,IAAOC,GAAUC,EAAAA,EAAAA,MAAVD,OAEDE,IADQR,EAAAA,EAAAA,OACKS,EAAAA,EAAAA,OACnB,GAAwC/C,EAAAA,EAAAA,WAAS,GAAjD,eAAOK,EAAP,KAAqB2C,EAArB,KAEMC,EAAW,mCAAG,WAAOC,EAAkBC,GAAzB,6EACf9C,EADe,iEAIZ2C,GAAgB,GAJJ,uBAKKI,MAAMF,EAAUC,GALrB,YAKZE,EALY,QAMNC,GANM,kCAOGD,EAASE,OAPZ,eAOVC,EAPU,OAQhBR,GAAgB,GARA,kBASTQ,GATS,QAWfH,EAASI,OACVb,IAZgB,8BAaLc,MAAML,EAASM,YAbV,4CAAH,wDAiBXC,EAAsB,mCAAG,WAAMC,GAAN,uFACVZ,EAAYa,EAAAA,GAAsBhB,GADxB,UACvBU,EADuB,SAE1B9B,EAAAA,EAAAA,IAAgB8B,GAFU,yCAGpBA,GAHoB,aAKvBE,MAAM,wBALiB,2CAAH,sDAOtBK,EAAmB,mCAAG,WAAOF,GAAP,gFACpBG,GADoB,QACTC,OAAQ,QAAWnB,GADV,SAEEG,EAAYa,EAAAA,GAAuBE,GAFrC,UAEpBzD,EAFoB,SAIvBmB,EAAAA,EAAAA,IAAgBnB,GAJO,yCAKjBA,GALiB,aAOlBmD,MAAM,uBAPY,2CAAH,sDAUnBQ,EAAmB,mCAAG,WAC1BV,EACEW,EAA6BN,EAAcO,GAFnB,8EAGpBC,EAA6B,CACjCC,SAAQ,QACN,OAAU,mBACV,eAAgB,oBACbxB,EAAWwB,SAEhBL,OAAQ,UAEIM,KAAOC,KAAKC,WAAL,UAAiBL,EAAYZ,IAXxB,SAYbP,EAAY,GAAD,OAAIa,EAAAA,GAAJ,YAA6BK,GAAuBE,GAZlD,mFAAH,4DAezB,MAAO,CAACH,oBAAAA,EAAqBN,uBAAAA,EAAwBG,oBAAAA,EAAoB1D,aAAAA,GDbLqE,GAA7DR,EAAP,EAAOA,oBAAqBN,EAA5B,EAA4BA,uBAAwBvD,EAApD,EAAoDA,aAC9CwD,GAAQc,EAAAA,EAAAA,MACd,IAAId,EACF,MAAMH,OAGRkB,EAAAA,EAAAA,YAAU,WAER,IAAMC,EAAgB,mCAAG,iFACnBtE,EADmB,sBAElBmB,EAAAA,EAAAA,IAAgBgB,GAFE,gBAGnBC,EAAiBD,GAHE,mCAKnBC,EALmB,SAKIiB,EAAuBC,GAL3B,8EAAH,qDASlBxD,GACFwE,MAEF,CAACjB,EAAwBvD,EAAcqC,EAAOnC,EAAesD,IAE/D,IAAMvD,EAAQ,mCAAG,WAAOkD,GAAP,iFACZrB,EAAWC,GADC,wBAEPgC,EAAYhC,EAAS0C,MAAM,GAC3BX,GAA8BzC,EAAAA,EAAAA,IAAgBnB,GAAiBA,EAAcwB,IAAM,GACnFgD,EAAgBvD,EAASwD,QAAQ5C,GAAY,EAJtC,kBAQiB8B,EAAoBV,EAAMW,EAAqBN,EAAOO,GARvE,OAQLa,EARK,OAUX1C,EAASf,EAASuD,GAAe,CAACrC,OAAM,UAAKuC,KAVlC,kDAYX5C,EAAM,CACJoB,OAAQ,QACRyB,YAAa,wBAdJ,0DAAH,sDAkBV9E,EAAgB,GAChB+E,EAA0B,GAO9B,OANGhD,EAAWC,KAEZhC,EAAQ6B,EAAkBG,GAAUhC,MACpC+E,EAAkB/C,EAAS0C,MAAM,IAG5B,CACL1E,MAAOA,EACPE,SAAUA,EACVD,aAAcA,EACd8E,gBAAiBA,EACjB5E,cAAeA,K,qBExGJ,SAAS6E,EAAgBC,EAAKtD,EAAKuD,GAYhD,OAXIvD,KAAOsD,EACTxD,OAAO0D,eAAeF,EAAKtD,EAAK,CAC9BuD,MAAOA,EACPE,YAAY,EACZC,cAAc,EACdC,UAAU,IAGZL,EAAItD,GAAOuD,EAGND,E,oGCVT,SAASM,EAAQC,EAAQC,GACvB,IAAI/D,EAAOD,OAAOC,KAAK8D,GAEvB,GAAI/D,OAAOiE,sBAAuB,CAChC,IAAIC,EAAUlE,OAAOiE,sBAAsBF,GAC3CC,IAAmBE,EAAUA,EAAQ9F,QAAO,SAAU+F,GACpD,OAAOnE,OAAOoE,yBAAyBL,EAAQI,GAAKR,eACjD1D,EAAKoE,KAAKC,MAAMrE,EAAMiE,GAG7B,OAAOjE,EAGM,SAASsE,EAAeC,GACrC,IAAK,IAAIC,EAAI,EAAGA,EAAIC,UAAUC,OAAQF,IAAK,CACzC,IAAIG,EAAS,MAAQF,UAAUD,GAAKC,UAAUD,GAAK,GACnDA,EAAI,EAAIX,EAAQ9D,OAAO4E,IAAS,GAAIC,SAAQ,SAAU3E,IACpD,OAAesE,EAAQtE,EAAK0E,EAAO1E,OAChCF,OAAO8E,0BAA4B9E,OAAO+E,iBAAiBP,EAAQxE,OAAO8E,0BAA0BF,IAAWd,EAAQ9D,OAAO4E,IAASC,SAAQ,SAAU3E,GAC5JF,OAAO0D,eAAec,EAAQtE,EAAKF,OAAOoE,yBAAyBQ,EAAQ1E,OAI/E,OAAOsE","sources":["Components/EmotionButton.tsx","Components/EmotionPicker.tsx","Components/types.ts","Hooks/UseThoughtRecord.tsx","Hooks/useThoughtRecordApi.tsx","../node_modules/@babel/runtime/helpers/esm/defineProperty.js","../node_modules/@babel/runtime/helpers/esm/objectSpread2.js"],"sourcesContent":["import { IconButton } from \"@chakra-ui/react\"\nimport { Dispatch, SetStateAction } from \"react\"\nimport { IconType } from \"react-icons\"\nimport UseThemeColors from \"../Hooks/useThemeColors\"\n\nexport interface Emotion {\n  icon: IconType,\n  emotionColor: string,\n  emotionName: string\n\n}\n\ninterface EmotionButtonProps {\n  emotion: Emotion\n  setSelected: Dispatch<SetStateAction<string>>,\n  selected: string}\n\nconst EmotionButton: React.FC<EmotionButtonProps> = ({emotion, setSelected, selected}) => {\n  const {backgroundColor} = UseThemeColors()\n  const {emotionName, emotionColor, icon} = emotion\n  const getIconColor = (emotionName: string) => {\n    if(selected && emotionName !== selected) {\n      return \"black\"\n    } else {\n      return emotionColor\n    }\n  }\n  const handleOnClick = (emotionName: string) => {\n    if(emotionName === selected) {\n      setSelected(\"\")\n    } else {\n      setSelected(emotionName)\n    }\n  }\n  return (\n    <>\n      <IconButton \n        size={\"lg\"}\n        _hover={{background:backgroundColor}}\n        _active={{background:backgroundColor}}\n        onClick={() => handleOnClick(emotionName)}\n        aria-label={`${emotionName} button`}  \n        as={icon} \n        bg={backgroundColor}\n        color={getIconColor(emotionName)}\n        \n      />\n    </>\n  )\n}\n\nexport default EmotionButton","import { Button, Center, Heading, HStack, IconButton, VStack } from '@chakra-ui/react'\nimport React, { Dispatch, SetStateAction, useState } from 'react'\nimport {RiEmotionFill, RiEmotionNormalFill, RiEmotionHappyFill, RiEmotionUnhappyFill} from 'react-icons/ri'\nimport UseThemeColors from '../Hooks/useThemeColors'\nimport EmotionButton, { Emotion } from './EmotionButton'\nimport LoadingTextField from './LoadingTextField'\nimport useThoughtRecord from '../Hooks/UseThoughtRecord'\n\n\nexport const emotions: Emotion[] = \n  [\n    {icon: RiEmotionNormalFill, emotionColor: \"blue.700\", emotionName:\"Meh\"},\n    {icon: RiEmotionHappyFill, emotionColor: \"green.300\", emotionName: \"Good\" },\n    {icon: RiEmotionFill, emotionColor: \"yellow.300\", emotionName: \"Awesome\"},\n    {icon: RiEmotionUnhappyFill, emotionColor: \"purple.900\", emotionName: \"Awful\"}\n  ]\n\nconst getEmotionColorByName = (emotionName: string) => {\n  return emotions.filter(emotion => emotion.emotionName === emotionName)[0]?.emotionColor\n}\n\nconst EmotionPicker: React.FC = () => {\n  const [selected, setSelected] = useState<string>(\"\")\n  const emotionColor = getEmotionColorByName(selected)\n  const {label, isSubmitting, onSubmit, thoughtRecord} = useThoughtRecord() \n  \n  if(!thoughtRecord) {\n    return <LoadingTextField/>\n  }\n  return (\n    <>\n      <Center rounded={\"75px\"} border={selected ? \"15px solid\" : \"none\"} borderColor={emotionColor}  p={4} height={\"full\"} minHeight={\"90%\"} flexDir={\"column\"}> \n        <Heading position={\"fixed\"} top={\"25vh\"}> {label} </Heading>\n        <HStack height={\"50%\"} w={\"100%\"} spacing={8}> \n          {emotions.map(emotion => \n            <EmotionButton key={emotion.emotionName} emotion={emotion} selected={selected} setSelected={setSelected} />\n          )}\n        \n        </HStack>\n        <VStack p={2} w={\"full\"} height={\"15vh\"} spacing={12}>\n          {selected\n            ? \n            <>\n              <Heading color={emotionColor}>  {selected} </Heading>\n              <Button isLoading={isSubmitting} onClick={() => onSubmit(selected)} w={\"60%\"} minH={\"60px\"} bg={\"white\"} > Submit </Button>\n            </>\n            : null\n          }\n        </VStack>\n       \n      </Center>\n    </>\n  )\n}\n\nexport default EmotionPicker\n","export type Mood = {\n  mood: string,\n  moodRating: number\n}\nexport const isKeyOfThoughtRecord = \n  (question: string, thoughtRecord: ThoughtRecord): question is keyof ThoughtRecord => {\n    return question in thoughtRecord\n  }\nconst thoughtRecordKeys =\n [\n   \"key\",\n   \"emotion\",\n   \"userKey\",\n   \"timeCreated\",\n   \"mood\",\n   \"thoughts\",\n   \"answer\",\n   \"rerateemotion\",\n   \"situationquestion\",\n   \"evidencefor\",\n   \"evidenceagainst\", \"alternativethought\"\n ]\n\n\nexport interface Thoughts {\n  thoughts: Mood[],\n  hotThought: string\n}\n\nexport const isThoughtRecord = (record: any): record is ThoughtRecord => {\n  if(record) {\n    return \"timeCreated\" in record \n  } \n  return false\n}\nexport const isFullThoughtRecord = (record: any): record is FullThoughtRecord => {\n  if(!record) {\n    return false\n  }\n  const keys = Object.keys(record)\n  for(let key of keys) {\n    if(!thoughtRecordKeys.includes(key)) {\n      return false\n    } \n  }\n  return true\n}\n  \n\n\nexport type FullThoughtRecord = Required<ThoughtRecord>\n\nexport interface ThoughtRecord {\n  userKey: string\n  key: string\n  timeCreated: number,\n  emotion?:string,\n  mood?: Mood[],\n  thoughts?: Thoughts \n  answer?: string,\n  rerateemotion?: string,\n  situationquestion?: string,\n  evidencefor?: string,\n  evidenceagainst?: string\n  alternativethought?: Mood[]\n}  ","import { useToast } from \"@chakra-ui/react\"\nimport { useEffect, useState } from \"react\"\nimport { useLocation, useNavigate } from \"react-router-dom\"\nimport { Mood, Thoughts, ThoughtRecord, isThoughtRecord } from \"../Components/types\"\nimport { getToken } from \"../utils/api\"\nimport {useThoughtRecordApi} from './useThoughtRecordApi'\n\ninterface UseThoughtRecordReturn {\n  label: string,\n  onSubmit: (data: FormValues) => void, \n  isSubmitting: boolean, \n  currentQuestion: string,\n  thoughtRecord: ThoughtRecord | undefined}\n\nconst question = [\n  \"/emotion\",\n  \"/situationquestion\",\n  \"/mood\",\n  \"/thoughts\",\n  \"/evidencefor\",\n  \"/evidenceagainst\",\n  \"/alternativethought\",\n  \"/rerateemotion\",\n  \"/thoughtrecord\"\n] as const\n\nexport type QuestionType = typeof question[number]\n\nconst thoughtRecordData = {\n  \"/emotion\": {label:\"How do you feel?\", type:\"Emotion\"},\n  \"/situationquestion\": {label:\"What is the Situation?\", type: \"Text\"},\n  \"/mood\": {label:\"Add any emotions you felt and rate them\", type: \"Mood\"},\n  \"/thoughts\": {label:\"List any thoughts and rate your Belief\", type: \"Thoughts\"},\n  \"/evidencefor\":{label: \"What is the Evidence for\", type: \"Text\"},\n  \"/evidenceagainst\": {label:\"What is the Evidence Against\", type: \"Text\"},\n  \"/alternativethought\":{label: \"\", type: \"Text\"},\n  \"/rerateemotion\": {label:\"How Do you feel now?\",type:\"Emotion\"},\n  \"/thoughtrecord\": {label:\"something\", type:\"Submit\"}\n} \n\nexport type FormValues = String | Mood[] | Thoughts  \n\nconst isQuestion = (pathname: any): pathname is QuestionType => {\n  return(question.includes(pathname))\n}\n\nconst UseThoughtRecord = (): UseThoughtRecordReturn | never => {\n  const toast = useToast()\n  const navigate = useNavigate()\n  const {pathname, state} = useLocation()\n  const [thoughtRecord, setThoughtRecord] = useState<ThoughtRecord>()\n  const {updateThoughtRecord, getActiveThoughtRecord, isSubmitting} = useThoughtRecordApi()\n  const token = getToken()\n  if(!token) {\n    throw Error\n  } \n \n  useEffect(() => {\n    \n    const getThoughtRecord = async () => {\n      if(!thoughtRecord) {\n        if(isThoughtRecord(state)) {\n          setThoughtRecord(state)\n        } else {\n          setThoughtRecord(await getActiveThoughtRecord(token))\n        }\n      }\n    }\n    if(!isSubmitting) {\n      getThoughtRecord()\n    }\n  },[getActiveThoughtRecord, isSubmitting, state, thoughtRecord, token])\n  \n  const onSubmit = async (data: FormValues) => {\n    if(isQuestion(pathname)) {\n      const updateKey = pathname.slice(1)\n      const activeThoughtRecord: string = isThoughtRecord(thoughtRecord) ? thoughtRecord.key : \"\" \n      const NextLinkIndex = question.indexOf(pathname) + 1\n      \n     \n      try {\n        const updatedRecord = await updateThoughtRecord(data, activeThoughtRecord, token, updateKey)\n        \n        navigate(question[NextLinkIndex],{state: {...updatedRecord}})\n      } catch {\n        toast({\n          status: 'error', \n          description: 'problem with update'\n        })\n      }\n    }}\n  let label: string = \"\" \n  let currentQuestion: string = \"\"\n  if(isQuestion(pathname)) {\n    \n    label = thoughtRecordData[pathname].label\n    currentQuestion = pathname.slice(1)\n  }\n  \n  return {\n    label: label, \n    onSubmit: onSubmit, \n    isSubmitting: isSubmitting,\n    currentQuestion: currentQuestion, \n    thoughtRecord: thoughtRecord\n  }\n}\nexport default UseThoughtRecord","import { useEffect, useState } from \"react\"\nimport {QuestionType, FormValues} from \"./UseThoughtRecord\"\nimport {thoughtRecordEndPoint, getAuthHeader, getUserEndPoint, getToken} from \"../utils/api\"\nimport useAuth, { Token, User } from \"./useAuth\"\nimport {ThoughtRecord, isThoughtRecord} from '../Components/types'\nimport { useToast } from \"@chakra-ui/react\"\n/* returns a function that takes in the current path and active thought record \nto update and a piece of state that shows if the data is currently being fetched */\n\nexport const useThoughtRecordApi = () => {\n  const {logout} = useAuth() \n  const toast = useToast()\n  const authHeader = getAuthHeader()  \n  const [isSubmitting, setIsSubmitting] = useState(false)\n  \n  const handleFetch = async (endPoint: string, fetchOptions: RequestInit) => {\n    if(isSubmitting) {\n      return\n    } \n    await setIsSubmitting(true)\n    const response = await fetch(endPoint, fetchOptions)\n    if(response.ok) {\n      const data = await response.json()\n      setIsSubmitting(false)\n      return data\n    }\n    if(response.status === 401 || 403) {\n      logout()\n    } else throw Error(response.statusText)\n  \n  }\n\n  const getActiveThoughtRecord = async(token:Token): Promise<ThoughtRecord> => {\n    const data = await handleFetch(thoughtRecordEndPoint,authHeader)\n    if(isThoughtRecord(data)) {\n      return data\n    }\n    throw Error(\"not a thought record\") \n  }\n  const getNewThoughtRecord = async (token:Token): Promise<ThoughtRecord> => {\n    const options = {method: \"POST\", ...authHeader}\n    const thoughtRecord = await handleFetch(thoughtRecordEndPoint, options)\n   \n    if(isThoughtRecord(thoughtRecord)) {\n      return thoughtRecord\n    } else {\n      throw Error('response isnt valid')\n    }   \n  }\n  const updateThoughtRecord = async (\n    data: FormValues\n    , activeThoughtRecord: string, token: Token, updateKey: string) => {\n    const updateOptions: RequestInit = {\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        ...authHeader.headers\n      },\n      method: \"PATCH\"\n    }\n    updateOptions.body = JSON.stringify({[updateKey]: data})\n    return await handleFetch(`${thoughtRecordEndPoint}/${activeThoughtRecord}`, updateOptions)\n  \n  }    \n  return {updateThoughtRecord, getActiveThoughtRecord, getNewThoughtRecord,isSubmitting}\n}\n\n\n\n","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import defineProperty from \"./defineProperty.js\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}"],"names":["emotion","setSelected","selected","backgroundColor","UseThemeColors","emotionName","emotionColor","icon","size","_hover","background","_active","onClick","handleOnClick","as","bg","color","getIconColor","emotions","RiEmotionNormalFill","RiEmotionHappyFill","RiEmotionFill","RiEmotionUnhappyFill","useState","filter","getEmotionColorByName","useThoughtRecord","label","isSubmitting","onSubmit","thoughtRecord","rounded","border","borderColor","p","height","minHeight","flexDir","position","top","w","spacing","map","isLoading","minH","LoadingTextField","isKeyOfThoughtRecord","question","thoughtRecordKeys","isThoughtRecord","record","isFullThoughtRecord","Object","keys","key","includes","thoughtRecordData","type","isQuestion","pathname","toast","useToast","navigate","useNavigate","useLocation","state","setThoughtRecord","logout","useAuth","authHeader","getAuthHeader","setIsSubmitting","handleFetch","endPoint","fetchOptions","fetch","response","ok","json","data","status","Error","statusText","getActiveThoughtRecord","token","thoughtRecordEndPoint","getNewThoughtRecord","options","method","updateThoughtRecord","activeThoughtRecord","updateKey","updateOptions","headers","body","JSON","stringify","useThoughtRecordApi","getToken","useEffect","getThoughtRecord","slice","NextLinkIndex","indexOf","updatedRecord","description","currentQuestion","_defineProperty","obj","value","defineProperty","enumerable","configurable","writable","ownKeys","object","enumerableOnly","getOwnPropertySymbols","symbols","sym","getOwnPropertyDescriptor","push","apply","_objectSpread2","target","i","arguments","length","source","forEach","getOwnPropertyDescriptors","defineProperties"],"sourceRoot":""}