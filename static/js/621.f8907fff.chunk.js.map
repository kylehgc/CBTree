{"version":3,"file":"static/js/621.f8907fff.chunk.js","mappings":"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","sources":["Components/FeelingQuestion.tsx","Components/MoodSlider.tsx","Components/SelectQuestion.tsx","Components/types.ts","Hooks/UseThoughtRecord.tsx","Hooks/useThoughtRecordApi.tsx"],"sourcesContent":["import { Button, Fade, Flex, SlideFade, VStack } from '@chakra-ui/react'\nimport { useEffect, useState } from 'react'\nimport feelings from '../Data/feelings.json'\nimport UseThemeColors from '../Hooks/useThemeColors'\nimport UseThoughtRecord from '../Hooks/UseThoughtRecord'\nimport LoadingTextField from './LoadingTextField'\nimport SelectQuestion from './SelectQuestion'\nimport {isKeyOfThoughtRecord, Mood} from './types'\n\ninterface Props {\n  defaultMoods?: Mood[]\n}\nexport const isMood = (value: any): value is Mood[] => {\n  if(Array.isArray(value) && value.length > 0 ) {\n    return \"mood\" in value[0]\n  }\n  return false\n}\nconst FeelingQuestion: React.FC<Props> = () => {\n  const [moods, setMoods] = useState<Mood[]>([])\n  const {foregroundColor} = UseThemeColors()\n  const {label, onSubmit, thoughtRecord, currentQuestion, isSubmitting } = UseThoughtRecord()\n  \n  useEffect (() => {\n    if(currentQuestion === \"reratemoods\") {\n      if(thoughtRecord?.mood) {\n        setMoods(thoughtRecord.mood)\n      }\n    }\n  }, [currentQuestion, setMoods, thoughtRecord])\n  useEffect (() => {\n    if(thoughtRecord) {\n      if(isKeyOfThoughtRecord(currentQuestion, thoughtRecord) && moods.length === 0) {\n        const thoughtRecordMood = thoughtRecord[currentQuestion]\n        if(isMood(thoughtRecordMood)){\n          setMoods(thoughtRecordMood)\n        }\n      }\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentQuestion, thoughtRecord])\n  if(!thoughtRecord) {\n    return <LoadingTextField/>\n  }\n  return (\n    <>\n      <SelectQuestion\n        isSubmitting={isSubmitting}\n        moods={moods} \n        setMoods={setMoods} \n        selectOptions={feelings} \n        label={label}\n      />\n      {moods.length > 0 ? \n        <Button \n          mt={8}\n          mb={2}\n          minH={10}\n          w=\"60%\"\n          isLoading={isSubmitting}\n          bg={foregroundColor}\n          loadingText={\"Submitting\"}\n          onClick={() => onSubmit(moods)} \n        >\n           Submit \n        </Button> \n        : null}\n    </>\n  )\n}\nexport default FeelingQuestion\n\n","import { \n  Tooltip,\n  Box, \n  Slider, Text, IconButton, HStack, SliderFilledTrack, SliderThumb, SliderTrack, VStack, Center, Fade} from \"@chakra-ui/react\"\nimport {CloseIcon} from '@chakra-ui/icons'\nimport { Mood } from \"./types\"\nimport { SetStateAction, useState } from \"react\"\nimport React from 'react' \nimport UseThemeColors from \"../Hooks/useThemeColors\"\nimport UseThoughtRecord from \"../Hooks/UseThoughtRecord\"\ninterface ButtonProps {\n  deleteHandler: React.MouseEventHandler<HTMLButtonElement>\n}\ninterface MoodEntryProps {\n  mood: string,\n  moodRating: number,\n  sliderChange: (value: number) => void,\n  deleteHandler: () => void,\n}\n\nexport const sliderColor = (value: number):string => {\n  if(value < 25) {\n    return \"green.400\"\n  }\n  if(value < 50) {\n    return \"yellow.600\"\n  }\n  if(value < 75) {\n    return \"orange.400\"\n  }\n  return \"red.800\"\n}\ninterface SliderProps {\n  moods: Mood[],\n  setMoods: (value: SetStateAction<Mood[]>) => void\n}\nconst MoodSlider:React.FC<SliderProps> = ({moods, setMoods}) => {\n  const deleteHandler = (moodName: string) => {\n    setMoods(moods.filter(mood => mood.mood !== moodName))\n  }\n  const sliderChange = (moodName:string) => (value: number) => {\n    setMoods(moods => moods.map(mood => {\n      if(mood.mood === moodName) {\n        return {mood: mood.mood, moodRating: value}\n      } else {\n        return mood\n      }\n    }))\n  }\n  return (\n    <Center flexDirection={\"column\"} w={\"100%\"} mt={0} mb={0} >\n      {moods.map(({mood,moodRating}) => \n        <MoodEntry \n          mood={mood} \n          key={mood}\n          deleteHandler={() => deleteHandler(mood)}\n          sliderChange={sliderChange(mood)} \n          moodRating={moodRating} \n        />\n      )\n      }\n    </Center>\n  )\n}\nconst MoodEntry: React.FC<MoodEntryProps> =\n  ( {deleteHandler,mood, moodRating, sliderChange}: MoodEntryProps ) => {\n    const {currentQuestion} = UseThoughtRecord() \n    const [isDeleting, setIsDeleting] = useState(false)\n    const animateThenDelete = (deleteHandler: () => void) => {\n      setIsDeleting(true)\n      setTimeout(deleteHandler, 500)\n    }\n    const {foregroundColor} = UseThemeColors()\n    return (\n      <>\n        <Fade in={!isDeleting} transition={{enter: {duration: .5}, exit: {duration:.5}}}\n          style={{flexDirection: \"column\" , alignItems:\"center\", display:\"flex\", height:\"auto\",width:\"100%\"}} > \n          <Box w={{base:\"full\", lg:\"50%\"}} my={3} alignSelf={\"center\"}>\n            <HStack rounded={\"2xl\"} mx={3} pl={2} minH={20} pr={1} bg={foregroundColor} justifyContent={\"center\"}>\n              <VStack ml={2} spacing={2} p={1} w={\"100%\"}>\n                <Text w={\"100%\"} textAlign={\"left\"}>\n                  {mood} \n                </Text>\n                <Slider colorScheme={sliderColor(moodRating).slice(0,-4)} ml={2} mr={1} mb={2} onChange={(value) => sliderChange(value)} value={moodRating}>\n                  <SliderTrack>\n                    <SliderFilledTrack />\n                  </SliderTrack>\n                  <Tooltip\n                    hasArrow\n                    zIndex={-9999}\n                    fontSize={\"sm\"}\n                    bg={sliderColor(moodRating)}\n                    color='white'\n                    placement='right'\n                    isOpen={!isDeleting}\n                    label={`${moodRating}%`}\n                  > \n                    <SliderThumb bg=\"teal.400\"/>\n                  </Tooltip>\n                </Slider>\n              </VStack>\n              {currentQuestion !== \"reratemoods\" ? \n                <DeleteButton deleteHandler={() => animateThenDelete(deleteHandler)} /> : null}\n             \n            </HStack>\n          </Box>\n        </Fade>\n      </>\n    )\n  }\nconst DeleteButton : React.FC<ButtonProps> = ({deleteHandler}) => {\n  return (\n    <IconButton \n      aria-label='Delete Mood' \n      variant='ghost'\n      size={\"lg\"}\n      icon={<CloseIcon/>}\n      onClick={deleteHandler}/>\n  )\n}\n\nexport default MoodSlider\n","import {CreatableSelect, ActionMeta} from 'chakra-react-select'\nimport { Dispatch, SetStateAction } from 'react'\nimport {Button,Box, FormLabel, Heading, SlideFade, transition} from '@chakra-ui/react'\nimport {useState } from 'react'\nimport { Mood } from './types'\nimport MoodList from './MoodSlider'\nimport UseThemeColors from '../Hooks/useThemeColors'\nimport useThoughtRecord from '../Hooks/UseThoughtRecord'\n\ntype Option = {\n  value: string,\n  label: string\n}\ninterface SelectOption {\n  label: string,\n  value: string\n}\ninterface RecordProps {\n  moods: Mood[],\n  setMoods: Dispatch<SetStateAction<Mood[]>>,\n  selectOptions: SelectOption[],\n  label:string,\n  isSubmitting: boolean\n}\n\nconst SelectQuestion: React.FC<RecordProps> = ({isSubmitting, moods,setMoods, selectOptions,label}: RecordProps) => {\n  const {foregroundColor} = UseThemeColors()\n  const {currentQuestion} = useThoughtRecord()\n  const [selectedMood, setSelectedMood] = useState<string>(\"\")\n\n  const addMood = (mood: string) => {\n    if(!(moods.map(mood => mood.mood)).includes(mood) && mood) {\n      setMoods([...moods, {mood: mood, moodRating: 0}])\n    }\n  }\n  const handleChange = (option: Option | null, actionMeta: ActionMeta<Option>) => {\n    if(option) {\n      setSelectedMood(option.value)\n    }\n  }\n  return (\n    <>\n      {currentQuestion !== \"reratemoods\" ?\n        <SlideFade offsetY={0} offsetX={50} \n          transition={{enter: {delay: 0.2, duration: .5}, exit: {delay: 0.4, duration: .5}}}\n          style={{flexDirection: \"column\" , alignItems:\"center\", display:\"flex\", height:\"auto\",width:\"100%\"}} \n          in={!isSubmitting} > \n          <Box p={2} bg={foregroundColor} w={\"92%\"} mt={6} mb={2} mx={7} >\n            <FormLabel mb={2} fontSize={14}> {label} </FormLabel>\n            <CreatableSelect\n              size='md'\n              onChange={handleChange}\n              options={selectOptions}\n            />\n          </Box>\n          <Button alignSelf={'center'} onClick={() => addMood(selectedMood)} w={\"60%\"} minH={10} my={6}> Add </Button>\n        </SlideFade>\n        : <Heading> {label} </Heading>}\n      \n      <MoodList moods={moods} setMoods={setMoods} />\n     \n    </>\n  )\n}\n\n\nexport default SelectQuestion","export type Mood = {\n  mood: string,\n  moodRating: number\n}\nexport const isKeyOfThoughtRecord = \n  (question: string, thoughtRecord: ThoughtRecord): question is keyof ThoughtRecord => {\n    return question in thoughtRecord\n  }\nconst thoughtRecordKeys =\n [\n   \"key\",\n   \"userKey\",\n   \"timeCreated\",\n   \"mood\",\n   \"thoughts\",\n   \"answer\",\n   \"reratemoods\",\n   \"situationquestion\",\n   \"evidencefor\",\n   \"evidenceagainst\", \"alternativethought\"\n ]\n\n\nexport interface Thoughts {\n  thoughts: Mood[],\n  hotThought: string\n}\n\nexport const isThoughtRecord = (record: any): record is ThoughtRecord => {\n  if(record) {\n    return \"timeCreated\" in record \n  } \n  return false\n}\nexport const isFullThoughtRecord = (record: any): record is FullThoughtRecord => {\n  if(!record) {\n    return false\n  }\n  const keys = Object.keys(record)\n  for(let key of keys) {\n    if(!thoughtRecordKeys.includes(key)) {\n      return false\n    } \n  }\n  return true\n}\n  \n\n\nexport type FullThoughtRecord = Required<ThoughtRecord>\n\nexport interface ThoughtRecord {\n  userKey: string\n  key: string\n  timeCreated: number,\n  mood?: Mood[],\n  thoughts?: Thoughts \n  answer?: string,\n  reratemoods?: Mood[],\n  situationquestion?: string,\n  evidencefor?: string,\n  evidenceagainst?: string\n  alternativethought?: Mood[]\n}  ","import { useToast } from \"@chakra-ui/react\"\nimport { useEffect, useState } from \"react\"\nimport { useLocation, useNavigate } from \"react-router-dom\"\nimport { Mood, Thoughts, ThoughtRecord, isThoughtRecord } from \"../Components/types\"\nimport { getToken } from \"../utils/api\"\nimport {useThoughtRecordApi} from './useThoughtRecordApi'\n\ninterface UseThoughtRecordReturn {\n  label: string,\n  onSubmit: (data: FormValues) => void, \n  isSubmitting: boolean, \n  currentQuestion: string,\n  thoughtRecord: ThoughtRecord | undefined}\n\nconst question = [\n  \"/situationquestion\",\n  \"/mood\",\n  \"/thoughts\",\n  \"/evidencefor\",\n  \"/evidenceagainst\",\n  \"/alternativethought\",\n  \"/reratemoods\",\n  \"/thoughtrecord\"\n] as const\n\nexport type QuestionType = typeof question[number]\n\nconst thoughtRecordData = {\n  \"/situationquestion\": {label:\"What is the Situation?\", type: \"Text\"},\n  \"/mood\": {label:\"Add any emotions you felt and rate them\", type: \"Mood\"},\n  \"/thoughts\": {label:\"List any thoughts and rate your Belief\", type: \"Thoughts\"},\n  \"/evidencefor\":{label: \"What is the Evidence for\", type: \"Text\"},\n  \"/evidenceagainst\": {label:\"What is the Evidence Against\", type: \"Text\"},\n  \"/alternativethought\":{label: \"\", type: \"Text\"},\n  \"/reratemoods\": {label:\"Rerate Your Moods\",type:\"Mood\"},\n  \"/thoughtrecord\": {label:\"something\", type:\"Submit\"}\n} \n\nexport type FormValues = String | Mood[] | Thoughts  \n\nconst isQuestion = (pathname: any): pathname is QuestionType => {\n  return(question.includes(pathname))\n}\n\nconst UseThoughtRecord = (): UseThoughtRecordReturn | never => {\n  const toast = useToast()\n  const navigate = useNavigate()\n  const {pathname, state} = useLocation()\n  const location = useLocation()\n  console.log(location)\n  const [thoughtRecord, setThoughtRecord] = useState<ThoughtRecord>()\n  const {updateThoughtRecord, getActiveThoughtRecord, isSubmitting} = useThoughtRecordApi()\n  const token = getToken()\n  if(!token) {\n    throw Error\n  } \n  // if(!isQuestion(pathname)) {\n  //   throw Error\n  // }\n  console.log(state)\n  useEffect(() => {\n    \n    const getThoughtRecord = async () => {\n      if(!thoughtRecord) {\n        if(isThoughtRecord(state)) {\n          setThoughtRecord(state)\n        } else {\n          setThoughtRecord(await getActiveThoughtRecord(token))\n        }\n      }\n    }\n    if(!isSubmitting) {\n      getThoughtRecord()\n    }\n  },[getActiveThoughtRecord, isSubmitting, state, thoughtRecord, token])\n  \n  const onSubmit = async (data: FormValues) => {\n    if(isQuestion(pathname)) {\n      const updateKey = pathname.slice(1)\n      const activeThoughtRecord: string = isThoughtRecord(thoughtRecord) ? thoughtRecord.key : \"\" \n      const NextLinkIndex = question.indexOf(pathname) + 1\n    \n     \n      try {\n        const updatedRecord = await updateThoughtRecord(data, activeThoughtRecord, token, updateKey)\n        \n        navigate(question[NextLinkIndex],{state: {...updatedRecord}})\n      } catch {\n        toast({\n          status: 'error', \n          description: 'problem with update'\n        })\n      }\n    }}\n  let label: string = \"\" \n  let currentQuestion: string = \"\"\n  if(isQuestion(pathname)) {\n    \n    label = thoughtRecordData[pathname].label\n    currentQuestion = pathname.slice(1)\n  }\n  \n  return {\n    label: label, \n    onSubmit: onSubmit, \n    isSubmitting: isSubmitting,\n    currentQuestion: currentQuestion, \n    thoughtRecord: thoughtRecord\n  }\n}\nexport default UseThoughtRecord","import { useEffect, useState } from \"react\"\nimport {QuestionType, FormValues} from \"./UseThoughtRecord\"\nimport {thoughtRecordEndPoint, getAuthHeader, getUserEndPoint, getToken} from \"../utils/api\"\nimport useAuth, { Token, User } from \"./useAuth\"\nimport {ThoughtRecord, isThoughtRecord} from '../Components/types'\nimport { useToast } from \"@chakra-ui/react\"\n/* returns a function that takes in the current path and active thought record \nto update and a piece of state that shows if the data is currently being fetched */\n\nexport const useThoughtRecordApi = () => {\n  const {logout} = useAuth() \n  const toast = useToast()\n  const authHeader = getAuthHeader()  \n  const [isSubmitting, setIsSubmitting] = useState(false)\n  \n  const handleFetch = async (endPoint: string, fetchOptions: RequestInit) => {\n    if(isSubmitting) {\n      return\n    } \n    setIsSubmitting(true)\n    const response = await fetch(endPoint, fetchOptions)\n    if(response.ok) {\n      const data = await response.json()\n      setIsSubmitting(false)\n      return data\n    }\n    if(response.status === 401 || 403) {\n      logout()\n    } else throw Error(response.statusText)\n  \n  }\n\n  const getActiveThoughtRecord = async(token:Token): Promise<ThoughtRecord> => {\n    const data = await handleFetch(thoughtRecordEndPoint,authHeader)\n    if(isThoughtRecord(data)) {\n      return data\n    }\n    throw Error(\"not a thought record\") \n  }\n  const getNewThoughtRecord = async (token:Token): Promise<ThoughtRecord> => {\n    const options = {method: \"POST\", ...authHeader}\n    const thoughtRecord = await handleFetch(thoughtRecordEndPoint, options)\n   \n    if(isThoughtRecord(thoughtRecord)) {\n      return thoughtRecord\n    } else {\n      throw Error('response isnt valid')\n    }   \n  }\n  const updateThoughtRecord = async (\n    data: FormValues\n    , activeThoughtRecord: string, token: Token, updateKey: string) => {\n    const updateOptions: RequestInit = {\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        ...authHeader.headers\n      },\n      method: \"PATCH\"\n    }\n    updateOptions.body = JSON.stringify({[updateKey]: data})\n    const response = await fetch(`${thoughtRecordEndPoint}/${activeThoughtRecord}`, updateOptions)\n    if(response.ok) {\n      toast({\n        status: \"success\",\n        description: \"Question Submitted\",\n        duration: 2000\n      })\n      return await response.json()\n    }\n  }    \n  return {updateThoughtRecord, getActiveThoughtRecord, getNewThoughtRecord,isSubmitting}\n}\n\n\n\n"],"names":["isMood","value","Array","isArray","length","useState","moods","setMoods","foregroundColor","UseThemeColors","UseThoughtRecord","label","onSubmit","thoughtRecord","currentQuestion","isSubmitting","useEffect","mood","isKeyOfThoughtRecord","thoughtRecordMood","SelectQuestion","selectOptions","feelings","mt","mb","minH","w","isLoading","bg","loadingText","onClick","LoadingTextField","sliderColor","MoodEntry","deleteHandler","moodRating","sliderChange","isDeleting","setIsDeleting","in","transition","enter","duration","exit","style","flexDirection","alignItems","display","height","width","base","lg","my","alignSelf","rounded","mx","pl","pr","justifyContent","ml","spacing","p","textAlign","colorScheme","slice","mr","onChange","hasArrow","zIndex","fontSize","color","placement","isOpen","DeleteButton","setTimeout","animateThenDelete","variant","size","icon","map","moodName","filter","useThoughtRecord","selectedMood","setSelectedMood","offsetY","offsetX","delay","option","actionMeta","options","includes","question","thoughtRecordKeys","isThoughtRecord","record","isFullThoughtRecord","Object","keys","key","thoughtRecordData","type","isQuestion","pathname","toast","useToast","navigate","useNavigate","useLocation","state","location","console","log","setThoughtRecord","logout","useAuth","authHeader","getAuthHeader","setIsSubmitting","handleFetch","endPoint","fetchOptions","fetch","response","ok","json","data","status","Error","statusText","getActiveThoughtRecord","token","thoughtRecordEndPoint","getNewThoughtRecord","method","updateThoughtRecord","activeThoughtRecord","updateKey","updateOptions","headers","body","JSON","stringify","description","useThoughtRecordApi","getToken","getThoughtRecord","NextLinkIndex","indexOf","updatedRecord"],"sourceRoot":""}