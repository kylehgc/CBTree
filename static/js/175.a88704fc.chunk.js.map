{"version":3,"file":"static/js/175.a88704fc.chunk.js","mappings":"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","sources":["Components/ThoughtRecordQuestions/EmotionButton.tsx","Components/ThoughtRecordQuestions/EmotionPicker.tsx","Hooks/UseThoughtRecord.tsx","Hooks/useThoughtRecordApi.tsx"],"sourcesContent":["import { useBreakpointValue, useColorModeValue } from '@chakra-ui/react'\nimport { IconDefinition } from '@fortawesome/free-solid-svg-icons'\nimport { Dispatch, SetStateAction } from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { emotions } from './EmotionPicker'\n\nexport interface Emotion {\n\ticon: IconDefinition\n\temotionColor: string\n\temotionName: string\n}\n\ntype ButtonSizes = '3x' | '5x'\n\ninterface EmotionButtonProps {\n\temotionName: string\n\tsetSelected: Dispatch<SetStateAction<string>>\n\tselected: string\n}\n\nconst EmotionButton: React.FC<EmotionButtonProps> = ({\n\temotionName,\n\tsetSelected,\n\tselected,\n}) => {\n\tconst emotion = emotions.filter(\n\t\t(emotion) => emotionName === emotion.emotionName,\n\t)[0]\n\tconst { emotionColor, icon } = emotion\n\tconst iconColor = useColorModeValue('black', 'white')\n\tconst buttonSize = useBreakpointValue<string>({\n\t\tbase: '3x',\n\t\tmd: '5x',\n\t\tlg: '9x',\n\t}) as ButtonSizes\n\n\tconst getIconColor = (emotionName: string) => {\n\t\tif (selected && emotionName !== selected) {\n\t\t\treturn iconColor\n\t\t} else {\n\t\t\treturn emotionColor\n\t\t}\n\t}\n\n\tconst handleOnClick = (emotionName: string) => {\n\t\tif (emotionName === selected) {\n\t\t\tsetSelected('')\n\t\t} else {\n\t\t\tsetSelected(emotionName)\n\t\t}\n\t}\n\tconst displayColor = getIconColor(emotionName)\n\n\treturn (\n\t\t<>\n\t\t\t<FontAwesomeIcon\n\t\t\t\tsize={buttonSize}\n\t\t\t\tonClick={() => handleOnClick(emotionName)}\n\t\t\t\taria-label={`${emotionName} button`}\n\t\t\t\tcolor={displayColor}\n\t\t\t\ticon={icon}\n\t\t\t/>\n\t\t</>\n\t)\n}\n\nexport default EmotionButton\n","import {\n\tButton,\n\tFlex,\n\tCenter,\n\tHeading,\n\tHStack,\n\tVStack,\n\tScaleFade,\n} from '@chakra-ui/react'\nimport React, { useEffect, useState } from 'react'\nimport EmotionButton, { Emotion } from './EmotionButton'\nimport LoadingTextField from '../Loading/LoadingTextField'\nimport useThoughtRecord from '../../Hooks/UseThoughtRecord'\nimport {\n\tfaFaceMeh,\n\tfaFaceFrownOpen,\n\tfaFaceGrin,\n\tfaFaceSmile,\n} from '@fortawesome/free-solid-svg-icons'\nimport { isKeyOfThoughtRecord } from '../../types'\n\nexport const emotions: Emotion[] = [\n\t{ icon: faFaceFrownOpen, emotionColor: '#322659', emotionName: 'Awful' },\n\t{ icon: faFaceMeh, emotionColor: '#2C5282', emotionName: 'Meh' },\n\t{ icon: faFaceSmile, emotionColor: '#68D391', emotionName: 'Good' },\n\t{ icon: faFaceGrin, emotionColor: '#F6E05E', emotionName: 'Awesome' },\n]\n\nconst getEmotionColorByName = (emotionName: string) => {\n\treturn emotions.filter((emotion) => emotion.emotionName === emotionName)[0]\n\t\t?.emotionColor\n}\n\nconst EmotionPicker: React.FC = () => {\n\tconst [selected, setSelected] = useState<string>('')\n\tconst emotionColor = getEmotionColorByName(selected)\n\tconst { label, isSubmitting, onSubmit, currentQuestion, thoughtRecord } =\n\t\tuseThoughtRecord()\n\n\tuseEffect(() => {\n\t\tif (thoughtRecord) {\n\t\t\tif (isKeyOfThoughtRecord(currentQuestion, thoughtRecord)) {\n\t\t\t\tconst value = thoughtRecord[currentQuestion]\n\t\t\t\tif (typeof value === 'string') {\n\t\t\t\t\tsetSelected(value)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}, [currentQuestion, thoughtRecord])\n\n\tif (!thoughtRecord) {\n\t\treturn <LoadingTextField />\n\t}\n\treturn (\n\t\t<>\n\t\t\t<ScaleFade in delay={{ enter: 0.3 }}>\n\t\t\t\t<Flex p={2} minH={'80vh'}>\n\t\t\t\t\t<Center\n\t\t\t\t\t\tmt={4}\n\t\t\t\t\t\trounded={'75px'}\n\t\t\t\t\t\toutline={selected ? '15px solid' : 'none'}\n\t\t\t\t\t\tborderColor={emotionColor}\n\t\t\t\t\t\tmx={-20}\n\t\t\t\t\t\tw={{ base: 'auto', sm: '90vw', md: '100vw' }}\n\t\t\t\t\t\tp={2}\n\t\t\t\t\t\tminHeight={'70vh'}\n\t\t\t\t\t\tflexDir={'column'}\n\t\t\t\t\t>\n\t\t\t\t\t\t<Heading>{label}</Heading>\n\t\t\t\t\t\t<HStack\n\t\t\t\t\t\t\theight={'50%'}\n\t\t\t\t\t\t\tmx={1}\n\t\t\t\t\t\t\tp={2}\n\t\t\t\t\t\t\tw={{ base: 'auto', lg: '80%' }}\n\t\t\t\t\t\t\tspacing={{ base: '9', md: 'auto' }}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{emotions.map(({ emotionName }) => (\n\t\t\t\t\t\t\t\t<EmotionButton\n\t\t\t\t\t\t\t\t\tkey={emotionName}\n\t\t\t\t\t\t\t\t\temotionName={emotionName}\n\t\t\t\t\t\t\t\t\tselected={selected}\n\t\t\t\t\t\t\t\t\tsetSelected={setSelected}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</HStack>\n\t\t\t\t\t\t<VStack p={2} w={'full'} height={'10vh'} spacing={6}>\n\t\t\t\t\t\t\t{selected ? (\n\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t<Heading color={emotionColor}> {selected} </Heading>\n\t\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t\tm={2}\n\t\t\t\t\t\t\t\t\t\tvariant={'submit'}\n\t\t\t\t\t\t\t\t\t\tisLoading={isSubmitting}\n\t\t\t\t\t\t\t\t\t\tonClick={() => onSubmit(selected)}\n\t\t\t\t\t\t\t\t\t\tw={'60%'}\n\t\t\t\t\t\t\t\t\t\tminH={'40px'}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\tSubmit\n\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t) : null}\n\t\t\t\t\t\t</VStack>\n\t\t\t\t\t</Center>\n\t\t\t\t</Flex>\n\t\t\t</ScaleFade>\n\t\t</>\n\t)\n}\n\nexport default EmotionPicker\n","import { useToast } from '@chakra-ui/react'\nimport { useEffect, useState } from 'react'\nimport { useLocation, useNavigate } from 'react-router-dom'\nimport {\n\tThoughtRecord,\n\tisThoughtRecord,\n\tisKeyOfThoughtRecord,\n\tQuestionType,\n\tquestion,\n\tthoughtRecordData,\n\tisQuestion,\n\tFormValues,\n} from '../types'\nimport useThoughtRecordApi from './useThoughtRecordApi'\n\ninterface UseThoughtRecordReturn {\n\tlabel: string\n\tonSubmit: (data: FormValues) => void\n\tisSubmitting: boolean\n\tcurrentQuestion: string\n\tisValidQuestion: boolean | null\n\tthoughtRecord: ThoughtRecord | undefined\n}\n\nconst getLastValid = (pathname: QuestionType, thoughtRecord: ThoughtRecord) => {\n\tfor (let path of question) {\n\t\tlet thoughtRecordKey = path.slice(1)\n\t\tif (path === pathname) {\n\t\t\treturn path\n\t\t}\n\t\tif (isKeyOfThoughtRecord(thoughtRecordKey, thoughtRecord)) {\n\t\t\tif (thoughtRecord[thoughtRecordKey] === null) {\n\t\t\t\treturn path\n\t\t\t}\n\t\t}\n\t}\n\treturn pathname\n}\nconst UseThoughtRecord = (): UseThoughtRecordReturn | never => {\n\tconst toast = useToast()\n\tconst navigate = useNavigate()\n\tconst { pathname, state } = useLocation()\n\tconst [thoughtRecord, setThoughtRecord] = useState<ThoughtRecord>()\n\tconst [isValidQuestion, setIsValidQuestion] = useState<boolean | null>(null)\n\tconst {\n\t\tupdateThoughtRecord,\n\t\tgetActiveThoughtRecord,\n\t\tisSubmitting,\n\t\tsaveThoughtRecord,\n\t} = useThoughtRecordApi()\n\n\tuseEffect(() => {\n\t\tif (!isValidQuestion && isQuestion(pathname)) {\n\t\t\tif (thoughtRecord) {\n\t\t\t\tconst lastValid = getLastValid(pathname, thoughtRecord)\n\t\t\t\tif (lastValid !== pathname) {\n\t\t\t\t\tnavigate(lastValid)\n\t\t\t\t} else {\n\t\t\t\t\tsetIsValidQuestion(true)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}, [isValidQuestion, navigate, pathname, thoughtRecord])\n\n\tuseEffect(() => {\n\t\tconst getThoughtRecord = async () => {\n\t\t\tif (!thoughtRecord) {\n\t\t\t\tif (isThoughtRecord(state)) {\n\t\t\t\t\tsetThoughtRecord(state)\n\t\t\t\t} else {\n\t\t\t\t\tsetThoughtRecord(await getActiveThoughtRecord())\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (!thoughtRecord) {\n\t\t\tgetThoughtRecord()\n\t\t}\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, [])\n\n\tconst onSubmit = async (data: FormValues) => {\n\t\tif (isQuestion(pathname)) {\n\t\t\tif (pathname === '/submit') {\n\t\t\t\ttry {\n\t\t\t\t\tawait saveThoughtRecord()\n\t\t\t\t\tnavigate('/thoughtrecords')\n\t\t\t\t} catch (error) {\n\t\t\t\t\tif (error instanceof Error) {\n\t\t\t\t\t\ttoast({\n\t\t\t\t\t\t\tstatus: 'error',\n\t\t\t\t\t\t\tdescription: 'problem submitting',\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst updateKey = pathname.slice(1)\n\t\t\t\tconst activeThoughtRecord: string = isThoughtRecord(thoughtRecord)\n\t\t\t\t\t? thoughtRecord.key\n\t\t\t\t\t: ''\n\t\t\t\tconst NextLinkIndex = question.indexOf(pathname) + 1\n\t\t\t\ttry {\n\t\t\t\t\tconst updatedRecord = await updateThoughtRecord(\n\t\t\t\t\t\tdata,\n\t\t\t\t\t\tactiveThoughtRecord,\n\t\t\t\t\t\tupdateKey,\n\t\t\t\t\t)\n\t\t\t\t\tnavigate(question[NextLinkIndex], { state: { ...updatedRecord } })\n\t\t\t\t} catch {\n\t\t\t\t\ttoast({\n\t\t\t\t\t\tstatus: 'error',\n\t\t\t\t\t\tdescription: 'problem with update',\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tlet label: string = ''\n\tlet currentQuestion: string = ''\n\tif (isQuestion(pathname)) {\n\t\tlabel = thoughtRecordData[pathname].label\n\t\tcurrentQuestion = pathname.slice(1)\n\t}\n\treturn {\n\t\tlabel: label,\n\t\tonSubmit: onSubmit,\n\t\tisSubmitting: isSubmitting,\n\t\tcurrentQuestion: currentQuestion,\n\t\tthoughtRecord: thoughtRecord,\n\t\tisValidQuestion: isValidQuestion,\n\t}\n}\nexport default UseThoughtRecord\n","import { useState } from 'react'\nimport {\n\tthoughtRecordEndPoint,\n\tgetAuthHeader,\n\tuserEndPoint,\n} from '../Utils/api'\nimport useAuth from './useAuth'\nimport { FormValues, ThoughtRecord, isThoughtRecord, User } from '../types'\n/* returns a function that takes in the current path and active thought record \nto update and a piece of state that shows if the data is currently being fetched */\n\ntype FetchThoughtRecord = () => Promise<ThoughtRecord>\n\ninterface useThoughtRecordReturn {\n\tdeleteThoughtRecord: (thoughtRecord: string) => Promise<string>\n\tgetActiveThoughtRecord: FetchThoughtRecord\n\tgetNewThoughtRecord: FetchThoughtRecord\n\tgetAllThoughtRecords: () => Promise<ThoughtRecord[]>\n\tupdateThoughtRecord: (\n\t\tdata: FormValues,\n\t\tactiveThoughtRecord: string,\n\t\tupdateKey: string,\n\t) => Promise<ThoughtRecord>\n\tsaveThoughtRecord: () => Promise<User>\n\teditThoughtRecord: (thoughtRecordId: string) => Promise<ThoughtRecord>\n\tisSubmitting: boolean\n}\n\nconst useThoughtRecordApi = (): useThoughtRecordReturn => {\n\tconst { logout } = useAuth()\n\tconst authHeader = getAuthHeader()\n\tconst [isSubmitting, setIsSubmitting] = useState(false)\n\n\tconst handleFetch = async (endPoint: string, fetchOptions: RequestInit) => {\n\t\tif (isSubmitting) {\n\t\t\treturn\n\t\t}\n\t\tawait setIsSubmitting(true)\n\t\tconst response = await fetch(endPoint, fetchOptions)\n\t\tif (response.ok) {\n\t\t\tconst data = await response.json()\n\t\t\tsetIsSubmitting(false)\n\t\t\treturn data\n\t\t}\n\t\tif (response.status === 401 || 403) {\n\t\t\tlogout()\n\t\t} else throw Error(response.statusText)\n\t}\n\n\tconst getActiveThoughtRecord = async (): Promise<ThoughtRecord> => {\n\t\tconst data = await handleFetch(thoughtRecordEndPoint, authHeader)\n\t\tif (isThoughtRecord(data)) {\n\t\t\treturn data\n\t\t}\n\t\tthrow Error('not a thought record')\n\t}\n\tconst getNewThoughtRecord = async (): Promise<ThoughtRecord> => {\n\t\tconst options = { method: 'POST', ...authHeader }\n\t\tconst thoughtRecord = await handleFetch(thoughtRecordEndPoint, options)\n\n\t\tif (isThoughtRecord(thoughtRecord)) {\n\t\t\treturn thoughtRecord\n\t\t} else {\n\t\t\tthrow Error('response isnt valid')\n\t\t}\n\t}\n\n\tconst getAllThoughtRecords = async (): Promise<ThoughtRecord[]> => {\n\t\tconst options: RequestInit = {\n\t\t\t...authHeader,\n\t\t}\n\t\treturn await handleFetch(`${thoughtRecordEndPoint}/all`, options)\n\t}\n\n\tconst saveThoughtRecord = async (): Promise<User> => {\n\t\tconst saveOptions: RequestInit = {\n\t\t\theaders: {\n\t\t\t\t...authHeader.headers,\n\t\t\t\tAccept: 'application/json',\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t},\n\t\t\tmethod: 'POST',\n\t\t}\n\n\t\treturn await handleFetch(`${userEndPoint}/thoughtrecord`, saveOptions)\n\t}\n\tconst deleteThoughtRecord = async (\n\t\tthoughtRecord: string,\n\t): Promise<string> => {\n\t\tconst deleteOptions: RequestInit = {\n\t\t\t...authHeader,\n\t\t\tmethod: 'DELETE',\n\t\t}\n\t\treturn await handleFetch(\n\t\t\t`${thoughtRecordEndPoint}/${thoughtRecord}`,\n\t\t\tdeleteOptions,\n\t\t)\n\t}\n\n\tconst editThoughtRecord = async (thoughtRecordId: string) => {\n\t\tconst editOptions: RequestInit = {\n\t\t\t...authHeader,\n\t\t\tmethod: 'POST',\n\t\t}\n\t\tconst thoughtRecord = await handleFetch(\n\t\t\t`${thoughtRecordEndPoint}/edit/${thoughtRecordId}`,\n\t\t\teditOptions,\n\t\t)\n\t\tif (isThoughtRecord(thoughtRecord)) {\n\t\t\treturn thoughtRecord\n\t\t}\n\t\tthrow Error('Invalid return')\n\t}\n\tconst updateThoughtRecord = async (\n\t\tdata: FormValues,\n\t\tactiveThoughtRecord: string,\n\t\tupdateKey: string,\n\t): Promise<ThoughtRecord> => {\n\t\tconst updateOptions: RequestInit = {\n\t\t\theaders: {\n\t\t\t\tAccept: 'application/json',\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t...authHeader.headers,\n\t\t\t},\n\t\t\tmethod: 'PATCH',\n\t\t}\n\t\tupdateOptions.body = JSON.stringify({ [updateKey]: data })\n\t\treturn await handleFetch(\n\t\t\t`${thoughtRecordEndPoint}/${activeThoughtRecord}`,\n\t\t\tupdateOptions,\n\t\t)\n\t}\n\treturn {\n\t\tdeleteThoughtRecord,\n\t\tgetAllThoughtRecords,\n\t\tupdateThoughtRecord,\n\t\tgetActiveThoughtRecord,\n\t\tgetNewThoughtRecord,\n\t\tisSubmitting,\n\t\tsaveThoughtRecord,\n\t\teditThoughtRecord,\n\t}\n}\n\nexport default useThoughtRecordApi\n"],"names":["emotionName","setSelected","selected","emotion","emotions","filter","emotionColor","icon","iconColor","useColorModeValue","buttonSize","useBreakpointValue","base","md","lg","displayColor","getIconColor","size","onClick","handleOnClick","color","faFaceFrownOpen","faFaceMeh","faFaceSmile","faFaceGrin","useState","getEmotionColorByName","useThoughtRecord","label","isSubmitting","onSubmit","currentQuestion","thoughtRecord","useEffect","isKeyOfThoughtRecord","value","in","delay","enter","p","minH","mt","rounded","outline","borderColor","mx","w","sm","minHeight","flexDir","height","spacing","map","m","variant","isLoading","LoadingTextField","toast","useToast","navigate","useNavigate","useLocation","pathname","state","setThoughtRecord","isValidQuestion","setIsValidQuestion","useThoughtRecordApi","updateThoughtRecord","getActiveThoughtRecord","saveThoughtRecord","isQuestion","lastValid","question","path","thoughtRecordKey","slice","getLastValid","getThoughtRecord","isThoughtRecord","data","Error","status","description","updateKey","activeThoughtRecord","key","NextLinkIndex","updatedRecord","thoughtRecordData","logout","useAuth","authHeader","getAuthHeader","setIsSubmitting","handleFetch","endPoint","fetchOptions","fetch","response","ok","json","statusText","thoughtRecordEndPoint","getNewThoughtRecord","options","method","getAllThoughtRecords","saveOptions","headers","Accept","userEndPoint","deleteThoughtRecord","deleteOptions","editThoughtRecord","thoughtRecordId","editOptions","updateOptions","body","JSON","stringify"],"sourceRoot":""}