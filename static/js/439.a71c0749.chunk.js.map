{"version":3,"file":"static/js/439.a71c0749.chunk.js","mappings":"kQAgEA,EA5CoD,SAAC,GAI9C,IAHNA,EAGK,EAHLA,YACAC,EAEK,EAFLA,YACAC,EACK,EADLA,SAEMC,EAAUC,EAASC,QACxB,SAACF,GAAD,OAAaH,IAAgBG,EAAQH,eACpC,GACMM,EAAuBH,EAAvBG,aAAcC,EAASJ,EAATI,KAChBC,GAAYC,EAAAA,EAAAA,IAAkB,QAAS,SACvCC,GAAaC,EAAAA,EAAAA,IAA2B,CAC7CC,KAAM,KACNC,GAAI,OAkBCC,EAfe,SAACd,GACrB,OAAIE,GAAYF,IAAgBE,EACxBM,EAEAF,EAWYS,CAAaf,GAClC,OACC,+BACC,SAAC,IAAD,CACCgB,KAAMN,EACNO,QAAS,kBAZU,SAACjB,GAErBC,EADGD,IAAgBE,EACP,GAEAF,GAQIkB,CAAclB,IAC7B,uBAAeA,EAAf,WACAmB,MAAOL,EACPP,KAAMA,O,6BC9CGH,EAAsB,CAClC,CAAEG,KAAMa,EAAAA,IAAiBd,aAAc,UAAWN,YAAa,SAC/D,CAAEO,KAAMc,EAAAA,IAAWf,aAAc,UAAWN,YAAa,OACzD,CAAEO,KAAMe,EAAAA,IAAahB,aAAc,UAAWN,YAAa,QAC3D,CAAEO,KAAMgB,EAAAA,IAAYjB,aAAc,UAAWN,YAAa,YAsE3D,EA9DgC,WAC/B,OAAgCwB,EAAAA,EAAAA,UAAiB,IAAjD,eAAOtB,EAAP,KAAiBD,EAAjB,KACMK,EAPuB,SAACN,GAAyB,IAAD,EACtD,iBAAOI,EAASC,QAAO,SAACF,GAAD,OAAaA,EAAQH,cAAgBA,KAAa,UAAzE,aAAO,EACJM,aAKkBmB,CAAsBvB,GAC3C,GAAyDwB,EAAAA,EAAAA,KAAjDC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,aAAcC,EAA7B,EAA6BA,SAE7B,OAFA,EAAuCC,eAOtC,+BACC,UAAC,KAAD,CACCC,QAAS,OACTC,OAAQ9B,EAAW,aAAe,OAClC+B,YAAa3B,EACb4B,EAAG,EACHC,IAAK,GACLC,EAAG,CAAExB,KAAM,OAAQC,GAAI,SACvBwB,EAAG,EACHC,OAAQ,QACRC,QAAS,SATV,WAWC,SAAC,KAAD,CAASC,SAAU,QAASC,IAAK,GAAIJ,EAAG,EAAxC,SACEV,KAEF,SAAC,KAAD,CACCW,OAAQ,MACRD,EAAG,EACHD,EAAG,CAAExB,KAAM,OAAQC,GAAI,OACvB6B,QAAS,CAAE9B,KAAM,GAAIC,GAAI,QAJ1B,SAMET,EAASuC,KAAI,gBAAG3C,EAAH,EAAGA,YAAH,OACb,SAAC,EAAD,CAECA,YAAaA,EACbE,SAAUA,EACVD,YAAaA,GAHRD,SAOR,SAAC,KAAD,CAAQqC,EAAG,EAAGD,EAAG,OAAQE,OAAQ,OAAQI,QAAS,EAAlD,SACExC,GACA,iCACC,UAAC,KAAD,CAASiB,MAAOb,EAAhB,cAAgCJ,EAAhC,QACA,SAAC,KAAD,CACCgC,EAAG,EACHU,UAAWhB,EACXX,QAAS,kBAAMY,EAAS3B,IACxBkC,EAAG,MACHS,KAAM,OACNC,GAAI,QANL,uBAWE,aAjDA,SAACC,EAAA,EAAD,M,sLCyGT,EAhGyB,WACxB,IAAMC,GAAQC,EAAAA,EAAAA,MACRC,GAAWC,EAAAA,EAAAA,MACjB,GAA4BC,EAAAA,EAAAA,MAApBC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,MAClB,GAA0C9B,EAAAA,EAAAA,YAA1C,eAAOM,EAAP,KAAsByB,EAAtB,KACA,GAA8C/B,EAAAA,EAAAA,UAAyB,MAAvE,eAAOgC,EAAP,KAAwBC,EAAxB,KACA,EC7BkC,WAClC,IAAQC,GAAWC,EAAAA,EAAAA,KAAXD,OACFE,GAAaC,EAAAA,EAAAA,MACnB,GAAwCrC,EAAAA,EAAAA,WAAS,GAAjD,eAAOI,EAAP,KAAqBkC,EAArB,KAEMC,EAAW,mCAAG,WAAOC,EAAkBC,GAAzB,6EACfrC,EADe,iEAIbkC,GAAgB,GAJH,uBAKII,MAAMF,EAAUC,GALpB,YAKbE,EALa,QAMNC,GANM,kCAOCD,EAASE,OAPV,eAOZC,EAPY,OAQlBR,GAAgB,GARE,kBASXQ,GATW,QAWfH,EAASI,OACZb,IAZkB,8BAaNc,MAAML,EAASM,YAbT,4CAAH,wDAgBXC,EAAsB,mCAAG,WAC9BC,GAD8B,uFAGXZ,EAAYa,EAAAA,GAAuBhB,GAHxB,UAGxBU,EAHwB,SAI1BO,EAAAA,EAAAA,IAAgBP,GAJU,yCAKtBA,GALsB,aAOxBE,MAAM,wBAPkB,2CAAH,sDAStBM,EAAmB,mCAAG,6FACrBC,GADqB,QACTC,OAAQ,QAAWpB,GADV,SAECG,EAAYa,EAAAA,GAAuBG,GAFpC,UAErBjD,EAFqB,SAIvB+C,EAAAA,EAAAA,IAAgB/C,GAJO,yCAKnBA,GALmB,aAOpB0C,MAAM,uBAPc,2CAAH,qDAWnBS,EAAiB,mCAAG,2FACnBC,EAA2B,CAChCC,SAAQ,mBACJtB,EAAAA,EAAAA,MAAgBsB,SADb,IAENC,OAAQ,mBACR,eAAgB,qBAEjBJ,OAAQ,QAPgB,SAUZjB,EAAY,GAAD,OAAIsB,EAAAA,GAAJ,kBAAkCH,GAVjC,mFAAH,qDAajBI,EAAmB,mCAAG,WAC3BhB,EACAiB,EACAC,GAH2B,8EAKrBC,EAA6B,CAClCN,SAAQ,QACPC,OAAQ,mBACR,eAAgB,oBACbxB,EAAWuB,SAEfH,OAAQ,UAEKU,KAAOC,KAAKC,WAAL,UAAkBJ,EAAYlB,IAbxB,SAcdP,EAAY,GAAD,OACpBa,EAAAA,GADoB,YACKW,GAC5BE,GAhB0B,mFAAH,0DAmBzB,MAAO,CACNH,oBAAAA,EACAZ,uBAAAA,EACAI,oBAAAA,EACAlD,aAAAA,EACAqD,kBAAAA,GD5CGY,GAJHP,EADD,EACCA,oBACAZ,EAFD,EAECA,uBACA9C,EAHD,EAGCA,aACAqD,EAJD,EAICA,kBAGKN,GAAQmB,EAAAA,EAAAA,MACd,IAAKnB,EACJ,MAAMH,OAEPuB,EAAAA,EAAAA,YAAU,WACT,IAAKvC,IAAmBwC,EAAAA,EAAAA,IAAW3C,IAC9BvB,EAAe,CAClB,IAAMmE,EAlCW,SAAC5C,EAAwBvB,GAAkC,IAAD,YAC7DoE,EAAAA,IAD6D,IAC9E,2BAA2B,CAAC,IAAnBC,EAAkB,QACtBC,EAAmBD,EAAKE,MAAM,GAClC,GAAIF,IAAS9C,EACZ,OAAO8C,EAER,IAAIG,EAAAA,EAAAA,IAAqBF,EAAkBtE,IACF,OAApCA,EAAcsE,GACjB,OAAOD,GARoE,8BAY9E,OAAO9C,EAsBckD,CAAalD,EAAUvB,GACrCmE,IAAc5C,EACjBH,EAAS+C,GAETxC,GAAmB,MAIpB,CAACD,EAAiBN,EAAUG,EAAUvB,KAEzCiE,EAAAA,EAAAA,YAAU,WACT,IAAMS,EAAgB,mCAAG,iFACnB1E,EADmB,sBAEnB+C,EAAAA,EAAAA,IAAgBvB,GAFG,gBAGtBC,EAAiBD,GAHK,mCAKtBC,EALsB,SAKCmB,EAAuBC,GALxB,8EAAH,qDASjB/C,GACJ4E,MAEC,CAAC9B,EAAwB9C,EAAc0B,EAAOxB,EAAe6C,IAEhE,IAAM9C,EAAQ,mCAAG,WAAOyC,GAAP,kFACZ0B,EAAAA,EAAAA,IAAW3C,GADC,oBAEE,YAAbA,EAFW,0CAIP4B,IAJO,OAKb/B,EAAS,KALI,gDAOT,gBAAiBsB,OACpBxB,EAAM,CACLuB,OAAQ,QACRkC,YAAa,uBAVF,uCAeRjB,EAAYnC,EAASgD,MAAM,GAC3Bd,GAA8BV,EAAAA,EAAAA,IAAgB/C,GACjDA,EAAc4E,IACd,GACGC,EAAgBT,EAAAA,GAAAA,QAAiB7C,GAAY,EAnBrC,oBAqBeiC,EAC3BhB,EACAiB,EACAC,GAxBY,QAqBPoB,EArBO,OA0Bb1D,EAASgD,EAAAA,GAASS,GAAgB,CAAErD,OAAM,UAAMsD,KA1BnC,mDA4Bb5D,EAAM,CACLuB,OAAQ,QACRkC,YAAa,wBA9BD,iEAAH,sDAoCV9E,EAAgB,GAChBkF,EAA0B,GAK9B,OAJIb,EAAAA,EAAAA,IAAW3C,KACd1B,EAAQmF,EAAAA,GAAkBzD,GAAU1B,MACpCkF,EAAkBxD,EAASgD,MAAM,IAE3B,CACN1E,MAAOA,EACPE,SAAUA,EACVD,aAAcA,EACdiF,gBAAiBA,EACjB/E,cAAeA,EACf0B,gBAAiBA,K,kEEnIJ,SAASuD,EAA2BC,EAAGC,GACpD,IAAIC,EAAuB,qBAAXC,QAA0BH,EAAEG,OAAOC,WAAaJ,EAAE,cAElE,IAAKE,EAAI,CACP,GAAIG,MAAMC,QAAQN,KAAOE,GAAK,OAA2BF,KAAOC,GAAkBD,GAAyB,kBAAbA,EAAEO,OAAqB,CAC/GL,IAAIF,EAAIE,GACZ,IAAIM,EAAI,EAEJC,EAAI,aAER,MAAO,CACLC,EAAGD,EACHE,EAAG,WACD,OAAIH,GAAKR,EAAEO,OAAe,CACxBK,MAAM,GAED,CACLA,MAAM,EACNC,MAAOb,EAAEQ,OAGbM,EAAG,SAAWC,GACZ,MAAMA,GAERC,EAAGP,GAIP,MAAM,IAAIQ,UAAU,yIAGtB,IAEIC,EAFAC,GAAmB,EACnBC,GAAS,EAEb,MAAO,CACLV,EAAG,WACDR,EAAKA,EAAGmB,KAAKrB,IAEfW,EAAG,WACD,IAAIW,EAAOpB,EAAGqB,OAEd,OADAJ,EAAmBG,EAAKV,KACjBU,GAETR,EAAG,SAAWU,GACZJ,GAAS,EACTF,EAAMM,GAERR,EAAG,WACD,IACOG,GAAoC,MAAhBjB,EAAW,QAAWA,EAAW,SAC1D,QACA,GAAIkB,EAAQ,MAAMF","sources":["Components/EmotionButton.tsx","Components/EmotionPicker.tsx","Hooks/UseThoughtRecord.tsx","Hooks/useThoughtRecordApi.tsx","../node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js"],"sourcesContent":["import { useBreakpointValue, useColorModeValue } from '@chakra-ui/react'\nimport { IconDefinition } from '@fortawesome/free-solid-svg-icons'\nimport { Dispatch, SetStateAction } from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { emotions } from './EmotionPicker'\n\nexport interface Emotion {\n\ticon: IconDefinition\n\temotionColor: string\n\temotionName: string\n}\n\ntype ButtonSizes = '3x' | '5x'\n\ninterface EmotionButtonProps {\n\temotionName: string\n\tsetSelected: Dispatch<SetStateAction<string>>\n\tselected: string\n}\n\nconst EmotionButton: React.FC<EmotionButtonProps> = ({\n\temotionName,\n\tsetSelected,\n\tselected,\n}) => {\n\tconst emotion = emotions.filter(\n\t\t(emotion) => emotionName === emotion.emotionName,\n\t)[0]\n\tconst { emotionColor, icon } = emotion\n\tconst iconColor = useColorModeValue('black', 'white')\n\tconst buttonSize = useBreakpointValue<string>({\n\t\tbase: '3x',\n\t\tlg: '5x',\n\t}) as ButtonSizes\n\n\tconst getIconColor = (emotionName: string) => {\n\t\tif (selected && emotionName !== selected) {\n\t\t\treturn iconColor\n\t\t} else {\n\t\t\treturn emotionColor\n\t\t}\n\t}\n\n\tconst handleOnClick = (emotionName: string) => {\n\t\tif (emotionName === selected) {\n\t\t\tsetSelected('')\n\t\t} else {\n\t\t\tsetSelected(emotionName)\n\t\t}\n\t}\n\tconst displayColor = getIconColor(emotionName)\n\treturn (\n\t\t<>\n\t\t\t<FontAwesomeIcon\n\t\t\t\tsize={buttonSize}\n\t\t\t\tonClick={() => handleOnClick(emotionName)}\n\t\t\t\taria-label={`${emotionName} button`}\n\t\t\t\tcolor={displayColor}\n\t\t\t\ticon={icon}\n\t\t\t/>\n\t\t</>\n\t)\n}\n\nexport default EmotionButton\n","import { Button, Center, Heading, HStack, VStack } from '@chakra-ui/react'\nimport React, { useState } from 'react'\nimport EmotionButton, { Emotion } from './EmotionButton'\nimport LoadingTextField from './LoadingTextField'\nimport useThoughtRecord from '../Hooks/UseThoughtRecord'\nimport {\n\tfaFaceMeh,\n\tfaFaceFrownOpen,\n\tfaFaceGrin,\n\tfaFaceSmile,\n} from '@fortawesome/free-solid-svg-icons'\n\nexport const emotions: Emotion[] = [\n\t{ icon: faFaceFrownOpen, emotionColor: '#322659', emotionName: 'Awful' },\n\t{ icon: faFaceMeh, emotionColor: '#2C5282', emotionName: 'Meh' },\n\t{ icon: faFaceSmile, emotionColor: '#68D391', emotionName: 'Good' },\n\t{ icon: faFaceGrin, emotionColor: '#F6E05E', emotionName: 'Awesome' },\n]\n\nconst getEmotionColorByName = (emotionName: string) => {\n\treturn emotions.filter((emotion) => emotion.emotionName === emotionName)[0]\n\t\t?.emotionColor\n}\n\nconst EmotionPicker: React.FC = () => {\n\tconst [selected, setSelected] = useState<string>('')\n\tconst emotionColor = getEmotionColorByName(selected)\n\tconst { label, isSubmitting, onSubmit, thoughtRecord } = useThoughtRecord()\n\n\tif (!thoughtRecord) {\n\t\treturn <LoadingTextField />\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t<Center\n\t\t\t\trounded={'75px'}\n\t\t\t\tborder={selected ? '15px solid' : 'none'}\n\t\t\t\tborderColor={emotionColor}\n\t\t\t\tm={0}\n\t\t\t\tmx={-20}\n\t\t\t\tw={{ base: 'auto', lg: '100vw' }}\n\t\t\t\tp={2}\n\t\t\t\theight={'150vh'}\n\t\t\t\tflexDir={'column'}\n\t\t\t>\n\t\t\t\t<Heading position={'fixed'} top={48} p={0}>\n\t\t\t\t\t{label}\n\t\t\t\t</Heading>\n\t\t\t\t<HStack\n\t\t\t\t\theight={'50%'}\n\t\t\t\t\tp={2}\n\t\t\t\t\tw={{ base: '100%', lg: '50%' }}\n\t\t\t\t\tspacing={{ base: 12, lg: 'auto' }}\n\t\t\t\t>\n\t\t\t\t\t{emotions.map(({ emotionName }) => (\n\t\t\t\t\t\t<EmotionButton\n\t\t\t\t\t\t\tkey={emotionName}\n\t\t\t\t\t\t\temotionName={emotionName}\n\t\t\t\t\t\t\tselected={selected}\n\t\t\t\t\t\t\tsetSelected={setSelected}\n\t\t\t\t\t\t/>\n\t\t\t\t\t))}\n\t\t\t\t</HStack>\n\t\t\t\t<VStack p={2} w={'full'} height={'10vh'} spacing={6}>\n\t\t\t\t\t{selected ? (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<Heading color={emotionColor}> {selected} </Heading>\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\tm={2}\n\t\t\t\t\t\t\t\tisLoading={isSubmitting}\n\t\t\t\t\t\t\t\tonClick={() => onSubmit(selected)}\n\t\t\t\t\t\t\t\tw={'60%'}\n\t\t\t\t\t\t\t\tminH={'40px'}\n\t\t\t\t\t\t\t\tbg={'white'}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tSubmit\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t</>\n\t\t\t\t\t) : null}\n\t\t\t\t</VStack>\n\t\t\t</Center>\n\t\t</>\n\t)\n}\n\nexport default EmotionPicker\n","import { useToast } from '@chakra-ui/react'\nimport { useEffect, useState } from 'react'\nimport { useLocation, useNavigate } from 'react-router-dom'\nimport {\n\tThoughtRecord,\n\tisThoughtRecord,\n\tisKeyOfThoughtRecord,\n\tQuestionType,\n\tquestion,\n\tthoughtRecordData,\n\tisQuestion,\n\tFormValues,\n} from '../Components/types'\nimport { getToken } from '../utils/api'\nimport { useThoughtRecordApi } from './useThoughtRecordApi'\n\ninterface UseThoughtRecordReturn {\n\tlabel: string\n\tonSubmit: (data: FormValues) => void\n\tisSubmitting: boolean\n\tcurrentQuestion: string\n\tisValidQuestion: boolean | null\n\tthoughtRecord: ThoughtRecord | undefined\n}\n\nconst getLastValid = (pathname: QuestionType, thoughtRecord: ThoughtRecord) => {\n\tfor (let path of question) {\n\t\tlet thoughtRecordKey = path.slice(1)\n\t\tif (path === pathname) {\n\t\t\treturn path\n\t\t}\n\t\tif (isKeyOfThoughtRecord(thoughtRecordKey, thoughtRecord)) {\n\t\t\tif (thoughtRecord[thoughtRecordKey] === null) {\n\t\t\t\treturn path\n\t\t\t}\n\t\t}\n\t}\n\treturn pathname\n}\nconst UseThoughtRecord = (): UseThoughtRecordReturn | never => {\n\tconst toast = useToast()\n\tconst navigate = useNavigate()\n\tconst { pathname, state } = useLocation()\n\tconst [thoughtRecord, setThoughtRecord] = useState<ThoughtRecord>()\n\tconst [isValidQuestion, setIsValidQuestion] = useState<boolean | null>(null)\n\tconst {\n\t\tupdateThoughtRecord,\n\t\tgetActiveThoughtRecord,\n\t\tisSubmitting,\n\t\tsaveThoughtRecord,\n\t} = useThoughtRecordApi()\n\n\tconst token = getToken()\n\tif (!token) {\n\t\tthrow Error\n\t}\n\tuseEffect(() => {\n\t\tif (!isValidQuestion && isQuestion(pathname)) {\n\t\t\tif (thoughtRecord) {\n\t\t\t\tconst lastValid = getLastValid(pathname, thoughtRecord)\n\t\t\t\tif (lastValid !== pathname) {\n\t\t\t\t\tnavigate(lastValid)\n\t\t\t\t} else {\n\t\t\t\t\tsetIsValidQuestion(true)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}, [isValidQuestion, navigate, pathname, thoughtRecord])\n\n\tuseEffect(() => {\n\t\tconst getThoughtRecord = async () => {\n\t\t\tif (!thoughtRecord) {\n\t\t\t\tif (isThoughtRecord(state)) {\n\t\t\t\t\tsetThoughtRecord(state)\n\t\t\t\t} else {\n\t\t\t\t\tsetThoughtRecord(await getActiveThoughtRecord(token))\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (!isSubmitting) {\n\t\t\tgetThoughtRecord()\n\t\t}\n\t}, [getActiveThoughtRecord, isSubmitting, state, thoughtRecord, token])\n\n\tconst onSubmit = async (data: FormValues) => {\n\t\tif (isQuestion(pathname)) {\n\t\t\tif (pathname === '/submit') {\n\t\t\t\ttry {\n\t\t\t\t\tawait saveThoughtRecord()\n\t\t\t\t\tnavigate('/')\n\t\t\t\t} catch (error) {\n\t\t\t\t\tif (error instanceof Error) {\n\t\t\t\t\t\ttoast({\n\t\t\t\t\t\t\tstatus: 'error',\n\t\t\t\t\t\t\tdescription: 'problem submitting',\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst updateKey = pathname.slice(1)\n\t\t\t\tconst activeThoughtRecord: string = isThoughtRecord(thoughtRecord)\n\t\t\t\t\t? thoughtRecord.key\n\t\t\t\t\t: ''\n\t\t\t\tconst NextLinkIndex = question.indexOf(pathname) + 1\n\t\t\t\ttry {\n\t\t\t\t\tconst updatedRecord = await updateThoughtRecord(\n\t\t\t\t\t\tdata,\n\t\t\t\t\t\tactiveThoughtRecord,\n\t\t\t\t\t\tupdateKey,\n\t\t\t\t\t)\n\t\t\t\t\tnavigate(question[NextLinkIndex], { state: { ...updatedRecord } })\n\t\t\t\t} catch {\n\t\t\t\t\ttoast({\n\t\t\t\t\t\tstatus: 'error',\n\t\t\t\t\t\tdescription: 'problem with update',\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tlet label: string = ''\n\tlet currentQuestion: string = ''\n\tif (isQuestion(pathname)) {\n\t\tlabel = thoughtRecordData[pathname].label\n\t\tcurrentQuestion = pathname.slice(1)\n\t}\n\treturn {\n\t\tlabel: label,\n\t\tonSubmit: onSubmit,\n\t\tisSubmitting: isSubmitting,\n\t\tcurrentQuestion: currentQuestion,\n\t\tthoughtRecord: thoughtRecord,\n\t\tisValidQuestion: isValidQuestion,\n\t}\n}\nexport default UseThoughtRecord\n","import { useState } from 'react'\nimport {\n\tthoughtRecordEndPoint,\n\tgetAuthHeader,\n\tuserEndPoint,\n} from '../utils/api'\nimport useAuth from './useAuth'\nimport {\n\tFormValues,\n\tThoughtRecord,\n\tisThoughtRecord,\n\tToken,\n} from '../Components/types'\n/* returns a function that takes in the current path and active thought record \nto update and a piece of state that shows if the data is currently being fetched */\n\nexport const useThoughtRecordApi = () => {\n\tconst { logout } = useAuth()\n\tconst authHeader = getAuthHeader()\n\tconst [isSubmitting, setIsSubmitting] = useState(false)\n\n\tconst handleFetch = async (endPoint: string, fetchOptions: RequestInit) => {\n\t\tif (isSubmitting) {\n\t\t\treturn\n\t\t}\n\t\tawait setIsSubmitting(true)\n\t\tconst response = await fetch(endPoint, fetchOptions)\n\t\tif (response.ok) {\n\t\t\tconst data = await response.json()\n\t\t\tsetIsSubmitting(false)\n\t\t\treturn data\n\t\t}\n\t\tif (response.status === 401 || 403) {\n\t\t\tlogout()\n\t\t} else throw Error(response.statusText)\n\t}\n\n\tconst getActiveThoughtRecord = async (\n\t\ttoken: Token,\n\t): Promise<ThoughtRecord> => {\n\t\tconst data = await handleFetch(thoughtRecordEndPoint, authHeader)\n\t\tif (isThoughtRecord(data)) {\n\t\t\treturn data\n\t\t}\n\t\tthrow Error('not a thought record')\n\t}\n\tconst getNewThoughtRecord = async (): Promise<ThoughtRecord> => {\n\t\tconst options = { method: 'POST', ...authHeader }\n\t\tconst thoughtRecord = await handleFetch(thoughtRecordEndPoint, options)\n\n\t\tif (isThoughtRecord(thoughtRecord)) {\n\t\t\treturn thoughtRecord\n\t\t} else {\n\t\t\tthrow Error('response isnt valid')\n\t\t}\n\t}\n\n\tconst saveThoughtRecord = async () => {\n\t\tconst saveOptions: RequestInit = {\n\t\t\theaders: {\n\t\t\t\t...getAuthHeader().headers,\n\t\t\t\tAccept: 'application/json',\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t},\n\t\t\tmethod: 'POST',\n\t\t}\n\n\t\treturn await handleFetch(`${userEndPoint}/thoughtrecord`, saveOptions)\n\t}\n\n\tconst updateThoughtRecord = async (\n\t\tdata: FormValues,\n\t\tactiveThoughtRecord: string,\n\t\tupdateKey: string,\n\t) => {\n\t\tconst updateOptions: RequestInit = {\n\t\t\theaders: {\n\t\t\t\tAccept: 'application/json',\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t...authHeader.headers,\n\t\t\t},\n\t\t\tmethod: 'PATCH',\n\t\t}\n\t\tupdateOptions.body = JSON.stringify({ [updateKey]: data })\n\t\treturn await handleFetch(\n\t\t\t`${thoughtRecordEndPoint}/${activeThoughtRecord}`,\n\t\t\tupdateOptions,\n\t\t)\n\t}\n\treturn {\n\t\tupdateThoughtRecord,\n\t\tgetActiveThoughtRecord,\n\t\tgetNewThoughtRecord,\n\t\tisSubmitting,\n\t\tsaveThoughtRecord,\n\t}\n}\n","import unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n\n  if (!it) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}"],"names":["emotionName","setSelected","selected","emotion","emotions","filter","emotionColor","icon","iconColor","useColorModeValue","buttonSize","useBreakpointValue","base","lg","displayColor","getIconColor","size","onClick","handleOnClick","color","faFaceFrownOpen","faFaceMeh","faFaceSmile","faFaceGrin","useState","getEmotionColorByName","useThoughtRecord","label","isSubmitting","onSubmit","thoughtRecord","rounded","border","borderColor","m","mx","w","p","height","flexDir","position","top","spacing","map","isLoading","minH","bg","LoadingTextField","toast","useToast","navigate","useNavigate","useLocation","pathname","state","setThoughtRecord","isValidQuestion","setIsValidQuestion","logout","useAuth","authHeader","getAuthHeader","setIsSubmitting","handleFetch","endPoint","fetchOptions","fetch","response","ok","json","data","status","Error","statusText","getActiveThoughtRecord","token","thoughtRecordEndPoint","isThoughtRecord","getNewThoughtRecord","options","method","saveThoughtRecord","saveOptions","headers","Accept","userEndPoint","updateThoughtRecord","activeThoughtRecord","updateKey","updateOptions","body","JSON","stringify","useThoughtRecordApi","getToken","useEffect","isQuestion","lastValid","question","path","thoughtRecordKey","slice","isKeyOfThoughtRecord","getLastValid","getThoughtRecord","description","key","NextLinkIndex","updatedRecord","currentQuestion","thoughtRecordData","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","length","i","F","s","n","done","value","e","_e","f","TypeError","err","normalCompletion","didErr","call","step","next","_e2"],"sourceRoot":""}