{"version":3,"file":"static/js/492.7d33d090.chunk.js","mappings":"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","sources":["Components/Profile.tsx","Hooks/useThoughtRecordApi.tsx"],"sourcesContent":["import {\n\tButton,\n\tButtonGroup,\n\tHeading,\n\tVStack,\n\tText,\n\tLink,\n\tCenter,\n} from '@chakra-ui/react'\nimport { BsGithub } from 'react-icons/bs'\nimport { useNavigate, Link as BrowserLink } from 'react-router-dom'\nimport useAuth from '../Hooks/useAuth'\nimport useThoughtRecordApi from '../Hooks/useThoughtRecordApi'\n\nconst Profile = () => {\n\tconst { getNewThoughtRecord, editThoughtRecord, isSubmitting } =\n\t\tuseThoughtRecordApi()\n\tconst navigate = useNavigate()\n\tconst handleEdit = async (thoughtRecordId: string) => {\n\t\tconst thoughtRecord = await editThoughtRecord(thoughtRecordId)\n\t\tnavigate('/emotion', { state: { ...thoughtRecord } })\n\t}\n\tconst handleNewThoughtRecord = async () => {\n\t\tawait getNewThoughtRecord()\n\t\tnavigate('/emotion')\n\t}\n\tconst { currentUser } = useAuth()\n\tif (!currentUser) {\n\t\tnavigate('/login')\n\t\treturn <></>\n\t}\n\n\tconst userName = currentUser.firstName || currentUser.username.split('@')[0]\n\tconst { thoughtRecords, activeThoughtRecord } = currentUser\n\treturn (\n\t\t<>\n\t\t\t<Center minH={'70vh'}>\n\t\t\t\t<VStack textAlign={'center'} spacing={10} mt={2}>\n\t\t\t\t\t<Heading>Welcome to CBTree {userName}</Heading>\n\n\t\t\t\t\t<Link as={BrowserLink} to={'/about'}>\n\t\t\t\t\t\t<Text color=\"whiteAlpha.800\" as=\"u\">\n\t\t\t\t\t\t\tWhat is a thought record?\n\t\t\t\t\t\t</Text>\n\t\t\t\t\t</Link>\n\t\t\t\t\t<ButtonGroup spacing={6} size={'lg'}>\n\t\t\t\t\t\t<Link as={BrowserLink} to=\"/thoughtrecords\">\n\t\t\t\t\t\t\t<Button disabled={!!thoughtRecords} isLoading={isSubmitting}>\n\t\t\t\t\t\t\t\tView\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t<Button isLoading={isSubmitting} onClick={handleNewThoughtRecord}>\n\t\t\t\t\t\t\tNew\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tdisabled={!activeThoughtRecord}\n\t\t\t\t\t\t\tonClick={() => handleEdit(activeThoughtRecord || '')}\n\t\t\t\t\t\t\tisLoading={isSubmitting}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tEdit\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</ButtonGroup>\n\t\t\t\t\t<Text color={'white'} p={2} fontSize={14}>\n\t\t\t\t\t\tIf you have any questions or concerns Contact us at:{' '}\n\t\t\t\t\t\t<Link href={'mailto:kylehgc@gmail.com'}>\n\t\t\t\t\t\t\t<Text color={'whiteAlpha.800'} as=\"u\">\n\t\t\t\t\t\t\t\tkylehgc@gmail.com\n\t\t\t\t\t\t\t</Text>\n\t\t\t\t\t\t</Link>\n\t\t\t\t\t</Text>\n\t\t\t\t\t<Link href=\"https://github.com/kylehgc/CBTree\">\n\t\t\t\t\t\t<BsGithub size={80} />\n\t\t\t\t\t</Link>\n\t\t\t\t</VStack>\n\t\t\t</Center>\n\t\t</>\n\t)\n}\n\nexport default Profile\n","import { useState } from 'react'\nimport {\n\tthoughtRecordEndPoint,\n\tgetAuthHeader,\n\tuserEndPoint,\n} from '../Utils/api'\nimport useAuth from './useAuth'\nimport { FormValues, ThoughtRecord, isThoughtRecord, User } from '../types'\n/* returns a function that takes in the current path and active thought record \nto update and a piece of state that shows if the data is currently being fetched */\n\ntype FetchThoughtRecord = () => Promise<ThoughtRecord>\n\ninterface useThoughtRecordReturn {\n\tdeleteThoughtRecord: (thoughtRecord: string) => Promise<string>\n\tgetActiveThoughtRecord: FetchThoughtRecord\n\tgetNewThoughtRecord: FetchThoughtRecord\n\tgetAllThoughtRecords: () => Promise<ThoughtRecord[]>\n\tupdateThoughtRecord: (\n\t\tdata: FormValues,\n\t\tactiveThoughtRecord: string,\n\t\tupdateKey: string,\n\t) => Promise<ThoughtRecord>\n\tsaveThoughtRecord: () => Promise<User>\n\teditThoughtRecord: (thoughtRecordId: string) => Promise<ThoughtRecord>\n\tisSubmitting: boolean\n}\n\nconst useThoughtRecordApi = (): useThoughtRecordReturn => {\n\tconst { logout } = useAuth()\n\tconst authHeader = getAuthHeader()\n\tconst [isSubmitting, setIsSubmitting] = useState(false)\n\n\tconst handleFetch = async (endPoint: string, fetchOptions: RequestInit) => {\n\t\tif (isSubmitting) {\n\t\t\treturn\n\t\t}\n\t\tawait setIsSubmitting(true)\n\t\tconst response = await fetch(endPoint, fetchOptions)\n\t\tif (response.ok) {\n\t\t\tconst data = await response.json()\n\t\t\tsetIsSubmitting(false)\n\t\t\treturn data\n\t\t}\n\t\tif (response.status === 401 || 403) {\n\t\t\tlogout()\n\t\t} else throw Error(response.statusText)\n\t}\n\n\tconst getActiveThoughtRecord = async (): Promise<ThoughtRecord> => {\n\t\tconst data = await handleFetch(thoughtRecordEndPoint, authHeader)\n\t\tif (isThoughtRecord(data)) {\n\t\t\treturn data\n\t\t}\n\t\tthrow Error('not a thought record')\n\t}\n\tconst getNewThoughtRecord = async (): Promise<ThoughtRecord> => {\n\t\tconst options = { method: 'POST', ...authHeader }\n\t\tconst thoughtRecord = await handleFetch(thoughtRecordEndPoint, options)\n\n\t\tif (isThoughtRecord(thoughtRecord)) {\n\t\t\treturn thoughtRecord\n\t\t} else {\n\t\t\tthrow Error('response isnt valid')\n\t\t}\n\t}\n\n\tconst getAllThoughtRecords = async (): Promise<ThoughtRecord[]> => {\n\t\tconst options: RequestInit = {\n\t\t\t...authHeader,\n\t\t}\n\t\treturn await handleFetch(`${thoughtRecordEndPoint}/all`, options)\n\t}\n\n\tconst saveThoughtRecord = async (): Promise<User> => {\n\t\tconst saveOptions: RequestInit = {\n\t\t\theaders: {\n\t\t\t\t...authHeader.headers,\n\t\t\t\tAccept: 'application/json',\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t},\n\t\t\tmethod: 'POST',\n\t\t}\n\n\t\treturn await handleFetch(`${userEndPoint}/thoughtrecord`, saveOptions)\n\t}\n\tconst deleteThoughtRecord = async (\n\t\tthoughtRecord: string,\n\t): Promise<string> => {\n\t\tconst deleteOptions: RequestInit = {\n\t\t\t...authHeader,\n\t\t\tmethod: 'DELETE',\n\t\t}\n\t\treturn await handleFetch(\n\t\t\t`${thoughtRecordEndPoint}/${thoughtRecord}`,\n\t\t\tdeleteOptions,\n\t\t)\n\t}\n\n\tconst editThoughtRecord = async (thoughtRecordId: string) => {\n\t\tconst editOptions: RequestInit = {\n\t\t\t...authHeader,\n\t\t\tmethod: 'POST',\n\t\t}\n\t\tconst thoughtRecord = await handleFetch(\n\t\t\t`${thoughtRecordEndPoint}/edit/${thoughtRecordId}`,\n\t\t\teditOptions,\n\t\t)\n\t\tif (isThoughtRecord(thoughtRecord)) {\n\t\t\treturn thoughtRecord\n\t\t}\n\t\tthrow Error('Invalid return')\n\t}\n\tconst updateThoughtRecord = async (\n\t\tdata: FormValues,\n\t\tactiveThoughtRecord: string,\n\t\tupdateKey: string,\n\t): Promise<ThoughtRecord> => {\n\t\tconst updateOptions: RequestInit = {\n\t\t\theaders: {\n\t\t\t\tAccept: 'application/json',\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t...authHeader.headers,\n\t\t\t},\n\t\t\tmethod: 'PATCH',\n\t\t}\n\t\tupdateOptions.body = JSON.stringify({ [updateKey]: data })\n\t\treturn await handleFetch(\n\t\t\t`${thoughtRecordEndPoint}/${activeThoughtRecord}`,\n\t\t\tupdateOptions,\n\t\t)\n\t}\n\treturn {\n\t\tdeleteThoughtRecord,\n\t\tgetAllThoughtRecords,\n\t\tupdateThoughtRecord,\n\t\tgetActiveThoughtRecord,\n\t\tgetNewThoughtRecord,\n\t\tisSubmitting,\n\t\tsaveThoughtRecord,\n\t\teditThoughtRecord,\n\t}\n}\n\nexport default useThoughtRecordApi\n"],"names":["useThoughtRecordApi","getNewThoughtRecord","editThoughtRecord","isSubmitting","navigate","useNavigate","handleEdit","thoughtRecordId","thoughtRecord","state","handleNewThoughtRecord","currentUser","useAuth","userName","firstName","username","split","thoughtRecords","activeThoughtRecord","minH","textAlign","spacing","mt","as","BrowserLink","to","color","size","disabled","isLoading","onClick","p","fontSize","href","logout","authHeader","getAuthHeader","useState","setIsSubmitting","handleFetch","endPoint","fetchOptions","fetch","response","ok","json","data","status","Error","statusText","getActiveThoughtRecord","thoughtRecordEndPoint","isThoughtRecord","options","method","getAllThoughtRecords","saveThoughtRecord","saveOptions","headers","Accept","userEndPoint","deleteThoughtRecord","deleteOptions","editOptions","updateThoughtRecord","updateKey","updateOptions","body","JSON","stringify"],"sourceRoot":""}