{"version":3,"file":"static/js/870.193ecd8e.chunk.js","mappings":"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","sources":["Components/LoginForm.tsx","Components/UserPassFormElements.tsx"],"sourcesContent":["import { Box, Stack, Link, Button, Heading, useToast } from '@chakra-ui/react'\n\nimport useAuth from '../Hooks/useAuth'\nimport { useForm, SubmitHandler } from 'react-hook-form'\nimport { loginEndpoint } from '../utils/api'\nimport UserPassFormElements from './UserPassFormElements'\nimport UseThemeColors from '../Hooks/useThemeColors'\nimport { useEffect } from 'react'\nimport { useNavigate, Link as BrowserLink, useLocation } from 'react-router-dom'\nimport LoadingTextField from './LoadingTextField'\nimport { Token } from './types'\n\ninterface FormValues {\n\tusername: string\n\tpassword: string\n}\ntype LocationState = {\n\tstate: {\n\t\tpath: string\n\t}\n}\n\nconst Login: React.FC = () => {\n\tconst toast = useToast()\n\tconst { login, currentUser } = useAuth()\n\tconst { foregroundColor, backgroundColor } = UseThemeColors()\n\tconst {\n\t\tregister,\n\t\thandleSubmit,\n\t\tformState: { errors, isSubmitting },\n\t} = useForm<FormValues>()\n\tconst navigate = useNavigate()\n\tconst { state } = useLocation() as LocationState\n\n\tuseEffect(() => {\n\t\tif (currentUser) {\n\t\t\tnavigate(state?.path || '/emotion')\n\t\t}\n\t}, [currentUser, navigate, state?.path])\n\n\tconst onSubmit: SubmitHandler<FormValues> = async (value) => {\n\t\ttry {\n\t\t\tconst response = await fetch(loginEndpoint, {\n\t\t\t\tbody: new URLSearchParams({ ...value }),\n\t\t\t\tmethod: 'POST',\n\t\t\t\tmode: 'cors',\n\t\t\t})\n\t\t\tif (response.status === 200) {\n\t\t\t\tconst token: Token = await response.json()\n\n\t\t\t\ttoast({\n\t\t\t\t\tstatus: 'success',\n\t\t\t\t\tdescription: 'Logged in.  Redirecting...',\n\t\t\t\t})\n\t\t\t\tawait login(token)\n\t\t\t} else {\n\t\t\t\tthrow new Error('Incorrect Username or Password')\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tif (error instanceof Error) {\n\t\t\t\ttoast({\n\t\t\t\t\tstatus: 'error',\n\t\t\t\t\tdescription: error.message,\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\t}\n\tif (currentUser) {\n\t\treturn <LoadingTextField />\n\t}\n\treturn (\n\t\t<Stack spacing={8} mx={'auto'} maxW={'lg'} maxH={'100%'} py={12} px={6}>\n\t\t\t<Stack align={'center'}>\n\t\t\t\t<Heading fontSize={'4xl'}>Sign in to your account</Heading>\n\t\t\t</Stack>\n\t\t\t<form onSubmit={handleSubmit(onSubmit)}>\n\t\t\t\t<Box rounded={'lg'} bg={foregroundColor} boxShadow={'lg'} p={8}>\n\t\t\t\t\t<Stack spacing={4}>\n\t\t\t\t\t\t<UserPassFormElements register={register} errors={errors} />\n\t\t\t\t\t\t<Stack spacing={8}>\n\t\t\t\t\t\t\t<Stack\n\t\t\t\t\t\t\t\tdirection={{ base: 'column', sm: 'row' }}\n\t\t\t\t\t\t\t\talign={'start'}\n\t\t\t\t\t\t\t\tspacing={4}\n\t\t\t\t\t\t\t\tjustify={'space-between'}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<Link color={'blue.400'}>Forgot password?</Link>\n\t\t\t\t\t\t\t</Stack>\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\ttype={'submit'}\n\t\t\t\t\t\t\t\tisLoading={isSubmitting}\n\t\t\t\t\t\t\t\tloadingText={'Submitting'}\n\t\t\t\t\t\t\t\tvariant={'loginSubmit'}\n\t\t\t\t\t\t\t\ttextColor={'white'}\n\t\t\t\t\t\t\t\tbg={backgroundColor}\n\t\t\t\t\t\t\t\t_hover={{\n\t\t\t\t\t\t\t\t\tbg: 'blue.500',\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tSign in\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\tas={BrowserLink}\n\t\t\t\t\t\t\t\tto=\"/signup\"\n\t\t\t\t\t\t\t\ttextAlign={'center'}\n\t\t\t\t\t\t\t\tcolor={'blue.400'}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tNew User? Sign up here!\n\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t</Stack>\n\t\t\t\t\t</Stack>\n\t\t\t\t</Box>\n\t\t\t</form>\n\t\t</Stack>\n\t)\n}\n\nexport default Login\n","import {\n\tFormControl,\n\tFormLabel,\n\tInput,\n\tFormErrorMessage,\n} from '@chakra-ui/react'\nimport { FieldError, UseFormRegister } from 'react-hook-form'\nimport React from 'react'\n\ninterface FormValues {\n\tusername: string\n\tpassword: string\n}\ninterface IProps {\n\terrors: Errors\n\tregister: UseFormRegister<FormValues>\n}\ninterface Errors {\n\tusername?: FieldError | undefined\n\tpassword?: FieldError | undefined\n}\n\nconst UserPassFormElements: React.FC<IProps> = ({\n\terrors,\n\tregister,\n}: IProps) => {\n\treturn (\n\t\t<>\n\t\t\t<FormControl isRequired isInvalid={!!errors?.username} id=\"email\">\n\t\t\t\t<FormLabel color={'black'}>Email address</FormLabel>\n\t\t\t\t<Input\n\t\t\t\t\t_hover={{ borderColor: 'gray.300' }}\n\t\t\t\t\tborderColor={'gray.300'}\n\t\t\t\t\tcolor={'black'}\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tplaceholder=\"Email\"\n\t\t\t\t\t{...register('username', {\n\t\t\t\t\t\trequired: true,\n\t\t\t\t\t\tpattern: {\n\t\t\t\t\t\t\tvalue: /^\\S+@\\S+$/i,\n\t\t\t\t\t\t\tmessage: 'Not a valid email address',\n\t\t\t\t\t\t},\n\t\t\t\t\t})}\n\t\t\t\t/>\n\t\t\t\t<FormErrorMessage>{errors?.username?.message}</FormErrorMessage>\n\t\t\t</FormControl>\n\t\t\t<FormControl isInvalid={!!errors?.password?.message} id=\"password\">\n\t\t\t\t<FormLabel color={'black'}>Password</FormLabel>\n\t\t\t\t<Input\n\t\t\t\t\tborderColor={'gray.300'}\n\t\t\t\t\tcolor={'black'}\n\t\t\t\t\ttype=\"password\"\n\t\t\t\t\tplaceholder=\"password\"\n\t\t\t\t\t{...register('password', {\n\t\t\t\t\t\trequired: true,\n\t\t\t\t\t\tmaxLength: {\n\t\t\t\t\t\t\tvalue: 10,\n\t\t\t\t\t\t\tmessage: 'Your password is too long',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tminLength: {\n\t\t\t\t\t\t\tvalue: 4,\n\t\t\t\t\t\t\tmessage: 'Your password is too short',\n\t\t\t\t\t\t},\n\t\t\t\t\t})}\n\t\t\t\t/>\n\t\t\t\t<FormErrorMessage>{errors?.password?.message}</FormErrorMessage>\n\t\t\t</FormControl>\n\t\t</>\n\t)\n}\n\nexport default UserPassFormElements\n"],"names":["toast","useToast","useAuth","login","currentUser","UseThemeColors","foregroundColor","backgroundColor","useForm","register","handleSubmit","formState","errors","isSubmitting","navigate","useNavigate","state","useLocation","useEffect","path","onSubmit","value","fetch","loginEndpoint","body","URLSearchParams","method","mode","response","status","json","token","description","Error","message","spacing","mx","maxW","maxH","py","px","align","fontSize","rounded","bg","boxShadow","p","direction","base","sm","justify","color","type","isLoading","loadingText","variant","textColor","_hover","as","BrowserLink","to","textAlign","isRequired","isInvalid","username","id","borderColor","placeholder","required","pattern","password","maxLength","minLength"],"sourceRoot":""}