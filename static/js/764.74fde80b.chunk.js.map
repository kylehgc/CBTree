{"version":3,"file":"static/js/764.74fde80b.chunk.js","mappings":"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","sources":["../node_modules/@chakra-ui/textarea/dist/chakra-ui-textarea.esm.js","Components/TextFieldQuestion.tsx"],"sourcesContent":["import { useFormControl } from '@chakra-ui/form-control';\nimport { forwardRef, useStyleConfig, omitThemingProps, chakra } from '@chakra-ui/system';\nimport { omit, cx, __DEV__ } from '@chakra-ui/utils';\nimport * as React from 'react';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nvar _excluded = [\"className\", \"rows\"];\n\n/**\n * Textarea is used to enter an amount of text that's longer than a single line\n * @see Docs https://chakra-ui.com/textarea\n */\nvar Textarea = /*#__PURE__*/forwardRef(function (props, ref) {\n  var styles = useStyleConfig(\"Textarea\", props);\n\n  var _omitThemingProps = omitThemingProps(props),\n      className = _omitThemingProps.className,\n      rows = _omitThemingProps.rows,\n      rest = _objectWithoutPropertiesLoose(_omitThemingProps, _excluded);\n\n  var textareaProps = useFormControl(rest);\n  var omitted = [\"h\", \"minH\", \"height\", \"minHeight\"];\n  var textareaStyles = rows ? omit(styles, omitted) : styles;\n  return /*#__PURE__*/React.createElement(chakra.textarea, _extends({\n    ref: ref,\n    rows: rows\n  }, textareaProps, {\n    className: cx(\"chakra-textarea\", className),\n    __css: textareaStyles\n  }));\n});\n\nif (__DEV__) {\n  Textarea.displayName = \"Textarea\";\n}\n\nexport { Textarea };\n","\nimport useThoughtRecord from '../Hooks/UseThoughtRecord'\n\nimport {\n  Textarea,\n  Button,\n  VStack,\n  SlideFade\n} from '@chakra-ui/react'\n\nimport { useEffect, useState } from \"react\"\nimport UseThemeColors from '../Hooks/useThemeColors'\nimport {isKeyOfThoughtRecord} from './types'\nimport LoadingTextField from './LoadingTextField'\n\n\nconst TextFieldQuestion: React.FC = () => {\n  const {foregroundColor} = UseThemeColors()\n  const [fieldState, setFieldState] = useState<string>(\"\")\n  const {label, onSubmit, isSubmitting, thoughtRecord,currentQuestion} = useThoughtRecord()  \n\n  useEffect (() => {\n    if(thoughtRecord) {\n      if(isKeyOfThoughtRecord(currentQuestion, thoughtRecord) && !fieldState) {\n        const value = thoughtRecord[currentQuestion]\n        if(typeof value === 'string'){\n          setFieldState(value)\n        }\n      }\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentQuestion, thoughtRecord])\n  const onChange:  React.ChangeEventHandler<HTMLTextAreaElement> = (event) => {\n    setFieldState(event.target.value)\n  }\n  if(!thoughtRecord) {\n    return <LoadingTextField/>\n  }\n  return (\n    <VStack \n      spacing={0}\n      rounded={'3xl'} \n      w={\"full\"} minH={\"100%\"} \n      flexDirection='column' \n      mt={6}\n      alignContent='center'\n      justifyContent='center' \n      mx={2} \n      px={5} \n      py={0} \n    >        \n      <SlideFade offsetY={0} \n        offsetX={\"50%\"} \n        transition={{enter: {duration: 0.4}, \n          exit: {delay: 0.7, duration: 0.3}}} \n        style={{display: \"flex\", flexDirection: \"column\", height: \"90%\", width: \"100%\"}} in={!isSubmitting}>\n        <Textarea \n          placeholder={label} \n          onChange={onChange}\n          value={fieldState}\n          _placeholder={{color: 'blackAlpha.800', fontSize: \"3xl\"}}\n          p={4} \n          bg={foregroundColor} \n          h={'90%'}  \n          w={\"full\"}\n          rounded={\"xl\"} \n          size=\"lg\"\n        />\n      </SlideFade>\n      <SlideFade in={!isSubmitting} \n        offsetY={0} \n        transition={{enter: {delay: 0.2, duration: 0.4}, \n          exit:{delay: 0.3, duration: 0.3}}} offsetX={\"100px\"} \n        style={{flexDirection: \"column\", display: \"flex\", height: \"10%\", width:\"100%\"}}>\n        <Button \n          height={10}\n          w=\"70%\"\n          mt={0}\n          alignSelf={'center'}\n          isLoading={isSubmitting}\n          background={foregroundColor}\n          loadingText={\"Submitting\"}\n          onClick={() => onSubmit(fieldState)}  \n        >\n          Submit\n        </Button> \n      </SlideFade>\n      \n     \n      \n      \n      \n\n      \n \n    </VStack>\n    \n  );\n}\n\nexport default TextFieldQuestion\n"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","_excluded","Textarea","forwardRef","props","ref","styles","useStyleConfig","_omitThemingProps","omitThemingProps","className","rows","rest","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","textareaProps","useFormControl","textareaStyles","omit","React","chakra","cx","__css","__DEV__","displayName","foregroundColor","UseThemeColors","useState","fieldState","setFieldState","useThoughtRecord","label","onSubmit","isSubmitting","thoughtRecord","currentQuestion","useEffect","isKeyOfThoughtRecord","value","spacing","rounded","w","minH","flexDirection","mt","alignContent","justifyContent","mx","px","py","offsetY","offsetX","transition","enter","duration","exit","delay","style","display","height","width","in","placeholder","onChange","event","_placeholder","color","fontSize","p","bg","h","size","alignSelf","isLoading","background","loadingText","onClick","LoadingTextField"],"sourceRoot":""}