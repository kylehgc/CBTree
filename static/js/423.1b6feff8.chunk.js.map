{"version":3,"file":"static/js/423.1b6feff8.chunk.js","mappings":"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","sources":["Components/MoodSlider.tsx","Components/SelectQuestion.tsx","Components/HotThoughtSelect.tsx","Components/ThoughtQuestion.tsx","Components/types.ts","Hooks/UseThoughtRecord.tsx","Hooks/useThoughtRecordApi.tsx"],"sourcesContent":["import { \n  Tooltip,\n  Box, \n  Slider, Text, IconButton, HStack, SliderFilledTrack, SliderThumb, SliderTrack, VStack, Center, Fade} from \"@chakra-ui/react\"\nimport {CloseIcon} from '@chakra-ui/icons'\nimport { Mood } from \"./types\"\nimport { SetStateAction, useState } from \"react\"\nimport React from 'react' \nimport UseThemeColors from \"../Hooks/useThemeColors\"\nimport UseThoughtRecord from \"../Hooks/UseThoughtRecord\"\ninterface ButtonProps {\n  deleteHandler: React.MouseEventHandler<HTMLButtonElement>\n}\ninterface MoodEntryProps {\n  mood: string,\n  moodRating: number,\n  sliderChange: (value: number) => void,\n  deleteHandler: () => void,\n}\n\nexport const sliderColor = (value: number):string => {\n  if(value < 25) {\n    return \"green.400\"\n  }\n  if(value < 50) {\n    return \"yellow.600\"\n  }\n  if(value < 75) {\n    return \"orange.400\"\n  }\n  return \"red.800\"\n}\ninterface SliderProps {\n  moods: Mood[],\n  setMoods: (value: SetStateAction<Mood[]>) => void\n}\nconst MoodSlider:React.FC<SliderProps> = ({moods, setMoods}) => {\n  const deleteHandler = (moodName: string) => {\n    setMoods(moods.filter(mood => mood.mood !== moodName))\n  }\n  const sliderChange = (moodName:string) => (value: number) => {\n    setMoods(moods => moods.map(mood => {\n      if(mood.mood === moodName) {\n        return {mood: mood.mood, moodRating: value}\n      } else {\n        return mood\n      }\n    }))\n  }\n  return (\n    <Center flexDirection={\"column\"} w={\"100%\"} mt={0} mb={0} >\n      {moods.map(({mood,moodRating}) => \n        <MoodEntry \n          mood={mood} \n          key={mood}\n          deleteHandler={() => deleteHandler(mood)}\n          sliderChange={sliderChange(mood)} \n          moodRating={moodRating} \n        />\n      )\n      }\n    </Center>\n  )\n}\nconst MoodEntry: React.FC<MoodEntryProps> =\n  ( {deleteHandler,mood, moodRating, sliderChange}: MoodEntryProps ) => {\n    const {currentQuestion} = UseThoughtRecord() \n    const [isDeleting, setIsDeleting] = useState(false)\n    const animateThenDelete = (deleteHandler: () => void) => {\n      setIsDeleting(true)\n      setTimeout(deleteHandler, 500)\n    }\n    const {foregroundColor} = UseThemeColors()\n    return (\n      <>\n        <Fade in={!isDeleting} transition={{enter: {duration: .5}, exit: {duration:.5}}}\n          style={{flexDirection: \"column\" , alignItems:\"center\", display:\"flex\", height:\"auto\",width:\"100%\"}} > \n          <Box w={{base:\"full\", lg:\"50%\"}} my={3} alignSelf={\"center\"}>\n            <HStack rounded={\"2xl\"} mx={3} pl={2} minH={20} pr={1} bg={foregroundColor} justifyContent={\"center\"}>\n              <VStack ml={2} spacing={2} p={1} w={\"100%\"}>\n                <Text w={\"100%\"} textAlign={\"left\"}>\n                  {mood} \n                </Text>\n                <Slider colorScheme={sliderColor(moodRating).slice(0,-4)} ml={2} mr={1} mb={2} onChange={(value) => sliderChange(value)} value={moodRating}>\n                  <SliderTrack>\n                    <SliderFilledTrack />\n                  </SliderTrack>\n                  <Tooltip\n                    hasArrow\n                    zIndex={-9999}\n                    fontSize={\"sm\"}\n                    bg={sliderColor(moodRating)}\n                    color='white'\n                    placement='right'\n                    isOpen={!isDeleting}\n                    label={`${moodRating}%`}\n                  > \n                    <SliderThumb bg=\"teal.400\"/>\n                  </Tooltip>\n                </Slider>\n              </VStack>\n              {currentQuestion !== \"reratemoods\" ? \n                <DeleteButton deleteHandler={() => animateThenDelete(deleteHandler)} /> : null}\n             \n            </HStack>\n          </Box>\n        </Fade>\n      </>\n    )\n  }\nconst DeleteButton : React.FC<ButtonProps> = ({deleteHandler}) => {\n  return (\n    <IconButton \n      color={\"black\"}\n      aria-label='Delete Mood' \n      variant='ghost'\n      size={\"lg\"}\n      icon={<CloseIcon/>}\n      onClick={deleteHandler}/>\n  )\n}\n\nexport default MoodSlider\n","import {CreatableSelect, ActionMeta} from 'chakra-react-select'\nimport { Dispatch, SetStateAction } from 'react'\nimport {Button,Box, FormLabel, Heading, SlideFade, transition} from '@chakra-ui/react'\nimport {useState } from 'react'\nimport { Mood } from './types'\nimport MoodList from './MoodSlider'\nimport UseThemeColors from '../Hooks/useThemeColors'\nimport useThoughtRecord from '../Hooks/UseThoughtRecord'\n\ntype Option = {\n  value: string,\n  label: string\n}\ninterface SelectOption {\n  label: string,\n  value: string\n}\ninterface RecordProps {\n  moods: Mood[],\n  setMoods: Dispatch<SetStateAction<Mood[]>>,\n  selectOptions: SelectOption[],\n  label:string,\n  isSubmitting: boolean\n}\n\nconst SelectQuestion: React.FC<RecordProps> = ({isSubmitting, moods,setMoods, selectOptions,label}: RecordProps) => {\n  const {foregroundColor} = UseThemeColors()\n  const {currentQuestion} = useThoughtRecord()\n  const [selectedMood, setSelectedMood] = useState<string>(\"\")\n\n  const addMood = (mood: string) => {\n    if(!(moods.map(mood => mood.mood)).includes(mood) && mood) {\n      setMoods([...moods, {mood: mood, moodRating: 0}])\n    }\n  }\n  const handleChange = (option: Option | null, actionMeta: ActionMeta<Option>) => {\n    if(option) {\n      setSelectedMood(option.value)\n    }\n  }\n  return (\n    <>\n      {currentQuestion !== \"reratemoods\" ?\n        <SlideFade offsetY={0} offsetX={50} \n          transition={{enter: {delay: 0.2, duration: .5}, exit: {delay: 0.4, duration: .5}}}\n          style={{flexDirection: \"column\" , alignItems:\"center\", display:\"flex\", height:\"auto\",width:\"100%\"}} \n          in={!isSubmitting} > \n          <Box p={2} w={\"92%\"} mt={6} mb={2} mx={7} >\n            <FormLabel mb={2} color={\"white\"} fontSize={14}> {label}  </FormLabel>\n            <CreatableSelect\n              size='md'\n              onChange={handleChange}\n              options={selectOptions}\n            />\n          </Box>\n          <Button alignSelf={'center'} bg={\"white\"} onClick={() => addMood(selectedMood)} w={\"60%\"} minH={10} my={6}> Add </Button>\n        </SlideFade>\n        : <Heading> {label} </Heading>}\n      \n      <MoodList moods={moods} setMoods={setMoods} />\n     \n    </>\n  )\n}\n\n\nexport default SelectQuestion","\nimport {Center, Heading, Container} from '@chakra-ui/react'\nimport UseThemeColors from '../Hooks/useThemeColors'\n\ninterface HotThoughtProps {\n  thoughts: string[],\n  onSelect: (value: string) => void,\n  selected: string\n} \n\nconst HotThoughtSelect: React.FC<HotThoughtProps> = ({thoughts, onSelect, selected }) => {\n  const {foregroundColor} = UseThemeColors()\n  return (\n    <>\n      <Heading mt={4} mx={4} textAlign={\"center\"}> Choose the Hot Thought </Heading>\n      <Center p={4} flexDirection={\"column\"} mx={2} w={\"100%\"} minHeight={\"50vh\"} justifyContent={\"space-evenly\"}>\n        {thoughts.map(thought => {\n          return (  \n            <Center \n              key={thought}\n              p={2}\n              rounded={\"2xl\"} \n              fontSize={14}\n              color={selected === thought ? foregroundColor : \"black\"} \n              minH={\"10vh\"} \n              width={\"90%\"} \n              bg={selected === thought ? \"red.500\" : foregroundColor} \n              onClick={()=> onSelect(thought)}>\n              {thought}\n            </Center>\n          )\n        })}\n      </Center>\n    </>\n  )\n}\n\nexport default HotThoughtSelect","import { useEffect, useState } from 'react'\nimport partialThoughtData from './../Data/thoughts.json'\nimport SelectQuestion from './SelectQuestion'\nimport {Mood} from './types'\nimport {Button, SlideFade} from '@chakra-ui/react'\nimport HotThoughtSelect from './HotThoughtSelect'\nimport UseThoughtRecord from '../Hooks/UseThoughtRecord'\nimport UseThemeColors from '../Hooks/useThemeColors'\nimport LoadingTextField from './LoadingTextField'\n\nconst ThoughtQuestion = () => {\n  const thoughtData = partialThoughtData.map(thought => ({...thought, value: thought.label}))\n  const [thoughts, setThoughts] = useState<Mood[]>([])\n  const [selected, SetSelected] = useState<string>(\"\")\n  const {label, onSubmit, isSubmitting, thoughtRecord} = UseThoughtRecord()\n  const [doneThoughts, setDoneThoughts] = useState<Boolean>(false)\n  const {foregroundColor} = UseThemeColors()\n  const onSelect = (value: string) => {\n    SetSelected(value)\n  }\n  useEffect (() => {\n    console.log(thoughtRecord)\n    if(thoughtRecord?.thoughts) {\n      setThoughts(thoughtRecord.thoughts.thoughts)\n    }\n  },[thoughtRecord, setThoughts])\n  const handleMoodSubmit = () => {\n    if(!doneThoughts) {\n      setDoneThoughts(true)\n    } else {\n      if(selected) {\n        onSubmit({thoughts: thoughts, hotThought: selected})\n      }\n    }\n  }\n  const thoughtIDs = thoughts.map(thought => thought.mood)\n  if(!thoughtRecord) {\n    return <LoadingTextField/>\n  }\n  return (\n    <>\n      { !doneThoughts \n        ?\n        <SelectQuestion \n          moods={thoughts} \n          isSubmitting={isSubmitting}\n          setMoods={setThoughts} \n          selectOptions={thoughtData} \n          label={label}\n        /> \n        : \n        <SlideFade in={!isSubmitting} offsetY={-100} transition={{enter: {delay: 0.3, duration: 0.5}, exit: {delay: 0.5, duration: 0.5}}}\n          style={{flexDirection: \"column\" , alignItems:\"center\", display:\"flex\", minHeight:\"50%\",width:\"100%\"}}>\n          <HotThoughtSelect thoughts={thoughtIDs} onSelect={onSelect} selected={selected} /> \n        </SlideFade>\n      }\n      {thoughts.length > 0 ?\n        <SlideFade offsetY={50} transition={{enter: {delay: 0.4, duration: 0.5}, exit:{delay: 0.3, duration: 0.5}}} style={{flexDirection: \"column\" , alignItems:\"center\", display:\"flex\", minHeight:\"auto\",width:\"100%\"}} in={!isSubmitting}>\n          <Button \n            mb={2}\n            minH={10}\n            w=\"60%\"\n            mt={8}\n            isLoading={isSubmitting}\n            bg={foregroundColor}\n            loadingText={\"Submitting\"}\n            onClick={handleMoodSubmit} \n          >Submit </Button> </SlideFade>\n        : null}\n        \n    </>\n    \n  )\n}\n\nexport default ThoughtQuestion","export type Mood = {\n  mood: string,\n  moodRating: number\n}\nexport const isKeyOfThoughtRecord = \n  (question: string, thoughtRecord: ThoughtRecord): question is keyof ThoughtRecord => {\n    return question in thoughtRecord\n  }\nconst thoughtRecordKeys =\n [\n   \"key\",\n   \"emotion\",\n   \"userKey\",\n   \"timeCreated\",\n   \"mood\",\n   \"thoughts\",\n   \"answer\",\n   \"rerateemotion\",\n   \"situationquestion\",\n   \"evidencefor\",\n   \"evidenceagainst\", \"alternativethought\"\n ]\n\n\nexport interface Thoughts {\n  thoughts: Mood[],\n  hotThought: string\n}\n\nexport const isThoughtRecord = (record: any): record is ThoughtRecord => {\n  if(record) {\n    return \"timeCreated\" in record \n  } \n  return false\n}\nexport const isFullThoughtRecord = (record: any): record is FullThoughtRecord => {\n  if(!record) {\n    return false\n  }\n  const keys = Object.keys(record)\n  for(let key of keys) {\n    if(!thoughtRecordKeys.includes(key)) {\n      return false\n    } \n  }\n  return true\n}\n  \n\n\nexport type FullThoughtRecord = Required<ThoughtRecord>\n\nexport interface ThoughtRecord {\n  userKey: string\n  key: string\n  timeCreated: number,\n  emotion?:string,\n  mood?: Mood[],\n  thoughts?: Thoughts \n  answer?: string,\n  rerateemotion?: string,\n  situationquestion?: string,\n  evidencefor?: string,\n  evidenceagainst?: string\n  alternativethought?: Mood[]\n}  ","import { useToast } from \"@chakra-ui/react\"\nimport { useEffect, useState } from \"react\"\nimport { useLocation, useNavigate } from \"react-router-dom\"\nimport { Mood, Thoughts, ThoughtRecord, isThoughtRecord } from \"../Components/types\"\nimport { getToken } from \"../utils/api\"\nimport {useThoughtRecordApi} from './useThoughtRecordApi'\n\ninterface UseThoughtRecordReturn {\n  label: string,\n  onSubmit: (data: FormValues) => void, \n  isSubmitting: boolean, \n  currentQuestion: string,\n  thoughtRecord: ThoughtRecord | undefined}\n\nconst question = [\n  \"/emotion\",\n  \"/situationquestion\",\n  \"/mood\",\n  \"/thoughts\",\n  \"/evidencefor\",\n  \"/evidenceagainst\",\n  \"/alternativethought\",\n  \"/rerateemotion\",\n  \"/thoughtrecord\"\n] as const\n\nexport type QuestionType = typeof question[number]\n\nconst thoughtRecordData = {\n  \"/emotion\": {label:\"How do you feel?\", type:\"Emotion\"},\n  \"/situationquestion\": {label:\"What is the Situation?\", type: \"Text\"},\n  \"/mood\": {label:\"Add any emotions you felt and rate them\", type: \"Mood\"},\n  \"/thoughts\": {label:\"List any thoughts and rate your Belief\", type: \"Thoughts\"},\n  \"/evidencefor\":{label: \"What is the Evidence for\", type: \"Text\"},\n  \"/evidenceagainst\": {label:\"What is the Evidence Against\", type: \"Text\"},\n  \"/alternativethought\":{label: \"\", type: \"Text\"},\n  \"/rerateemotion\": {label:\"How Do you feel now?\",type:\"Emotion\"},\n  \"/thoughtrecord\": {label:\"something\", type:\"Submit\"}\n} \n\nexport type FormValues = String | Mood[] | Thoughts  \n\nconst isQuestion = (pathname: any): pathname is QuestionType => {\n  return(question.includes(pathname))\n}\n\nconst UseThoughtRecord = (): UseThoughtRecordReturn | never => {\n  const toast = useToast()\n  const navigate = useNavigate()\n  const {pathname, state} = useLocation()\n  const [thoughtRecord, setThoughtRecord] = useState<ThoughtRecord>()\n  const {updateThoughtRecord, getActiveThoughtRecord, isSubmitting} = useThoughtRecordApi()\n  const token = getToken()\n  if(!token) {\n    throw Error\n  } \n \n  useEffect(() => {\n    \n    const getThoughtRecord = async () => {\n      if(!thoughtRecord) {\n        if(isThoughtRecord(state)) {\n          setThoughtRecord(state)\n        } else {\n          setThoughtRecord(await getActiveThoughtRecord(token))\n        }\n      }\n    }\n    if(!isSubmitting) {\n      getThoughtRecord()\n    }\n  },[getActiveThoughtRecord, isSubmitting, state, thoughtRecord, token])\n  \n  const onSubmit = async (data: FormValues) => {\n    if(isQuestion(pathname)) {\n      const updateKey = pathname.slice(1)\n      const activeThoughtRecord: string = isThoughtRecord(thoughtRecord) ? thoughtRecord.key : \"\" \n      const NextLinkIndex = question.indexOf(pathname) + 1\n      \n     \n      try {\n        const updatedRecord = await updateThoughtRecord(data, activeThoughtRecord, token, updateKey)\n        \n        navigate(question[NextLinkIndex],{state: {...updatedRecord}})\n      } catch {\n        toast({\n          status: 'error', \n          description: 'problem with update'\n        })\n      }\n    }}\n  let label: string = \"\" \n  let currentQuestion: string = \"\"\n  if(isQuestion(pathname)) {\n    \n    label = thoughtRecordData[pathname].label\n    currentQuestion = pathname.slice(1)\n  }\n  \n  return {\n    label: label, \n    onSubmit: onSubmit, \n    isSubmitting: isSubmitting,\n    currentQuestion: currentQuestion, \n    thoughtRecord: thoughtRecord\n  }\n}\nexport default UseThoughtRecord","import { useEffect, useState } from \"react\"\nimport {QuestionType, FormValues} from \"./UseThoughtRecord\"\nimport {thoughtRecordEndPoint, getAuthHeader, getUserEndPoint, getToken} from \"../utils/api\"\nimport useAuth, { Token, User } from \"./useAuth\"\nimport {ThoughtRecord, isThoughtRecord} from '../Components/types'\nimport { useToast } from \"@chakra-ui/react\"\n/* returns a function that takes in the current path and active thought record \nto update and a piece of state that shows if the data is currently being fetched */\n\nexport const useThoughtRecordApi = () => {\n  const {logout} = useAuth() \n  const toast = useToast()\n  const authHeader = getAuthHeader()  \n  const [isSubmitting, setIsSubmitting] = useState(false)\n  \n  const handleFetch = async (endPoint: string, fetchOptions: RequestInit) => {\n    if(isSubmitting) {\n      return\n    } \n    await setIsSubmitting(true)\n    const response = await fetch(endPoint, fetchOptions)\n    if(response.ok) {\n      const data = await response.json()\n      setIsSubmitting(false)\n      return data\n    }\n    if(response.status === 401 || 403) {\n      logout()\n    } else throw Error(response.statusText)\n  \n  }\n\n  const getActiveThoughtRecord = async(token:Token): Promise<ThoughtRecord> => {\n    const data = await handleFetch(thoughtRecordEndPoint,authHeader)\n    if(isThoughtRecord(data)) {\n      return data\n    }\n    throw Error(\"not a thought record\") \n  }\n  const getNewThoughtRecord = async (token:Token): Promise<ThoughtRecord> => {\n    const options = {method: \"POST\", ...authHeader}\n    const thoughtRecord = await handleFetch(thoughtRecordEndPoint, options)\n   \n    if(isThoughtRecord(thoughtRecord)) {\n      return thoughtRecord\n    } else {\n      throw Error('response isnt valid')\n    }   \n  }\n  const updateThoughtRecord = async (\n    data: FormValues\n    , activeThoughtRecord: string, token: Token, updateKey: string) => {\n    const updateOptions: RequestInit = {\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        ...authHeader.headers\n      },\n      method: \"PATCH\"\n    }\n    updateOptions.body = JSON.stringify({[updateKey]: data})\n    return await handleFetch(`${thoughtRecordEndPoint}/${activeThoughtRecord}`, updateOptions)\n  \n  }    \n  return {updateThoughtRecord, getActiveThoughtRecord, getNewThoughtRecord,isSubmitting}\n}\n\n\n\n"],"names":["sliderColor","value","MoodEntry","deleteHandler","mood","moodRating","sliderChange","currentQuestion","UseThoughtRecord","useState","isDeleting","setIsDeleting","foregroundColor","UseThemeColors","in","transition","enter","duration","exit","style","flexDirection","alignItems","display","height","width","w","base","lg","my","alignSelf","rounded","mx","pl","minH","pr","bg","justifyContent","ml","spacing","p","textAlign","colorScheme","slice","mr","mb","onChange","hasArrow","zIndex","fontSize","color","placement","isOpen","label","DeleteButton","setTimeout","animateThenDelete","variant","size","icon","onClick","moods","setMoods","mt","map","moodName","filter","isSubmitting","selectOptions","useThoughtRecord","selectedMood","setSelectedMood","offsetY","offsetX","delay","option","actionMeta","options","includes","thoughts","onSelect","selected","minHeight","thought","thoughtData","partialThoughtData","setThoughts","SetSelected","onSubmit","thoughtRecord","doneThoughts","setDoneThoughts","useEffect","console","log","thoughtIDs","SelectQuestion","length","isLoading","loadingText","hotThought","LoadingTextField","isKeyOfThoughtRecord","question","thoughtRecordKeys","isThoughtRecord","record","isFullThoughtRecord","Object","keys","key","thoughtRecordData","type","isQuestion","pathname","toast","useToast","navigate","useNavigate","useLocation","state","setThoughtRecord","logout","useAuth","authHeader","getAuthHeader","setIsSubmitting","handleFetch","endPoint","fetchOptions","fetch","response","ok","json","data","status","Error","statusText","getActiveThoughtRecord","token","thoughtRecordEndPoint","getNewThoughtRecord","method","updateThoughtRecord","activeThoughtRecord","updateKey","updateOptions","headers","body","JSON","stringify","useThoughtRecordApi","getToken","getThoughtRecord","NextLinkIndex","indexOf","updatedRecord","description"],"sourceRoot":""}