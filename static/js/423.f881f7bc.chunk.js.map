{"version":3,"file":"static/js/423.f881f7bc.chunk.js","mappings":"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","sources":["Components/SelectQuestion.tsx","Components/HotThoughtSelect.tsx","Components/ThoughtQuestion.tsx"],"sourcesContent":["import { CreatableSelect, ActionMeta } from 'chakra-react-select'\nimport { Dispatch, SetStateAction } from 'react'\nimport { Button, Box, FormLabel, Heading, SlideFade } from '@chakra-ui/react'\nimport { useState } from 'react'\nimport { Mood } from './types'\nimport MoodList from './MoodSlider'\nimport useThoughtRecord from '../Hooks/UseThoughtRecord'\n\ntype Option = {\n\tvalue: string\n\tlabel: string\n}\ninterface SelectOption {\n\tlabel: string\n\tvalue: string\n}\ninterface RecordProps {\n\tmoods: Mood[]\n\tsetMoods: Dispatch<SetStateAction<Mood[]>>\n\tselectOptions: SelectOption[]\n\tlabel: string\n\tisSubmitting: boolean\n}\n\nconst SelectQuestion: React.FC<RecordProps> = ({\n\tisSubmitting,\n\tmoods,\n\tsetMoods,\n\tselectOptions,\n\tlabel,\n}: RecordProps) => {\n\tconst { currentQuestion } = useThoughtRecord()\n\tconst [selectedMood, setSelectedMood] = useState<string>('')\n\n\tconst addMood = (mood: string) => {\n\t\tif (!moods.map((mood) => mood.mood).includes(mood) && mood) {\n\t\t\tsetMoods([...moods, { mood: mood, moodRating: 0 }])\n\t\t}\n\t}\n\tconst handleChange = (\n\t\toption: Option | null,\n\t\tactionMeta: ActionMeta<Option>,\n\t) => {\n\t\tif (option) {\n\t\t\tsetSelectedMood(option.value)\n\t\t}\n\t}\n\treturn (\n\t\t<>\n\t\t\t{currentQuestion !== 'reratemoods' ? (\n\t\t\t\t<SlideFade\n\t\t\t\t\toffsetY={0}\n\t\t\t\t\toffsetX={50}\n\t\t\t\t\ttransition={{\n\t\t\t\t\t\tenter: { delay: 0.2, duration: 0.5 },\n\t\t\t\t\t\texit: { delay: 0.4, duration: 0.5 },\n\t\t\t\t\t}}\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tflexDirection: 'column',\n\t\t\t\t\t\talignItems: 'center',\n\t\t\t\t\t\tdisplay: 'flex',\n\t\t\t\t\t\theight: 'auto',\n\t\t\t\t\t\twidth: '100%',\n\t\t\t\t\t}}\n\t\t\t\t\tin={!isSubmitting}\n\t\t\t\t>\n\t\t\t\t\t<Box p={2} w={'92%'} mt={6} mb={2} mx={7}>\n\t\t\t\t\t\t<FormLabel mb={2} color={'white'} fontSize={14}>\n\t\t\t\t\t\t\t{label}\n\t\t\t\t\t\t</FormLabel>\n\t\t\t\t\t\t<CreatableSelect\n\t\t\t\t\t\t\tsize=\"md\"\n\t\t\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\t\t\toptions={selectOptions}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Box>\n\t\t\t\t\t<Button\n\t\t\t\t\t\talignSelf={'center'}\n\t\t\t\t\t\tonClick={() => addMood(selectedMood)}\n\t\t\t\t\t\tw={'60%'}\n\t\t\t\t\t\tminH={10}\n\t\t\t\t\t\tmy={6}\n\t\t\t\t\t>\n\t\t\t\t\t\tAdd\n\t\t\t\t\t</Button>\n\t\t\t\t</SlideFade>\n\t\t\t) : (\n\t\t\t\t<Heading> {label} </Heading>\n\t\t\t)}\n\n\t\t\t<MoodList moods={moods} setMoods={setMoods} />\n\t\t</>\n\t)\n}\n\nexport default SelectQuestion\n","import { Center, Heading } from '@chakra-ui/react'\nimport UseThemeColors from '../Hooks/useThemeColors'\n\ninterface HotThoughtProps {\n\tthoughts: string[]\n\tonSelect: (value: string) => void\n\tselected: string\n}\n\nconst HotThoughtSelect: React.FC<HotThoughtProps> = ({\n\tthoughts,\n\tonSelect,\n\tselected,\n}) => {\n\tconst { foregroundColor } = UseThemeColors()\n\treturn (\n\t\t<>\n\t\t\t<Heading mt={4} mx={4} textAlign={'center'}>\n\t\t\t\tChoose the Hot Thought\n\t\t\t</Heading>\n\t\t\t<Center\n\t\t\t\tp={4}\n\t\t\t\tflexDirection={'column'}\n\t\t\t\tmx={2}\n\t\t\t\tw={'100%'}\n\t\t\t\tminHeight={'50vh'}\n\t\t\t\tjustifyContent={'space-evenly'}\n\t\t\t>\n\t\t\t\t{thoughts.map((thought) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<Center\n\t\t\t\t\t\t\tkey={thought}\n\t\t\t\t\t\t\tp={2}\n\t\t\t\t\t\t\trounded={'2xl'}\n\t\t\t\t\t\t\tfontSize={14}\n\t\t\t\t\t\t\tcolor={selected === thought ? 'white' : 'inital'}\n\t\t\t\t\t\t\tminH={'10vh'}\n\t\t\t\t\t\t\twidth={'90%'}\n\t\t\t\t\t\t\tbg={selected === thought ? 'red.500' : foregroundColor}\n\t\t\t\t\t\t\tonClick={() => onSelect(thought)}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{thought}\n\t\t\t\t\t\t</Center>\n\t\t\t\t\t)\n\t\t\t\t})}\n\t\t\t</Center>\n\t\t</>\n\t)\n}\n\nexport default HotThoughtSelect\n","import { useEffect, useState } from 'react'\nimport partialThoughtData from './../Data/thoughts.json'\nimport SelectQuestion from './SelectQuestion'\nimport { Mood } from './types'\nimport { Button, SlideFade } from '@chakra-ui/react'\nimport HotThoughtSelect from './HotThoughtSelect'\nimport UseThoughtRecord from '../Hooks/UseThoughtRecord'\nimport UseThemeColors from '../Hooks/useThemeColors'\nimport LoadingTextField from './LoadingTextField'\n\nconst ThoughtQuestion = () => {\n\tconst thoughtData = partialThoughtData.map((thought) => ({\n\t\t...thought,\n\t\tvalue: thought.label,\n\t}))\n\tconst [thoughts, setThoughts] = useState<Mood[]>([])\n\tconst [selected, SetSelected] = useState<string>('')\n\tconst { label, onSubmit, isSubmitting, thoughtRecord } = UseThoughtRecord()\n\tconst [doneThoughts, setDoneThoughts] = useState<Boolean>(false)\n\tconst { foregroundColor } = UseThemeColors()\n\tconst onSelect = (value: string) => {\n\t\tSetSelected(value)\n\t}\n\tuseEffect(() => {\n\t\tif (thoughtRecord?.thoughts) {\n\t\t\tsetThoughts(thoughtRecord.thoughts.thoughts)\n\t\t}\n\t}, [thoughtRecord, setThoughts])\n\tconst handleMoodSubmit = () => {\n\t\tif (!doneThoughts) {\n\t\t\tsetDoneThoughts(true)\n\t\t} else {\n\t\t\tif (selected) {\n\t\t\t\tonSubmit({ thoughts: thoughts, hotThought: selected })\n\t\t\t}\n\t\t}\n\t}\n\tconst thoughtIDs = thoughts.map((thought) => thought.mood)\n\tif (!thoughtRecord) {\n\t\treturn <LoadingTextField />\n\t}\n\treturn (\n\t\t<>\n\t\t\t{!doneThoughts ? (\n\t\t\t\t<SelectQuestion\n\t\t\t\t\tmoods={thoughts}\n\t\t\t\t\tisSubmitting={isSubmitting}\n\t\t\t\t\tsetMoods={setThoughts}\n\t\t\t\t\tselectOptions={thoughtData}\n\t\t\t\t\tlabel={label}\n\t\t\t\t/>\n\t\t\t) : (\n\t\t\t\t<SlideFade\n\t\t\t\t\tin={!isSubmitting}\n\t\t\t\t\toffsetY={-100}\n\t\t\t\t\ttransition={{\n\t\t\t\t\t\tenter: { delay: 0.3, duration: 0.5 },\n\t\t\t\t\t\texit: { delay: 0.5, duration: 0.5 },\n\t\t\t\t\t}}\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tflexDirection: 'column',\n\t\t\t\t\t\talignItems: 'center',\n\t\t\t\t\t\tdisplay: 'flex',\n\t\t\t\t\t\tminHeight: '50%',\n\t\t\t\t\t\twidth: '100%',\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t<HotThoughtSelect\n\t\t\t\t\t\tthoughts={thoughtIDs}\n\t\t\t\t\t\tonSelect={onSelect}\n\t\t\t\t\t\tselected={selected}\n\t\t\t\t\t/>\n\t\t\t\t</SlideFade>\n\t\t\t)}\n\t\t\t{thoughts.length > 0 ? (\n\t\t\t\t<SlideFade\n\t\t\t\t\toffsetY={50}\n\t\t\t\t\ttransition={{\n\t\t\t\t\t\tenter: { delay: 0.4, duration: 0.5 },\n\t\t\t\t\t\texit: { delay: 0.3, duration: 0.5 },\n\t\t\t\t\t}}\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tflexDirection: 'column',\n\t\t\t\t\t\talignItems: 'center',\n\t\t\t\t\t\tdisplay: 'flex',\n\t\t\t\t\t\tminHeight: 'auto',\n\t\t\t\t\t\twidth: '100%',\n\t\t\t\t\t}}\n\t\t\t\t\tin={!isSubmitting}\n\t\t\t\t>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tmb={2}\n\t\t\t\t\t\tminH={10}\n\t\t\t\t\t\tw=\"60%\"\n\t\t\t\t\t\tmt={8}\n\t\t\t\t\t\tisLoading={isSubmitting}\n\t\t\t\t\t\tbg={foregroundColor}\n\t\t\t\t\t\tloadingText={'Submitting'}\n\t\t\t\t\t\tonClick={handleMoodSubmit}\n\t\t\t\t\t>\n\t\t\t\t\t\tSubmit\n\t\t\t\t\t</Button>\n\t\t\t\t</SlideFade>\n\t\t\t) : null}\n\t\t</>\n\t)\n}\n\nexport default ThoughtQuestion\n"],"names":["isSubmitting","moods","setMoods","selectOptions","label","currentQuestion","useThoughtRecord","useState","selectedMood","setSelectedMood","offsetY","offsetX","transition","enter","delay","duration","exit","style","flexDirection","alignItems","display","height","width","in","p","w","mt","mb","mx","color","fontSize","size","onChange","option","actionMeta","value","options","alignSelf","onClick","mood","map","includes","moodRating","minH","my","thoughts","onSelect","selected","foregroundColor","UseThemeColors","textAlign","minHeight","justifyContent","thought","rounded","bg","thoughtData","partialThoughtData","setThoughts","SetSelected","UseThoughtRecord","onSubmit","thoughtRecord","doneThoughts","setDoneThoughts","useEffect","thoughtIDs","SelectQuestion","length","isLoading","loadingText","hotThought","LoadingTextField"],"sourceRoot":""}