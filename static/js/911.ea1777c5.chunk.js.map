{"version":3,"file":"static/js/911.ea1777c5.chunk.js","mappings":"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","sources":["Components/ThoughtRecordDisplay/HotThoughtDisplay.tsx","Components/ThoughtRecordQuestions/AccordianElement.tsx","Components/ThoughtRecordQuestions/AlternativeThought.tsx","Components/ThoughtRecordQuestions/ArgumentAccordion.tsx","Components/ThoughtRecordQuestions/MoodSlider.tsx","Hooks/UseThoughtRecord.tsx","Hooks/useThoughtRecordApi.tsx"],"sourcesContent":["import { Badge, Center, VStack } from '@chakra-ui/react'\ninterface Props {\n\thotThought: string\n}\n\nconst HotThoughtDisplay: React.FC<Props> = ({ hotThought }) => {\n\treturn (\n\t\t<VStack w={'full'} spacing={-1}>\n\t\t\t<Badge\n\t\t\t\talignSelf={'end'}\n\t\t\t\tmy={2}\n\t\t\t\tmr={6}\n\t\t\t\tcolorScheme=\"red\"\n\t\t\t\tvariant={'solid'}\n\t\t\t>\n\t\t\t\tHot Thought\n\t\t\t</Badge>\n\t\t\t<Center\n\t\t\t\tcolor={'white'}\n\t\t\t\tbg={'red.500'}\n\t\t\t\tp={2}\n\t\t\t\talignSelf={'center'}\n\t\t\t\tw={{ base: '90%', lg: '93%' }}\n\t\t\t\ttextAlign={'center'}\n\t\t\t\tminH={{ base: '80px', lg: '20vh' }}\n\t\t\t\trounded={'2xl'}\n\t\t\t>\n\t\t\t\t{hotThought}\n\t\t\t</Center>\n\t\t</VStack>\n\t)\n}\n\nexport default HotThoughtDisplay\n","import {\n\tAccordionItem,\n\tAccordionButton,\n\tBox,\n\tAccordionIcon,\n\tAccordionPanel,\n\tHeading,\n} from '@chakra-ui/react'\n\ninterface PopoverButtonProps {\n\tlabel: string\n\tpopoverText: string\n}\n\nconst AccordionElement: React.FC<PopoverButtonProps> = ({\n\tlabel,\n\tpopoverText,\n}) => {\n\treturn (\n\t\t<AccordionItem\n\t\t\talignSelf={'center'}\n\t\t\tmy={2}\n\t\t\tml={{ base: 5, lg: 0 }}\n\t\t\tw={{ base: '90%', lg: '100%' }}\n\t\t>\n\t\t\t<Heading>\n\t\t\t\t<AccordionButton>\n\t\t\t\t\t<Box flex=\"1\" textAlign=\"left\">\n\t\t\t\t\t\t{label}\n\t\t\t\t\t</Box>\n\t\t\t\t\t<AccordionIcon />\n\t\t\t\t</AccordionButton>\n\t\t\t</Heading>\n\t\t\t<AccordionPanel color=\"white\" p={4}>\n\t\t\t\t{popoverText}\n\t\t\t</AccordionPanel>\n\t\t</AccordionItem>\n\t)\n}\n\nexport default AccordionElement\n","import {\n\tBox,\n\tHeading,\n\tVStack,\n\tTextarea,\n\tButton,\n\tSlideFade,\n\tLightMode,\n} from '@chakra-ui/react'\nimport { useEffect, useState } from 'react'\nimport useThoughtRecord from '../../Hooks/UseThoughtRecord'\nimport useThemeColors from '../../Hooks/useThemeColors'\nimport ArgumentButtons from './ArgumentAccordion'\nimport MoodSlider from './MoodSlider'\nimport { Mood } from '../../types'\nimport LoadingTextField from '../Loading/LoadingTextField'\nimport HotThoughtDisplay from '../ThoughtRecordDisplay/HotThoughtDisplay'\n\nconst AlternativeThought: React.FC = () => {\n\tconst { foregroundColor, textColor } = useThemeColors()\n\tconst [balancedThought, setBalancedThought] = useState<string>('')\n\tconst [moods, setMoods] = useState<Mood[]>([])\n\tconst { onSubmit, thoughtRecord, isSubmitting, isValidQuestion } =\n\t\tuseThoughtRecord()\n\n\tuseEffect(() => {\n\t\tif (thoughtRecord?.alternativethought) {\n\t\t\tsetMoods(thoughtRecord.alternativethought)\n\t\t}\n\t}, [thoughtRecord, setMoods])\n\n\tconst argFor = thoughtRecord?.evidencefor ? thoughtRecord.evidencefor : ''\n\tconst argAgainst = thoughtRecord?.evidenceagainst\n\t\t? thoughtRecord.evidenceagainst\n\t\t: ''\n\tconst argumentsText = { argFor: argFor, argAgainst: argAgainst }\n\tconst hotThought = thoughtRecord?.thoughts\n\t\t? thoughtRecord.thoughts.hotThought\n\t\t: ''\n\n\tconst handleOnChange: React.ChangeEventHandler<HTMLTextAreaElement> = (\n\t\tevent,\n\t) => {\n\t\tsetBalancedThought(event.target.value)\n\t}\n\n\tconst addMood = (mood: string) => {\n\t\tif (!moods.map((mood) => mood.mood).includes(mood) && mood) {\n\t\t\tsetMoods([...moods, { mood: mood, moodRating: 0 }])\n\t\t}\n\t\tsetBalancedThought('')\n\t}\n\n\tif (!thoughtRecord || !isValidQuestion) {\n\t\treturn <LoadingTextField />\n\t}\n\treturn (\n\t\t<VStack\n\t\t\toverflow={'visible'}\n\t\t\tmt={1}\n\t\t\tspacing={8}\n\t\t\tp={1}\n\t\t\th=\"full\"\n\t\t\tw={{ base: 'full', lg: 'full' }}\n\t\t>\n\t\t\t<Heading m={0} textAlign={'center'}>\n\t\t\t\tWrite a Balanced Thought\n\t\t\t</Heading>\n\t\t\t<SlideFade\n\t\t\t\tin={!isSubmitting}\n\t\t\t\tstyle={{\n\t\t\t\t\tflexDirection: 'column',\n\t\t\t\t\theight: 'full',\n\t\t\t\t\twidth: '95%',\n\t\t\t\t\tdisplay: 'flex',\n\t\t\t\t}}\n\t\t\t\ttransition={{\n\t\t\t\t\tenter: { duration: 0.5 },\n\t\t\t\t\texit: { duration: 0.5, delay: 0.5 },\n\t\t\t\t}}\n\t\t\t\toffsetY={0}\n\t\t\t\toffsetX={100}\n\t\t\t>\n\t\t\t\t<HotThoughtDisplay hotThought={hotThought} />\n\t\t\t</SlideFade>\n\t\t\t<SlideFade\n\t\t\t\tin={!isSubmitting}\n\t\t\t\tstyle={{\n\t\t\t\t\tflexDirection: 'column',\n\t\t\t\t\theight: 'full',\n\t\t\t\t\twidth: '95%',\n\t\t\t\t\tdisplay: 'flex',\n\t\t\t\t}}\n\t\t\t\ttransition={{\n\t\t\t\t\tenter: { duration: 0.5, delay: 0.3 },\n\t\t\t\t\texit: { duration: 0.5, delay: 0.3 },\n\t\t\t\t}}\n\t\t\t\toffsetY={0}\n\t\t\t\toffsetX={-100}\n\t\t\t>\n\t\t\t\t<ArgumentButtons argumentsText={argumentsText} />\n\t\t\t</SlideFade>\n\t\t\t<SlideFade\n\t\t\t\tin={!isSubmitting}\n\t\t\t\tstyle={{\n\t\t\t\t\tflexDirection: 'column',\n\t\t\t\t\talignContent: 'center',\n\t\t\t\t\theight: 'full',\n\t\t\t\t\twidth: '95%',\n\t\t\t\t\tdisplay: 'flex',\n\t\t\t\t}}\n\t\t\t\ttransition={{\n\t\t\t\t\tenter: { duration: 0.5, delay: 0.5 },\n\t\t\t\t\texit: { duration: 0.5 },\n\t\t\t\t}}\n\t\t\t\toffsetY={0}\n\t\t\t\toffsetX={100}\n\t\t\t>\n\t\t\t\t<LightMode>\n\t\t\t\t\t<Textarea\n\t\t\t\t\t\tcolor={textColor}\n\t\t\t\t\t\tonChange={handleOnChange}\n\t\t\t\t\t\tvalue={balancedThought}\n\t\t\t\t\t\tsize=\"lg\"\n\t\t\t\t\t\tp={1}\n\t\t\t\t\t\talignSelf={'center'}\n\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\tbg={foregroundColor}\n\t\t\t\t\t\tw={'90%'}\n\t\t\t\t\t\t_placeholder={{ color: textColor, textAlign: 'left', opacity: 0.8 }}\n\t\t\t\t\t\tplaceholder=\"Write some balanced thoughts\"\n\t\t\t\t\t/>\n\t\t\t\t</LightMode>\n\t\t\t\t<Button\n\t\t\t\t\tonClick={() => addMood(balancedThought)}\n\t\t\t\t\tbg={foregroundColor}\n\t\t\t\t\talignSelf={'center'}\n\t\t\t\t\tw={'60%'}\n\t\t\t\t\tminH={10}\n\t\t\t\t\tmb={4}\n\t\t\t\t\tmt={7}\n\t\t\t\t>\n\t\t\t\t\tAdd Thought\n\t\t\t\t</Button>\n\t\t\t</SlideFade>\n\n\t\t\t<MoodSlider moods={moods} setMoods={setMoods} />\n\t\t\t{moods.length > 0 ? (\n\t\t\t\t<Button\n\t\t\t\t\tminH={10}\n\t\t\t\t\tw=\"60%\"\n\t\t\t\t\tisLoading={isSubmitting}\n\t\t\t\t\tbg={foregroundColor}\n\t\t\t\t\tloadingText={'Submitting'}\n\t\t\t\t\tonClick={() => onSubmit(moods)}\n\t\t\t\t>\n\t\t\t\t\tSubmit\n\t\t\t\t</Button>\n\t\t\t) : null}\n\t\t\t<Box h={'10vh'} />\n\t\t</VStack>\n\t)\n}\n\nexport default AlternativeThought\n","import { Accordion } from '@chakra-ui/react'\nimport AccordionElement from './AccordianElement'\n\ninterface Arguments {\n\targFor: string\n\targAgainst: string\n}\n\ninterface Props {\n\targumentsText: Arguments\n}\nconst ArgumentAccordion: React.FC<Props> = ({ argumentsText }) => {\n\tconst { argFor, argAgainst } = argumentsText\n\treturn (\n\t\t<Accordion allowMultiple alignSelf={'center'} w={'100%'} allowToggle>\n\t\t\t<AccordionElement label={'Arguments For'} popoverText={argFor} />\n\t\t\t<AccordionElement label={'Arguments Against'} popoverText={argAgainst} />\n\t\t</Accordion>\n\t)\n}\n\nexport default ArgumentAccordion\n","import {\n\tTooltip,\n\tBox,\n\tSlider,\n\tText,\n\tIconButton,\n\tHStack,\n\tSliderFilledTrack,\n\tSliderThumb,\n\tSliderTrack,\n\tVStack,\n\tCenter,\n\tFade,\n} from '@chakra-ui/react'\nimport { CloseIcon } from '@chakra-ui/icons'\nimport { Mood } from '../../types'\nimport { SetStateAction, useState } from 'react'\nimport React from 'react'\nimport UseThemeColors from '../../Hooks/useThemeColors'\nimport UseThoughtRecord from '../../Hooks/UseThoughtRecord'\ninterface ButtonProps {\n\tdeleteHandler: React.MouseEventHandler<HTMLButtonElement>\n}\ninterface MoodEntryProps {\n\tmood: string\n\tmoodRating: number\n\tsliderChange: (value: number) => void\n\tdeleteHandler: () => void\n}\n\nexport const sliderColor = (value: number): string => {\n\tif (value < 25) {\n\t\treturn 'green.400'\n\t}\n\tif (value < 50) {\n\t\treturn 'yellow.600'\n\t}\n\tif (value < 75) {\n\t\treturn 'orange.400'\n\t}\n\treturn 'red.800'\n}\ninterface SliderProps {\n\tmoods: Mood[]\n\tsetMoods: (value: SetStateAction<Mood[]>) => void\n}\nconst MoodSlider: React.FC<SliderProps> = ({ moods, setMoods }) => {\n\tconst deleteHandler = (moodName: string) => {\n\t\tsetMoods(moods.filter((mood) => mood.mood !== moodName))\n\t}\n\tconst sliderChange = (moodName: string) => (value: number) => {\n\t\tsetMoods((moods) =>\n\t\t\tmoods.map((mood) => {\n\t\t\t\tif (mood.mood === moodName) {\n\t\t\t\t\treturn { mood: mood.mood, moodRating: value }\n\t\t\t\t} else {\n\t\t\t\t\treturn mood\n\t\t\t\t}\n\t\t\t}),\n\t\t)\n\t}\n\treturn (\n\t\t<Center flexDirection={'column'} w={'100%'} mt={0} mb={0}>\n\t\t\t{moods.map(({ mood, moodRating }) => (\n\t\t\t\t<MoodEntry\n\t\t\t\t\tmood={mood}\n\t\t\t\t\tkey={mood}\n\t\t\t\t\tdeleteHandler={() => deleteHandler(mood)}\n\t\t\t\t\tsliderChange={sliderChange(mood)}\n\t\t\t\t\tmoodRating={moodRating}\n\t\t\t\t/>\n\t\t\t))}\n\t\t</Center>\n\t)\n}\nconst MoodEntry: React.FC<MoodEntryProps> = ({\n\tdeleteHandler,\n\tmood,\n\tmoodRating,\n\tsliderChange,\n}: MoodEntryProps) => {\n\tconst { currentQuestion } = UseThoughtRecord()\n\tconst [isDeleting, setIsDeleting] = useState(false)\n\tconst animateThenDelete = (deleteHandler: () => void) => {\n\t\tsetIsDeleting(true)\n\t\tsetTimeout(deleteHandler, 500)\n\t}\n\tconst { foregroundColor } = UseThemeColors()\n\treturn (\n\t\t<>\n\t\t\t<Fade\n\t\t\t\tin={!isDeleting}\n\t\t\t\ttransition={{ enter: { duration: 0.5 }, exit: { duration: 0.5 } }}\n\t\t\t\tstyle={{\n\t\t\t\t\tflexDirection: 'column',\n\t\t\t\t\talignItems: 'center',\n\t\t\t\t\tdisplay: 'flex',\n\t\t\t\t\theight: 'auto',\n\t\t\t\t\twidth: '100%',\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<Box w={{ base: 'full', lg: '80%' }} my={3} alignSelf={'center'}>\n\t\t\t\t\t<HStack\n\t\t\t\t\t\trounded={'2xl'}\n\t\t\t\t\t\tmx={3}\n\t\t\t\t\t\tbg={foregroundColor}\n\t\t\t\t\t\tpl={2}\n\t\t\t\t\t\tminH={20}\n\t\t\t\t\t\tpr={1}\n\t\t\t\t\t\tjustifyContent={'center'}\n\t\t\t\t\t>\n\t\t\t\t\t\t<VStack ml={2} spacing={2} p={1} w={'100%'}>\n\t\t\t\t\t\t\t<Text w={'100%'} textAlign={'left'}>\n\t\t\t\t\t\t\t\t{mood}\n\t\t\t\t\t\t\t</Text>\n\t\t\t\t\t\t\t<Slider\n\t\t\t\t\t\t\t\tcolorScheme={sliderColor(moodRating).slice(0, -4)}\n\t\t\t\t\t\t\t\tml={2}\n\t\t\t\t\t\t\t\tmr={1}\n\t\t\t\t\t\t\t\tmb={2}\n\t\t\t\t\t\t\t\tonChange={(value) => sliderChange(value)}\n\t\t\t\t\t\t\t\tvalue={moodRating}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<SliderTrack>\n\t\t\t\t\t\t\t\t\t<SliderFilledTrack />\n\t\t\t\t\t\t\t\t</SliderTrack>\n\t\t\t\t\t\t\t\t<Tooltip\n\t\t\t\t\t\t\t\t\thasArrow\n\t\t\t\t\t\t\t\t\tzIndex={-9999}\n\t\t\t\t\t\t\t\t\tfontSize={'sm'}\n\t\t\t\t\t\t\t\t\tbg={sliderColor(moodRating)}\n\t\t\t\t\t\t\t\t\tcolor=\"white\"\n\t\t\t\t\t\t\t\t\tplacement=\"right\"\n\t\t\t\t\t\t\t\t\tisOpen={!isDeleting}\n\t\t\t\t\t\t\t\t\tlabel={`${moodRating}%`}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<SliderThumb bg=\"teal.400\" />\n\t\t\t\t\t\t\t\t</Tooltip>\n\t\t\t\t\t\t\t</Slider>\n\t\t\t\t\t\t</VStack>\n\t\t\t\t\t\t{currentQuestion !== 'reratemoods' ? (\n\t\t\t\t\t\t\t<DeleteButton\n\t\t\t\t\t\t\t\tdeleteHandler={() => animateThenDelete(deleteHandler)}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t) : null}\n\t\t\t\t\t</HStack>\n\t\t\t\t</Box>\n\t\t\t</Fade>\n\t\t</>\n\t)\n}\nconst DeleteButton: React.FC<ButtonProps> = ({ deleteHandler }) => {\n\treturn (\n\t\t<IconButton\n\t\t\tcolor={'black'}\n\t\t\taria-label=\"Delete Mood\"\n\t\t\tvariant=\"ghost\"\n\t\t\tsize={'sm'}\n\t\t\ticon={<CloseIcon />}\n\t\t\tonClick={deleteHandler}\n\t\t/>\n\t)\n}\n\nexport default MoodSlider\n","import { useToast } from '@chakra-ui/react'\nimport { useEffect, useState } from 'react'\nimport { useLocation, useNavigate } from 'react-router-dom'\nimport {\n\tThoughtRecord,\n\tisThoughtRecord,\n\tisKeyOfThoughtRecord,\n\tQuestionType,\n\tquestion,\n\tthoughtRecordData,\n\tisQuestion,\n\tFormValues,\n} from '../types'\nimport useThoughtRecordApi from './useThoughtRecordApi'\n\ninterface UseThoughtRecordReturn {\n\tlabel: string\n\tonSubmit: (data: FormValues) => void\n\tisSubmitting: boolean\n\tcurrentQuestion: string\n\tisValidQuestion: boolean | null\n\tthoughtRecord: ThoughtRecord | undefined\n}\n\nconst getLastValid = (pathname: QuestionType, thoughtRecord: ThoughtRecord) => {\n\tfor (let path of question) {\n\t\tlet thoughtRecordKey = path.slice(1)\n\t\tif (path === pathname) {\n\t\t\treturn path\n\t\t}\n\t\tif (isKeyOfThoughtRecord(thoughtRecordKey, thoughtRecord)) {\n\t\t\tif (thoughtRecord[thoughtRecordKey] === null) {\n\t\t\t\treturn path\n\t\t\t}\n\t\t}\n\t}\n\treturn pathname\n}\nconst UseThoughtRecord = (): UseThoughtRecordReturn | never => {\n\tconst toast = useToast()\n\tconst navigate = useNavigate()\n\tconst { pathname, state } = useLocation()\n\tconst [thoughtRecord, setThoughtRecord] = useState<ThoughtRecord>()\n\tconst [isValidQuestion, setIsValidQuestion] = useState<boolean | null>(null)\n\tconst {\n\t\tupdateThoughtRecord,\n\t\tgetActiveThoughtRecord,\n\t\tisSubmitting,\n\t\tsaveThoughtRecord,\n\t} = useThoughtRecordApi()\n\n\tuseEffect(() => {\n\t\tif (!isValidQuestion && isQuestion(pathname)) {\n\t\t\tif (thoughtRecord) {\n\t\t\t\tconst lastValid = getLastValid(pathname, thoughtRecord)\n\t\t\t\tif (lastValid !== pathname) {\n\t\t\t\t\tnavigate(lastValid)\n\t\t\t\t} else {\n\t\t\t\t\tsetIsValidQuestion(true)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}, [isValidQuestion, navigate, pathname, thoughtRecord])\n\n\tuseEffect(() => {\n\t\tconst getThoughtRecord = async () => {\n\t\t\tif (!thoughtRecord) {\n\t\t\t\tif (isThoughtRecord(state)) {\n\t\t\t\t\tsetThoughtRecord(state)\n\t\t\t\t} else {\n\t\t\t\t\tsetThoughtRecord(await getActiveThoughtRecord())\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (!thoughtRecord) {\n\t\t\tgetThoughtRecord()\n\t\t}\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, [])\n\n\tconst onSubmit = async (data: FormValues) => {\n\t\tif (isQuestion(pathname)) {\n\t\t\tif (pathname === '/submit') {\n\t\t\t\ttry {\n\t\t\t\t\tawait saveThoughtRecord()\n\t\t\t\t\tnavigate('/thoughtrecords')\n\t\t\t\t} catch (error) {\n\t\t\t\t\tif (error instanceof Error) {\n\t\t\t\t\t\ttoast({\n\t\t\t\t\t\t\tstatus: 'error',\n\t\t\t\t\t\t\tdescription: 'problem submitting',\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst updateKey = pathname.slice(1)\n\t\t\t\tconst activeThoughtRecord: string = isThoughtRecord(thoughtRecord)\n\t\t\t\t\t? thoughtRecord.key\n\t\t\t\t\t: ''\n\t\t\t\tconst NextLinkIndex = question.indexOf(pathname) + 1\n\t\t\t\ttry {\n\t\t\t\t\tconst updatedRecord = await updateThoughtRecord(\n\t\t\t\t\t\tdata,\n\t\t\t\t\t\tactiveThoughtRecord,\n\t\t\t\t\t\tupdateKey,\n\t\t\t\t\t)\n\t\t\t\t\tnavigate(question[NextLinkIndex], { state: { ...updatedRecord } })\n\t\t\t\t} catch {\n\t\t\t\t\ttoast({\n\t\t\t\t\t\tstatus: 'error',\n\t\t\t\t\t\tdescription: 'problem with update',\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tlet label: string = ''\n\tlet currentQuestion: string = ''\n\tif (isQuestion(pathname)) {\n\t\tlabel = thoughtRecordData[pathname].label\n\t\tcurrentQuestion = pathname.slice(1)\n\t}\n\treturn {\n\t\tlabel: label,\n\t\tonSubmit: onSubmit,\n\t\tisSubmitting: isSubmitting,\n\t\tcurrentQuestion: currentQuestion,\n\t\tthoughtRecord: thoughtRecord,\n\t\tisValidQuestion: isValidQuestion,\n\t}\n}\nexport default UseThoughtRecord\n","import { useState } from 'react'\nimport {\n\tthoughtRecordEndPoint,\n\tgetAuthHeader,\n\tuserEndPoint,\n} from '../Utils/api'\nimport useAuth from './useAuth'\nimport { FormValues, ThoughtRecord, isThoughtRecord, User } from '../types'\n/* returns a function that takes in the current path and active thought record \nto update and a piece of state that shows if the data is currently being fetched */\n\ntype FetchThoughtRecord = () => Promise<ThoughtRecord>\n\ninterface useThoughtRecordReturn {\n\tdeleteThoughtRecord: (thoughtRecord: string) => Promise<string>\n\tgetActiveThoughtRecord: FetchThoughtRecord\n\tgetNewThoughtRecord: FetchThoughtRecord\n\tgetAllThoughtRecords: () => Promise<ThoughtRecord[]>\n\tupdateThoughtRecord: (\n\t\tdata: FormValues,\n\t\tactiveThoughtRecord: string,\n\t\tupdateKey: string,\n\t) => Promise<ThoughtRecord>\n\tsaveThoughtRecord: () => Promise<User>\n\teditThoughtRecord: (thoughtRecordId: string) => Promise<ThoughtRecord>\n\tisSubmitting: boolean\n}\n\nconst useThoughtRecordApi = (): useThoughtRecordReturn => {\n\tconst { logout } = useAuth()\n\tconst authHeader = getAuthHeader()\n\tconst [isSubmitting, setIsSubmitting] = useState(false)\n\n\tconst handleFetch = async (endPoint: string, fetchOptions: RequestInit) => {\n\t\tif (isSubmitting) {\n\t\t\treturn\n\t\t}\n\t\tawait setIsSubmitting(true)\n\t\tconst response = await fetch(endPoint, fetchOptions)\n\t\tif (response.ok) {\n\t\t\tconst data = await response.json()\n\t\t\tsetIsSubmitting(false)\n\t\t\treturn data\n\t\t}\n\t\tif (response.status === 401 || 403) {\n\t\t\tlogout()\n\t\t} else throw Error(response.statusText)\n\t}\n\n\tconst getActiveThoughtRecord = async (): Promise<ThoughtRecord> => {\n\t\tconst data = await handleFetch(thoughtRecordEndPoint, authHeader)\n\t\tif (isThoughtRecord(data)) {\n\t\t\treturn data\n\t\t}\n\t\tthrow Error('not a thought record')\n\t}\n\tconst getNewThoughtRecord = async (): Promise<ThoughtRecord> => {\n\t\tconst options = { method: 'POST', ...authHeader }\n\t\tconst thoughtRecord = await handleFetch(thoughtRecordEndPoint, options)\n\n\t\tif (isThoughtRecord(thoughtRecord)) {\n\t\t\treturn thoughtRecord\n\t\t} else {\n\t\t\tthrow Error('response isnt valid')\n\t\t}\n\t}\n\n\tconst getAllThoughtRecords = async (): Promise<ThoughtRecord[]> => {\n\t\tconst options: RequestInit = {\n\t\t\t...authHeader,\n\t\t}\n\t\treturn await handleFetch(`${thoughtRecordEndPoint}/all`, options)\n\t}\n\n\tconst saveThoughtRecord = async (): Promise<User> => {\n\t\tconst saveOptions: RequestInit = {\n\t\t\theaders: {\n\t\t\t\t...authHeader.headers,\n\t\t\t\tAccept: 'application/json',\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t},\n\t\t\tmethod: 'POST',\n\t\t}\n\n\t\treturn await handleFetch(`${userEndPoint}/thoughtrecord`, saveOptions)\n\t}\n\tconst deleteThoughtRecord = async (\n\t\tthoughtRecord: string,\n\t): Promise<string> => {\n\t\tconst deleteOptions: RequestInit = {\n\t\t\t...authHeader,\n\t\t\tmethod: 'DELETE',\n\t\t}\n\t\treturn await handleFetch(\n\t\t\t`${thoughtRecordEndPoint}/${thoughtRecord}`,\n\t\t\tdeleteOptions,\n\t\t)\n\t}\n\n\tconst editThoughtRecord = async (thoughtRecordId: string) => {\n\t\tconst editOptions: RequestInit = {\n\t\t\t...authHeader,\n\t\t\tmethod: 'POST',\n\t\t}\n\t\tconst thoughtRecord = await handleFetch(\n\t\t\t`${thoughtRecordEndPoint}/edit/${thoughtRecordId}`,\n\t\t\teditOptions,\n\t\t)\n\t\tif (isThoughtRecord(thoughtRecord)) {\n\t\t\treturn thoughtRecord\n\t\t}\n\t\tthrow Error('Invalid return')\n\t}\n\tconst updateThoughtRecord = async (\n\t\tdata: FormValues,\n\t\tactiveThoughtRecord: string,\n\t\tupdateKey: string,\n\t): Promise<ThoughtRecord> => {\n\t\tconst updateOptions: RequestInit = {\n\t\t\theaders: {\n\t\t\t\tAccept: 'application/json',\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t...authHeader.headers,\n\t\t\t},\n\t\t\tmethod: 'PATCH',\n\t\t}\n\t\tupdateOptions.body = JSON.stringify({ [updateKey]: data })\n\t\treturn await handleFetch(\n\t\t\t`${thoughtRecordEndPoint}/${activeThoughtRecord}`,\n\t\t\tupdateOptions,\n\t\t)\n\t}\n\treturn {\n\t\tdeleteThoughtRecord,\n\t\tgetAllThoughtRecords,\n\t\tupdateThoughtRecord,\n\t\tgetActiveThoughtRecord,\n\t\tgetNewThoughtRecord,\n\t\tisSubmitting,\n\t\tsaveThoughtRecord,\n\t\teditThoughtRecord,\n\t}\n}\n\nexport default useThoughtRecordApi\n"],"names":["hotThought","w","spacing","alignSelf","my","mr","colorScheme","variant","color","bg","p","base","lg","textAlign","minH","rounded","label","popoverText","ml","flex","useThemeColors","foregroundColor","textColor","useState","balancedThought","setBalancedThought","moods","setMoods","useThoughtRecord","onSubmit","thoughtRecord","isSubmitting","isValidQuestion","useEffect","alternativethought","argumentsText","argFor","evidencefor","argAgainst","evidenceagainst","thoughts","overflow","mt","h","m","in","style","flexDirection","height","width","display","transition","enter","duration","exit","delay","offsetY","offsetX","alignContent","onChange","event","target","value","size","_placeholder","opacity","placeholder","onClick","mood","map","includes","moodRating","mb","length","isLoading","loadingText","allowMultiple","allowToggle","sliderColor","MoodEntry","deleteHandler","sliderChange","currentQuestion","UseThoughtRecord","isDeleting","setIsDeleting","UseThemeColors","alignItems","mx","pl","pr","justifyContent","slice","hasArrow","zIndex","fontSize","placement","isOpen","DeleteButton","setTimeout","animateThenDelete","icon","moodName","filter","toast","useToast","navigate","useNavigate","useLocation","pathname","state","setThoughtRecord","setIsValidQuestion","useThoughtRecordApi","updateThoughtRecord","getActiveThoughtRecord","saveThoughtRecord","isQuestion","lastValid","question","path","thoughtRecordKey","isKeyOfThoughtRecord","getLastValid","getThoughtRecord","isThoughtRecord","data","Error","status","description","updateKey","activeThoughtRecord","key","NextLinkIndex","updatedRecord","thoughtRecordData","logout","useAuth","authHeader","getAuthHeader","setIsSubmitting","handleFetch","endPoint","fetchOptions","fetch","response","ok","json","statusText","thoughtRecordEndPoint","getNewThoughtRecord","options","method","getAllThoughtRecords","saveOptions","headers","Accept","userEndPoint","deleteThoughtRecord","deleteOptions","editThoughtRecord","thoughtRecordId","editOptions","updateOptions","body","JSON","stringify"],"sourceRoot":""}