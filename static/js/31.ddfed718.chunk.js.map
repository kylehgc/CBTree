{"version":3,"file":"static/js/31.ddfed718.chunk.js","mappings":"uUAoCe,SAASA,IAAc,IAAD,QACnC,GAA2CC,EAAAA,EAAAA,KAApCC,EAAP,EAAOA,gBAAiBC,EAAxB,EAAwBA,gBAClBC,GAAQC,EAAAA,EAAAA,MACd,GAAqEC,EAAAA,EAAAA,MAA9DC,EAAP,EAAOA,SAAUC,EAAjB,EAAiBA,aAAjB,IAA+BC,UAAYC,EAA3C,EAA2CA,OAASC,EAApD,EAAoDA,aACpD,GAA6BC,EAAAA,EAAAA,MAAtBC,EAAP,EAAOA,MAAOC,EAAd,EAAcA,YACRC,GAAWC,EAAAA,EAAAA,MACVC,GAASC,EAAAA,EAAAA,MAATD,OAGPE,EAAAA,EAAAA,YAAU,WACLL,GACDC,GAAc,OAALE,QAAK,IAALA,OAAA,EAAAA,EAAOG,OAAQ,cAEzB,CAACN,EAAaC,EAAd,OAAwBE,QAAxB,IAAwBA,OAAxB,EAAwBA,EAAOG,OAClC,IAAMC,EAAmC,mCAAG,WAAOC,GAAP,kGAEjBC,MAAMC,EAAAA,GAAgB,CAC3CC,KAAMC,KAAKC,UAAUL,GACrBM,OAAQ,OACRC,KAAM,OACNC,QAAS,CACP,OAAU,mBACV,eAAgB,sBARoB,YAElCC,EAFkC,QAY5BC,GAZ4B,iCAclBD,EAASE,OAdS,cAchCC,EAdgC,iBAehCrB,EAAMqB,GAf0B,QAgBtCnB,EAAS,YAhB6B,wBAkBf,MAApBgB,EAASI,QACV/B,EAAM,CACJ+B,OAAO,UACPC,YAAa,2BArBqB,oHAAH,sDAgCzC,OAEE,UAAC,KAAD,CAAOC,QAAS,EAAGC,OAAQ,OAAQC,GAAI,OAAQC,KAAM,KAAMC,GAAI,GAAIC,GAAI,EAAvE,WACE,SAAC,KAAD,CAAOC,MAAO,SAAd,UACE,SAAC,KAAD,CAASC,SAAU,MAAOC,UAAW,SAArC,wBAIF,SAAC,KAAD,CACEC,QAAS,KACTC,GAAI7C,EACJ8C,UAAW,KACXC,EAAG,EAJL,UAKE,iBAAM5B,SAAUb,EAAaa,GAA7B,UACE,UAAC,KAAD,CAAOgB,QAAS,EAAhB,WACE,UAAC,KAAD,YACE,SAAC,KAAD,WACE,UAAC,KAAD,CAAaa,YAAY,OAACxC,QAAD,IAACA,GAAD,UAACA,EAAQyC,iBAAT,QAAC,EAAmBC,SAA7C,WACE,SAAC,KAAD,0BACA,SAAC,MAAD,QAAOC,KAAK,QACP9C,EAAS,YAAa,CAAC+C,UAAU,CAClChC,MAAO,GACP8B,QAAQ,yBACVG,UAAU,CACRjC,MAAO,EACP8B,QAAS,+BACb,SAAC,KAAD,iBAAmB1C,QAAnB,IAAmBA,GAAnB,UAAmBA,EAAQyC,iBAA3B,aAAmB,EAAmBC,gBAG1C,SAAC,KAAD,WACE,UAAC,KAAD,CAAaF,YAAY,OAACxC,QAAD,IAACA,GAAD,UAACA,EAAQ8C,gBAAT,QAAC,EAAkBJ,SAA5C,WACE,SAAC,KAAD,yBACA,SAAC,MAAD,QAAOC,KAAK,QACP9C,EAAS,WAAY,CAAC+C,UAAU,CACjChC,MAAO,GACP8B,QAAQ,yBACVG,UAAU,CACRjC,MAAO,EACP8B,QAAS,+BACb,SAAC,KAAD,iBAAmB1C,QAAnB,IAAmBA,GAAnB,UAAmBA,EAAQ8C,gBAA3B,aAAmB,EAAkBJ,mBAI3C,SAAC,IAAD,CAAsB7C,SAAUA,EAAUG,OAAQA,KAClD,SAAC,KAAD,CAAO2B,QAAS,GAAIoB,GAAI,EAAxB,UACE,SAAC,KAAD,CACEJ,KAAK,SACLK,UAAW/C,EACXgD,YAAY,aACZC,KAAK,KACLb,GAAI5C,EACJ0D,MAAO3D,EACP4D,OAAQ,CACNf,GAAI,YARR,wBAaF,SAAC,KAAD,CAAOU,GAAI,EAAX,UACE,UAAC,KAAD,CAAMd,MAAO,SAAb,8BACkB,SAAC,KAAD,CAAMoB,GAAIC,EAAAA,GAAiBC,GAAI,IAAKJ,MAAO,WAA3C,oC,0EClGhC,IA3B+C,SAAC,GAAgC,IAAD,MAA9BnD,EAA8B,EAA9BA,OAAQH,EAAsB,EAAtBA,SACvD,OACE,iCACE,UAAC,KAAD,CAAa2D,YAAU,EAAChB,YAAY,OAACxC,QAAD,IAACA,IAAAA,EAAQyD,UAAUC,GAAG,QAA1D,WACE,SAAC,KAAD,6BACA,SAAC,MAAD,QAAOf,KAAK,OAAOgB,YAAY,SAAY9D,EACzC,WAAY,CAAC+D,UAAU,EAAMC,QAAQ,CACnCjD,MAAO,aAAc8B,QAAS,kCAClC,SAAC,KAAD,iBAAmB1C,QAAnB,IAAmBA,GAAnB,UAAmBA,EAAQyD,gBAA3B,aAAmB,EAAkBf,cAEvC,UAAC,KAAD,CAAaF,YAAY,OAACxC,QAAD,IAACA,GAAD,UAACA,EAAQ8D,gBAAT,QAAC,EAAkBpB,SAASgB,GAAG,WAAxD,WACE,SAAC,KAAD,wBACA,SAAC,MAAD,QAAOf,KAAK,WAAWgB,YAAY,YAC9B9D,EAAS,WAAY,CACtB+D,UAAU,EAAMhB,UAAU,CACxBhC,MAAO,GACP8B,QAAQ,6BACVG,UAAU,CACRjC,MAAO,EACP8B,QAAS,mCACf,SAAC,KAAD,iBAAmB1C,QAAnB,IAAmBA,GAAnB,UAAmBA,EAAQ8D,gBAA3B,aAAmB,EAAkBpB","sources":["Components/Signup.tsx","Components/UserPassFormElements.tsx"],"sourcesContent":["import {\n  Flex,\n  Box,\n  FormControl,\n  FormLabel,\n  Input,\n  HStack,\n  Stack,\n  Button,\n  Heading,\n  Text,\n  useColorModeValue,\n  Link,\n  useToast,\n  FormErrorMessage,\n} from '@chakra-ui/react';\nimport {Link as ReactRouterLink, useLocation, useNavigate} from 'react-router-dom'\n\nimport { useEffect } from 'react';\nimport { getUserEndPoint, signupEndPoint } from '../utils/api';\nimport { useForm, SubmitHandler } from 'react-hook-form';\nimport UserPassFormElements from './UserPassFormElements';\nimport useThemeColors from '../Hooks/useThemeColors'\nimport useAuth from '../Hooks/useAuth'\n\ninterface FormValues {\n  firstName?: string,\n  lastName?: string,\n  username: string,\n  password: string\n}\ntype LocationState = {\n  state: {\n    path?: string\n  } \n}\nexport default function SignupCard() {\n  const {foregroundColor, backgroundColor} = useThemeColors()\n  const toast = useToast()\n  const {register, handleSubmit, formState: {errors , isSubmitting}} = useForm<FormValues>()\n  const {login, currentUser} = useAuth()\n  const navigate = useNavigate()\n  const {state} = useLocation() as LocationState\n\n  \n  useEffect(() => {\n    if(currentUser) {\n      navigate(state?.path || \"/emotion\")\n    }\n  }, [currentUser, navigate, state?.path])\n  const onSubmit: SubmitHandler<FormValues> = async (value) => {\n    try {\n      const response = await fetch(signupEndPoint, {\n        body: JSON.stringify(value),\n        method: \"POST\",\n        mode: \"cors\",\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        }\n      })\n      \n      if(response.ok) {\n\n        const token = await response.json()\n        await login(token)\n        navigate('/emotion')\n      } else {\n        if(response.status === 400) {\n          toast({\n            status:\"warning\",\n            description: \"UserName Already Taken\"\n          })\n        }\n      }\n      \n\n    } catch {\n\n    }\n  }\n\n  return (\n\n    <Stack spacing={8} height={\"100%\"} mx={'auto'} maxW={'lg'} py={12} px={6}>\n      <Stack align={'center'}>\n        <Heading fontSize={'4xl'} textAlign={'center'}>\n            Sign up\n        </Heading>\n      </Stack>\n      <Box\n        rounded={'lg'}\n        bg={foregroundColor}\n        boxShadow={'lg'}\n        p={8}>\n        <form onSubmit={handleSubmit(onSubmit)}>\n          <Stack spacing={4}>\n            <HStack>\n              <Box>\n                <FormControl isInvalid={!!errors?.firstName?.message}>\n                  <FormLabel>First Name</FormLabel>\n                  <Input type=\"text\"  {\n                    ...register(\"firstName\", {maxLength:{\n                      value: 20,\n                      message:\"Your name is too long\"},\n                    minLength:{\n                      value: 2,\n                      message: \"Your name is too short\"}})} />\n                  <FormErrorMessage>{errors?.firstName?.message}</FormErrorMessage>\n                </FormControl>\n              </Box>\n              <Box>\n                <FormControl isInvalid={!!errors?.lastName?.message}>\n                  <FormLabel>Last Name</FormLabel>\n                  <Input type=\"text\"  {\n                    ...register(\"lastName\", {maxLength:{\n                      value: 20,\n                      message:\"Your name is too long\"},\n                    minLength:{\n                      value: 2,\n                      message: \"Your name is too short\"}})} />\n                  <FormErrorMessage>{errors?.lastName?.message}</FormErrorMessage>\n                </FormControl>\n              </Box>\n            </HStack>\n            <UserPassFormElements register={register} errors={errors} />\n            <Stack spacing={10} pt={2}>\n              <Button\n                type='submit'\n                isLoading={isSubmitting}\n                loadingText=\"Submitting\"\n                size=\"lg\"\n                bg={backgroundColor}\n                color={foregroundColor}\n                _hover={{\n                  bg: 'blue.500'\n                }}>\n                Sign up\n              </Button>\n            </Stack>\n            <Stack pt={6}>\n              <Text align={'center'}>\n                Already a user? <Link as={ReactRouterLink} to={\"/\"} color={'blue.400'}>Login</Link>\n              </Text>\n            </Stack>\n          </Stack>\n        </form>\n      </Box>\n    </Stack>\n  \n  );\n}","import { FormControl, FormLabel, Input, FormErrorMessage } from \"@chakra-ui/react\"\nimport {FieldError, UseFormRegister} from 'react-hook-form'\nimport React from 'react'\n\ninterface FormValues {\n  username: string,\n  password: string\n}\ninterface IProps {\n  errors: Errors,\n  register: UseFormRegister<FormValues>\n}\ninterface Errors {\n  username?: FieldError | undefined;\n  password?: FieldError | undefined;\n}\n\nconst UserPassFormElements: React.FC<IProps> = ({errors, register}: IProps) => {\n  return (\n    <>\n      <FormControl isRequired isInvalid={!!errors?.username} id=\"email\">\n        <FormLabel>Email address</FormLabel>\n        <Input type=\"text\" placeholder=\"Email\" {...register(\n          \"username\", {required: true, pattern:{\n            value: /^\\S+@\\S+$/i, message: \"Not a valid email address\"}})}  />\n        <FormErrorMessage>{errors?.username?.message}</FormErrorMessage>\n      </FormControl>\n      <FormControl isInvalid={!!errors?.password?.message} id=\"password\">\n        <FormLabel>Password</FormLabel>\n        <Input type=\"password\" placeholder=\"password\" {\n          ...register(\"password\", {\n            required: true, maxLength:{\n              value: 10,\n              message:\"Your password is too long\"},\n            minLength:{\n              value: 4,\n              message: \"Your password is too short\"}})} /> \n        <FormErrorMessage>{errors?.password?.message}</FormErrorMessage>\n      </FormControl>\n    </>)\n                \n}\n\n\nexport default UserPassFormElements"],"names":["SignupCard","useThemeColors","foregroundColor","backgroundColor","toast","useToast","useForm","register","handleSubmit","formState","errors","isSubmitting","useAuth","login","currentUser","navigate","useNavigate","state","useLocation","useEffect","path","onSubmit","value","fetch","signupEndPoint","body","JSON","stringify","method","mode","headers","response","ok","json","token","status","description","spacing","height","mx","maxW","py","px","align","fontSize","textAlign","rounded","bg","boxShadow","p","isInvalid","firstName","message","type","maxLength","minLength","lastName","pt","isLoading","loadingText","size","color","_hover","as","ReactRouterLink","to","isRequired","username","id","placeholder","required","pattern","password"],"sourceRoot":""}