{"version":3,"file":"static/js/423.119dbe2a.chunk.js","mappings":"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","sources":["Components/SelectQuestion.tsx","Components/HotThoughtSelect.tsx","Components/ThoughtQuestion.tsx","../node_modules/@babel/runtime/helpers/esm/objectSpread2.js"],"sourcesContent":["import {CreatableSelect, ActionMeta} from 'chakra-react-select'\nimport { Dispatch, SetStateAction } from 'react'\nimport {Button,Box, FormLabel, Fade, SlideFade} from '@chakra-ui/react'\nimport {useState } from 'react'\nimport { Mood } from './types'\nimport MoodList from './MoodSlider'\nimport UseThemeColors from '../Hooks/useThemeColors'\n\ntype Option = {\n  value: string,\n  label: string\n}\ninterface SelectOption {\n  label: string,\n  value: string\n}\ninterface RecordProps {\n  moods: Mood[],\n  setMoods: Dispatch<SetStateAction<Mood[]>>,\n  selectOptions: SelectOption[],\n  label:string,\n}\n\nconst SelectQuestion: React.FC<RecordProps> = ({moods,setMoods, selectOptions,label}: RecordProps) => {\n  const {foregroundColor} = UseThemeColors()\n  const [selectedMood, setSelectedMood] = useState<string>(\"\")\n\n  const addMood = (mood: string) => {\n    if(!(moods.map(mood => mood.mood)).includes(mood) && mood) {\n      setMoods([...moods, {mood: mood, moodRating: 0}])\n    }\n  }\n  const handleChange = (option: Option | null, actionMeta: ActionMeta<Option>) => {\n    if(option) {\n      setSelectedMood(option.value)\n    }\n  }\n  return (\n    <>\n      <SlideFade offsetY={0} offsetX={50} transition={{enter: {delay: 0.2, duration: .5}}}\n        style={{flexDirection: \"column\" , alignItems:\"center\", display:\"flex\", height:\"auto\",width:\"100%\"}} in> \n        <Box p={2} bg={foregroundColor} w={\"92%\"} mt={6} mb={2} mx={7} >\n          <FormLabel mb={2} fontSize={14}> {label} </FormLabel>\n          <CreatableSelect\n            size='md'\n            onChange={handleChange}\n            options={selectOptions}\n          />\n        </Box>\n        <Button alignSelf={'center'} onClick={() => addMood(selectedMood)} w={\"60%\"} minH={10} my={6}> Add </Button>\n      </SlideFade>\n      \n      <MoodList moods={moods} setMoods={setMoods} />\n     \n    </>\n  )\n}\n\n\nexport default SelectQuestion","\nimport {Center, Heading} from '@chakra-ui/react'\nimport UseThemeColors from '../Hooks/useThemeColors'\n\ninterface HotThoughtProps {\n  thoughts: string[],\n  onSelect: (value: string) => void,\n  selected: string\n} \n\nconst HotThoughtSelect: React.FC<HotThoughtProps> = ({thoughts, onSelect, selected }) => {\n  const {foregroundColor} = UseThemeColors()\n  return (\n    <>\n      <Heading mt={4} mx={4} textAlign={\"center\"}> Choose the Hot Thought </Heading>\n      <Center p={4} flexDirection={\"column\"} mx={2} w={\"100%\"} minHeight={\"50vh\"} justifyContent={\"space-evenly\"}>\n        {thoughts.map(thought => {\n          return (  \n            <Center \n              key={thought}\n              p={2}\n              rounded={\"2xl\"} \n              fontSize={14}\n              color={selected === thought ? foregroundColor : \"inherit\"} \n              minH={\"10vh\"} \n              width={\"90%\"} \n              bg={selected === thought ? \"red.400\" : foregroundColor} \n              onClick={()=> onSelect(thought)}>\n              {thought}\n            </Center>\n          )\n        })}\n      </Center>\n    </>\n  )\n}\n\nexport default HotThoughtSelect","import { useEffect, useState } from 'react'\nimport partialThoughtData from './../Data/thoughts.json'\nimport SelectQuestion from './SelectQuestion'\nimport {Mood} from './types'\nimport {Button, SlideFade} from '@chakra-ui/react'\nimport HotThoughtSelect from './HotThoughtSelect'\nimport UseThoughtRecord from '../Hooks/UseThoughtRecord'\nimport UseThemeColors from '../Hooks/useThemeColors'\nimport LoadingTextField from './LoadingTextField'\n\nconst ThoughtQuestion = () => {\n  const thoughtData = partialThoughtData.map(thought => ({...thought, value: thought.label}))\n  const [thoughts, setThoughts] = useState<Mood[]>([])\n  const [selected, SetSelected] = useState<string>(\"\")\n  const {label, onSubmit, isSubmitting, thoughtRecord} = UseThoughtRecord()\n  const [doneThoughts, setDoneThoughts] = useState<Boolean>(false)\n  const {foregroundColor} = UseThemeColors()\n  const onSelect = (value: string) => {\n    SetSelected(value)\n  }\n  useEffect (() => {\n    console.log(thoughtRecord)\n    if(thoughtRecord?.thoughts) {\n      setThoughts(thoughtRecord.thoughts.thoughts)\n    }\n  },[thoughtRecord, setThoughts])\n  const handleMoodSubmit = () => {\n    if(!doneThoughts) {\n      setDoneThoughts(true)\n    } else {\n      if(selected) {\n        onSubmit({thoughts: thoughts, hotThought: selected})\n      }\n    }\n  }\n  const thoughtIDs = thoughts.map(thought => thought.mood)\n  if(!thoughtRecord) {\n    return <LoadingTextField/>\n  }\n  return (\n    <>\n      { !doneThoughts \n        ?\n        <SelectQuestion \n          moods={thoughts} \n          setMoods={setThoughts} \n          selectOptions={thoughtData} \n          label={label}\n        /> \n        : \n        <SlideFade in={!isSubmitting} offsetY={-100} transition={{enter: {delay: 0.3, duration: 0.5}, exit: {delay: 0.5, duration: 0.5}}}\n          style={{flexDirection: \"column\" , alignItems:\"center\", display:\"flex\", minHeight:\"50%\",width:\"100%\"}}>\n          <HotThoughtSelect thoughts={thoughtIDs} onSelect={onSelect} selected={selected} /> \n        </SlideFade>\n      }\n      {thoughts.length > 0 ?\n        <SlideFade offsetY={50} transition={{enter: {delay: 0.4, duration: 0.5}, exit:{delay: 0.3, duration: 0.5}}} style={{flexDirection: \"column\" , alignItems:\"center\", display:\"flex\", minHeight:\"auto\",width:\"100%\"}} in={!isSubmitting}>\n          <Button \n            minH={10}\n            w=\"60%\"\n            mt={8}\n            isLoading={isSubmitting}\n            bg={foregroundColor}\n            loadingText={\"Submitting\"}\n            onClick={handleMoodSubmit} \n          >Submit </Button> </SlideFade>\n        : null}\n        \n    </>\n    \n  )\n}\n\nexport default ThoughtQuestion","import defineProperty from \"./defineProperty.js\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}"],"names":["moods","setMoods","selectOptions","label","foregroundColor","UseThemeColors","useState","selectedMood","setSelectedMood","offsetY","offsetX","transition","enter","delay","duration","style","flexDirection","alignItems","display","height","width","in","p","bg","w","mt","mb","mx","fontSize","size","onChange","option","actionMeta","value","options","alignSelf","onClick","mood","map","includes","moodRating","minH","my","thoughts","onSelect","selected","textAlign","minHeight","justifyContent","thought","rounded","color","thoughtData","partialThoughtData","setThoughts","SetSelected","UseThoughtRecord","onSubmit","isSubmitting","thoughtRecord","doneThoughts","setDoneThoughts","useEffect","console","log","thoughtIDs","exit","SelectQuestion","length","isLoading","loadingText","hotThought","LoadingTextField","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread2","target","i","arguments","source","forEach","key","getOwnPropertyDescriptors","defineProperties","defineProperty"],"sourceRoot":""}