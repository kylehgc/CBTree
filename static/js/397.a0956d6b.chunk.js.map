{"version":3,"file":"static/js/397.a0956d6b.chunk.js","mappings":"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","sources":["Components/AccordianElement.tsx","Components/ArgumentAccordion.tsx","Components/EmotionButton.tsx","Components/EmotionPicker.tsx","Components/HotThoughtDisplay.tsx","Components/MoodSlider.tsx","Components/ThoughtRecord.tsx","Components/types.ts","Hooks/UseThoughtRecord.tsx","Hooks/useThoughtRecordApi.tsx"],"sourcesContent":["import { AccordionItem, AccordionButton, Box, AccordionIcon, AccordionPanel, Heading } from \"@chakra-ui/react\"\nimport UseThemeColors from \"../Hooks/useThemeColors\"\n\ninterface PopoverButtonProps {\n  label: string,\n  popoverText: string\n}\n\nconst AccordionElement: React.FC<PopoverButtonProps> = ({label, popoverText}) => {\n  const {foregroundColor} = UseThemeColors()\n  return (\n    <AccordionItem  my={2} ml={5} w={\"90%\"}\n      bg={foregroundColor} \n    >\n      <Heading color={\"black\"}>\n        <AccordionButton>\n          <Box flex='1' textAlign='left'>\n            {label}\n          </Box>\n          <AccordionIcon />\n        </AccordionButton>\n      </Heading>\n      <AccordionPanel p={4}>\n        {popoverText}\n      </AccordionPanel>\n    </AccordionItem>\n\n  )\n}\n\nexport default AccordionElement","import { \n  Accordion,\n  AccordionItem,\n  AccordionButton,\n  AccordionPanel,\n  AccordionIcon, \n  Box} from \"@chakra-ui/react\";\nimport AccordionElement from './AccordianElement'\n\ninterface Arguments {\n  argFor: string,\n  argAgainst: string\n}\n\ninterface Props {\n  argumentsText: Arguments \n}\nconst ArgumentAccordion:React.FC<Props> = ({argumentsText}) => { \n  const {argFor, argAgainst} = argumentsText\n  return (\n    <Accordion allowMultiple alignSelf={\"center\"} w={\"100%\"} allowToggle>\n      <AccordionElement label={\"Arguments For\"} popoverText={argFor} />\n      <AccordionElement label={\"Arguments Against\"} popoverText={argAgainst}/>\n    </Accordion>\n  )\n}\n\nexport default ArgumentAccordion\n","import { IconButton, useColorModeValue } from \"@chakra-ui/react\"\nimport { Dispatch, SetStateAction } from \"react\"\nimport { IconType } from \"react-icons\"\nimport UseThemeColors from \"../Hooks/useThemeColors\"\n\nexport interface Emotion {\n  icon: IconType,\n  emotionColor: string,\n  emotionName: string\n\n}\n\ninterface EmotionButtonProps {\n  emotion: Emotion\n  setSelected: Dispatch<SetStateAction<string>>,\n  selected: string}\n\nconst EmotionButton: React.FC<EmotionButtonProps> = ({emotion, setSelected, selected}) => {\n  const {backgroundColor} = UseThemeColors()\n  const {emotionName, emotionColor, icon} = emotion\n  const iconColor = useColorModeValue(\"black\",\"white\")\n  const getIconColor = (emotionName: string) => {\n    if(selected && emotionName !== selected) {\n      return iconColor\n    } else {\n      return emotionColor\n    }\n  }\n  const handleOnClick = (emotionName: string) => {\n    if(emotionName === selected) {\n      setSelected(\"\")\n    } else {\n      setSelected(emotionName)\n    }\n  }\n  return (\n    <>\n      <IconButton \n        size={\"lg\"}\n        _hover={{background:backgroundColor}}\n        _active={{background:backgroundColor}}\n        onClick={() => handleOnClick(emotionName)}\n        aria-label={`${emotionName} button`}  \n        as={icon} \n        bg={backgroundColor}\n        color={getIconColor(emotionName)}\n        \n      />\n    </>\n  )\n}\n\nexport default EmotionButton","import { Button, useColorModeValue, Center, Heading, HStack, IconButton, VStack } from '@chakra-ui/react'\nimport React, { Dispatch, SetStateAction, useState } from 'react'\nimport {RiEmotionFill, RiEmotionNormalFill, RiEmotionHappyFill, RiEmotionUnhappyFill} from 'react-icons/ri'\nimport UseThemeColors from '../Hooks/useThemeColors'\nimport EmotionButton, { Emotion } from './EmotionButton'\nimport LoadingTextField from './LoadingTextField'\nimport useThoughtRecord from '../Hooks/UseThoughtRecord'\nimport {  } from '@chakra-ui/react'\n\nexport const emotions: Emotion[] = \n  [ {icon: RiEmotionUnhappyFill, emotionColor: \"purple.900\", emotionName: \"Awful\"},\n    {icon: RiEmotionNormalFill, emotionColor: \"blue.700\", emotionName:\"Meh\"},\n    {icon: RiEmotionHappyFill, emotionColor: \"green.300\", emotionName: \"Good\" },\n    {icon: RiEmotionFill, emotionColor: \"yellow.300\", emotionName: \"Awesome\"}\n    \n  ]\n\nconst getEmotionColorByName = (emotionName: string) => {\n  return emotions.filter(emotion => emotion.emotionName === emotionName)[0]?.emotionColor\n}\n\nconst EmotionPicker: React.FC = () => {\n  const [selected, setSelected] = useState<string>(\"\")\n  const emotionColor = getEmotionColorByName(selected)\n  const {label, isSubmitting, onSubmit, thoughtRecord} = useThoughtRecord() \n  \n  \n  if(!thoughtRecord) {\n    return <LoadingTextField/>\n  }\n  return (\n    <>\n      <Center rounded={\"75px\"} border={selected ? \"15px solid\" : \"none\"} borderColor={emotionColor}  p={4} height={\"full\"} minHeight={\"90%\"} flexDir={\"column\"}> \n        <Heading position={\"fixed\"} top={\"25vh\"}> {label} </Heading>\n        <HStack height={\"50%\"} w={\"100%\"} spacing={8}> \n          {emotions.map(emotion => \n            <EmotionButton key={emotion.emotionName} emotion={emotion} selected={selected} setSelected={setSelected} />\n          )}\n        \n        </HStack>\n        <VStack p={2} w={\"full\"} height={\"15vh\"} spacing={12}>\n          {selected\n            ? \n            <>\n              <Heading color={emotionColor}>  {selected} </Heading>\n              <Button isLoading={isSubmitting} onClick={() => onSubmit(selected)} w={\"60%\"} minH={\"60px\"} bg={\"white\"} > Submit </Button>\n            </>\n            : null\n          }\n        </VStack>\n       \n      </Center>\n    </>\n  )\n}\n\nexport default EmotionPicker\n","import { Badge, Center, VStack } from \"@chakra-ui/react\"\nimport useThemeColors from '../Hooks/useThemeColors'\ninterface Props {\n  hotThought: string\n}\n\nconst HotThoughtDisplay: React.FC<Props> = ({hotThought}) => {\n  const {foregroundColor} = useThemeColors()\n  return (\n    <VStack w={\"full\"} spacing={-1}>\n      <Badge alignSelf={\"end\"} my={2} mr={6} colorScheme=\"red\" variant={\"solid\"}>\n           Hot Thought\n      </Badge>\n      <Center bg={\"red.500\"} p={2} color={foregroundColor}\n        alignSelf={\"center\"} w={\"90%\"} textAlign={\"center\"} \n        minH={\"80px\"} rounded={\"2xl\"}\n      >\n        {hotThought}\n      </Center>\n    </VStack>\n  )\n}\n\nexport default HotThoughtDisplay","import { \n  Tooltip,\n  Box, \n  Slider, Text, IconButton, HStack, SliderFilledTrack, SliderThumb, SliderTrack, VStack, Center, Fade} from \"@chakra-ui/react\"\nimport {CloseIcon} from '@chakra-ui/icons'\nimport { Mood } from \"./types\"\nimport { SetStateAction, useState } from \"react\"\nimport React from 'react' \nimport UseThemeColors from \"../Hooks/useThemeColors\"\nimport UseThoughtRecord from \"../Hooks/UseThoughtRecord\"\ninterface ButtonProps {\n  deleteHandler: React.MouseEventHandler<HTMLButtonElement>\n}\ninterface MoodEntryProps {\n  mood: string,\n  moodRating: number,\n  sliderChange: (value: number) => void,\n  deleteHandler: () => void,\n}\n\nexport const sliderColor = (value: number):string => {\n  if(value < 25) {\n    return \"green.400\"\n  }\n  if(value < 50) {\n    return \"yellow.600\"\n  }\n  if(value < 75) {\n    return \"orange.400\"\n  }\n  return \"red.800\"\n}\ninterface SliderProps {\n  moods: Mood[],\n  setMoods: (value: SetStateAction<Mood[]>) => void\n}\nconst MoodSlider:React.FC<SliderProps> = ({moods, setMoods}) => {\n  const deleteHandler = (moodName: string) => {\n    setMoods(moods.filter(mood => mood.mood !== moodName))\n  }\n  const sliderChange = (moodName:string) => (value: number) => {\n    setMoods(moods => moods.map(mood => {\n      if(mood.mood === moodName) {\n        return {mood: mood.mood, moodRating: value}\n      } else {\n        return mood\n      }\n    }))\n  }\n  return (\n    <Center flexDirection={\"column\"} w={\"100%\"} mt={0} mb={0} >\n      {moods.map(({mood,moodRating}) => \n        <MoodEntry \n          mood={mood} \n          key={mood}\n          deleteHandler={() => deleteHandler(mood)}\n          sliderChange={sliderChange(mood)} \n          moodRating={moodRating} \n        />\n      )\n      }\n    </Center>\n  )\n}\nconst MoodEntry: React.FC<MoodEntryProps> =\n  ( {deleteHandler,mood, moodRating, sliderChange}: MoodEntryProps ) => {\n    const {currentQuestion} = UseThoughtRecord() \n    const [isDeleting, setIsDeleting] = useState(false)\n    const animateThenDelete = (deleteHandler: () => void) => {\n      setIsDeleting(true)\n      setTimeout(deleteHandler, 500)\n    }\n    const {foregroundColor} = UseThemeColors()\n    return (\n      <>\n        <Fade in={!isDeleting} transition={{enter: {duration: .5}, exit: {duration:.5}}}\n          style={{flexDirection: \"column\" , alignItems:\"center\", display:\"flex\", height:\"auto\",width:\"100%\"}} > \n          <Box w={{base:\"full\", lg:\"50%\"}} my={3} alignSelf={\"center\"}>\n            <HStack rounded={\"2xl\"} mx={3} pl={2} minH={20} pr={1} bg={foregroundColor} justifyContent={\"center\"}>\n              <VStack ml={2} spacing={2} p={1} w={\"100%\"}>\n                <Text w={\"100%\"} textAlign={\"left\"}>\n                  {mood} \n                </Text>\n                <Slider colorScheme={sliderColor(moodRating).slice(0,-4)} ml={2} mr={1} mb={2} onChange={(value) => sliderChange(value)} value={moodRating}>\n                  <SliderTrack>\n                    <SliderFilledTrack />\n                  </SliderTrack>\n                  <Tooltip\n                    hasArrow\n                    zIndex={-9999}\n                    fontSize={\"sm\"}\n                    bg={sliderColor(moodRating)}\n                    color='white'\n                    placement='right'\n                    isOpen={!isDeleting}\n                    label={`${moodRating}%`}\n                  > \n                    <SliderThumb bg=\"teal.400\"/>\n                  </Tooltip>\n                </Slider>\n              </VStack>\n              {currentQuestion !== \"reratemoods\" ? \n                <DeleteButton deleteHandler={() => animateThenDelete(deleteHandler)} /> : null}\n             \n            </HStack>\n          </Box>\n        </Fade>\n      </>\n    )\n  }\nconst DeleteButton : React.FC<ButtonProps> = ({deleteHandler}) => {\n  return (\n    <IconButton \n      color={\"black\"}\n      aria-label='Delete Mood' \n      variant='ghost'\n      size={\"lg\"}\n      icon={<CloseIcon/>}\n      onClick={deleteHandler}/>\n  )\n}\n\nexport default MoodSlider\n","import useThoughtRecord from '../Hooks/UseThoughtRecord'\nimport { Icon, Flex,Box, Progress, List, ListItem, Text, HStack, ListIcon, Heading, Spacer, VStack } from '@chakra-ui/react'\nimport LoadingTextField from './LoadingTextField'\nimport { Mood, isFullThoughtRecord } from './types'\nimport UseThemeColors from '../Hooks/useThemeColors'\nimport {RiNodeTree} from 'react-icons/ri'\nimport {GiEvilTree} from 'react-icons/gi'\nimport { sliderColor } from './MoodSlider'\nimport { IconType } from 'react-icons'\nimport { Collapse, Accordion} from '@chakra-ui/react'\nimport AccordionElement from './AccordianElement'\nimport HotThoughtDisplay from './HotThoughtDisplay'\nimport ArgumentAccordion from './ArgumentAccordion'\nimport {emotions} from './EmotionPicker'\n\ninterface MoodDisplayProps {\n  moods: Mood[],\n  label: string\n} \nconst MoodDisplay: React.FC<MoodDisplayProps> = ({moods,label}) => {\n  const {foregroundColor} = UseThemeColors() \n  return (\n    <Flex flexDirection={\"column\"} m={2} alignItems={\"flexStart\"} justifyContent={\"left\"} w={\"100%\"}>\n      <Heading m={2} ml={4} textAlign={\"center\"}> {label} </Heading>\n      <List m={2} w={\"80%\"} alignItems={\"center\"} alignSelf={\"center\"} bg={foregroundColor} p={2} pb={4}>\n        {moods.map(({mood, moodRating}) => {\n          return (\n            <ListItem p={2} width={\"full\"} key={mood}> \n              <ListIcon boxSize={8} color={sliderColor(moodRating)} as={RiNodeTree}/> \n              <Text m={2} color={\"black\"} position={\"relative\"} bottom={2} textAlign={\"right\"} display={\"inline-flex\"}>{mood}</Text>\n              <Progress size={\"xs\"} colorScheme={sliderColor(moodRating).slice(0,-4)} value={moodRating}/>\n            </ListItem>\n          )\n        })}\n      </List>\n    </Flex>\n      \n  )\n}\n\ninterface EmotionDisplayProps {\n  emotionName: string,\n  label: string\n}\n\nconst EmotionDisplay: React.FC<EmotionDisplayProps> = ({emotionName,label}) => {\n  const emotion = emotions.filter(emotion => emotionName === emotion.emotionName)[0]\n  const {icon, emotionColor} = emotion\n  return (\n    <>\n      <VStack spacing={2}>\n        <Heading textAlign={\"center\"}> {label} </Heading>\n        <Icon boxSize={36} as={icon} color={emotionColor} />\n        <Heading color={emotionColor}> {emotionName} </Heading>\n      </VStack>\n    </>\n  )\n}\n\nconst ThoughtRecordDisplay = () => {\n  const {thoughtRecord} = useThoughtRecord() \n  if(!isFullThoughtRecord(thoughtRecord)) {\n    return <LoadingTextField/>\n  }\n  const argumentsText = {argFor: thoughtRecord.evidencefor, argAgainst: thoughtRecord.evidenceagainst}\n\n  return (\n    <>\n      <VStack overflow={\"scroll\"} m={0} spacing={10} width={\"100%\"}>\n        <EmotionDisplay label=\"Emotion\" emotionName={thoughtRecord.emotion} />\n        <Accordion allowToggle w={\"100%\"}>\n          <AccordionElement label=\"The Situation\" popoverText={thoughtRecord.situationquestion}/> \n        </Accordion>\n        <MoodDisplay moods={thoughtRecord.mood} label={\"Moods\"} />\n        <MoodDisplay moods={thoughtRecord.thoughts.thoughts} label={\"Thoughts\"} />\n        <HotThoughtDisplay hotThought={thoughtRecord.thoughts.hotThought}/>\n        <ArgumentAccordion argumentsText={argumentsText}/>\n        <MoodDisplay moods={thoughtRecord.alternativethought} label={\"Alternative thoughts\"}/>\n        <EmotionDisplay label=\"After Emotion\" emotionName={thoughtRecord.rerateemotion} />\n      </VStack>\n    </>\n  )\n}\n\n\nexport default ThoughtRecordDisplay\n\n","export type Mood = {\n  mood: string,\n  moodRating: number\n}\nexport const isKeyOfThoughtRecord = \n  (question: string, thoughtRecord: ThoughtRecord): question is keyof ThoughtRecord => {\n    return question in thoughtRecord\n  }\nconst thoughtRecordKeys =\n [\n   \"key\",\n   \"emotion\",\n   \"userKey\",\n   \"timeCreated\",\n   \"mood\",\n   \"thoughts\",\n   \"answer\",\n   \"rerateemotion\",\n   \"situationquestion\",\n   \"evidencefor\",\n   \"evidenceagainst\", \"alternativethought\"\n ]\n\n\nexport interface Thoughts {\n  thoughts: Mood[],\n  hotThought: string\n}\n\nexport const isThoughtRecord = (record: any): record is ThoughtRecord => {\n  if(record) {\n    return \"timeCreated\" in record \n  } \n  return false\n}\nexport const isFullThoughtRecord = (record: any): record is FullThoughtRecord => {\n  if(!record) {\n    return false\n  }\n  const keys = Object.keys(record)\n  for(let key of keys) {\n    if(!thoughtRecordKeys.includes(key)) {\n      return false\n    } \n  }\n  return true\n}\n  \n\n\nexport type FullThoughtRecord = Required<ThoughtRecord>\n\nexport interface ThoughtRecord {\n  userKey: string\n  key: string\n  timeCreated: number,\n  emotion?:string,\n  mood?: Mood[],\n  thoughts?: Thoughts \n  answer?: string,\n  rerateemotion?: string,\n  situationquestion?: string,\n  evidencefor?: string,\n  evidenceagainst?: string\n  alternativethought?: Mood[]\n}  ","import { useToast } from \"@chakra-ui/react\"\nimport { useEffect, useState } from \"react\"\nimport { useLocation, useNavigate } from \"react-router-dom\"\nimport { Mood, Thoughts, ThoughtRecord, isThoughtRecord } from \"../Components/types\"\nimport { getToken } from \"../utils/api\"\nimport {useThoughtRecordApi} from './useThoughtRecordApi'\n\ninterface UseThoughtRecordReturn {\n  label: string,\n  onSubmit: (data: FormValues) => void, \n  isSubmitting: boolean, \n  currentQuestion: string,\n  thoughtRecord: ThoughtRecord | undefined}\n\nconst question = [\n  \"/emotion\",\n  \"/situationquestion\",\n  \"/mood\",\n  \"/thoughts\",\n  \"/evidencefor\",\n  \"/evidenceagainst\",\n  \"/alternativethought\",\n  \"/rerateemotion\",\n  \"/thoughtrecord\"\n] as const\n\nexport type QuestionType = typeof question[number]\n\nconst thoughtRecordData = {\n  \"/emotion\": {label:\"How do you feel?\", type:\"Emotion\"},\n  \"/situationquestion\": {label:\"What is the Situation?\", type: \"Text\"},\n  \"/mood\": {label:\"Add any emotions you felt and rate them\", type: \"Mood\"},\n  \"/thoughts\": {label:\"List any thoughts and rate your Belief\", type: \"Thoughts\"},\n  \"/evidencefor\":{label: \"What is the Evidence for\", type: \"Text\"},\n  \"/evidenceagainst\": {label:\"What is the Evidence Against\", type: \"Text\"},\n  \"/alternativethought\":{label: \"\", type: \"Text\"},\n  \"/rerateemotion\": {label:\"How Do you feel now?\",type:\"Emotion\"},\n  \"/thoughtrecord\": {label:\"something\", type:\"Submit\"}\n} \n\nexport type FormValues = String | Mood[] | Thoughts  \n\nconst isQuestion = (pathname: any): pathname is QuestionType => {\n  return(question.includes(pathname))\n}\n\nconst UseThoughtRecord = (): UseThoughtRecordReturn | never => {\n  const toast = useToast()\n  const navigate = useNavigate()\n  const {pathname, state} = useLocation()\n  const [thoughtRecord, setThoughtRecord] = useState<ThoughtRecord>()\n  const {updateThoughtRecord, getActiveThoughtRecord, isSubmitting} = useThoughtRecordApi()\n  const token = getToken()\n  if(!token) {\n    throw Error\n  } \n \n  useEffect(() => {\n    \n    const getThoughtRecord = async () => {\n      if(!thoughtRecord) {\n        if(isThoughtRecord(state)) {\n          setThoughtRecord(state)\n        } else {\n          setThoughtRecord(await getActiveThoughtRecord(token))\n        }\n      }\n    }\n    if(!isSubmitting) {\n      getThoughtRecord()\n    }\n  },[getActiveThoughtRecord, isSubmitting, state, thoughtRecord, token])\n  \n  const onSubmit = async (data: FormValues) => {\n    if(isQuestion(pathname)) {\n      const updateKey = pathname.slice(1)\n      const activeThoughtRecord: string = isThoughtRecord(thoughtRecord) ? thoughtRecord.key : \"\" \n      const NextLinkIndex = question.indexOf(pathname) + 1\n      \n     \n      try {\n        const updatedRecord = await updateThoughtRecord(data, activeThoughtRecord, token, updateKey)\n        \n        navigate(question[NextLinkIndex],{state: {...updatedRecord}})\n      } catch {\n        toast({\n          status: 'error', \n          description: 'problem with update'\n        })\n      }\n    }}\n  let label: string = \"\" \n  let currentQuestion: string = \"\"\n  if(isQuestion(pathname)) {\n    \n    label = thoughtRecordData[pathname].label\n    currentQuestion = pathname.slice(1)\n  }\n  \n  return {\n    label: label, \n    onSubmit: onSubmit, \n    isSubmitting: isSubmitting,\n    currentQuestion: currentQuestion, \n    thoughtRecord: thoughtRecord\n  }\n}\nexport default UseThoughtRecord","import { useEffect, useState } from \"react\"\nimport {QuestionType, FormValues} from \"./UseThoughtRecord\"\nimport {thoughtRecordEndPoint, getAuthHeader, getUserEndPoint, getToken} from \"../utils/api\"\nimport useAuth, { Token, User } from \"./useAuth\"\nimport {ThoughtRecord, isThoughtRecord} from '../Components/types'\nimport { useToast } from \"@chakra-ui/react\"\n/* returns a function that takes in the current path and active thought record \nto update and a piece of state that shows if the data is currently being fetched */\n\nexport const useThoughtRecordApi = () => {\n  const {logout} = useAuth() \n  const toast = useToast()\n  const authHeader = getAuthHeader()  \n  const [isSubmitting, setIsSubmitting] = useState(false)\n  \n  const handleFetch = async (endPoint: string, fetchOptions: RequestInit) => {\n    if(isSubmitting) {\n      return\n    } \n    await setIsSubmitting(true)\n    const response = await fetch(endPoint, fetchOptions)\n    if(response.ok) {\n      const data = await response.json()\n      setIsSubmitting(false)\n      return data\n    }\n    if(response.status === 401 || 403) {\n      logout()\n    } else throw Error(response.statusText)\n  \n  }\n\n  const getActiveThoughtRecord = async(token:Token): Promise<ThoughtRecord> => {\n    const data = await handleFetch(thoughtRecordEndPoint,authHeader)\n    if(isThoughtRecord(data)) {\n      return data\n    }\n    throw Error(\"not a thought record\") \n  }\n  const getNewThoughtRecord = async (token:Token): Promise<ThoughtRecord> => {\n    const options = {method: \"POST\", ...authHeader}\n    const thoughtRecord = await handleFetch(thoughtRecordEndPoint, options)\n   \n    if(isThoughtRecord(thoughtRecord)) {\n      return thoughtRecord\n    } else {\n      throw Error('response isnt valid')\n    }   \n  }\n  const updateThoughtRecord = async (\n    data: FormValues\n    , activeThoughtRecord: string, token: Token, updateKey: string) => {\n    const updateOptions: RequestInit = {\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        ...authHeader.headers\n      },\n      method: \"PATCH\"\n    }\n    updateOptions.body = JSON.stringify({[updateKey]: data})\n    return await handleFetch(`${thoughtRecordEndPoint}/${activeThoughtRecord}`, updateOptions)\n  \n  }    \n  return {updateThoughtRecord, getActiveThoughtRecord, getNewThoughtRecord,isSubmitting}\n}\n\n\n\n"],"names":["label","popoverText","foregroundColor","UseThemeColors","my","ml","w","bg","color","flex","textAlign","p","argumentsText","argFor","argAgainst","allowMultiple","alignSelf","allowToggle","emotion","setSelected","selected","backgroundColor","emotionName","emotionColor","icon","iconColor","useColorModeValue","size","_hover","background","_active","onClick","handleOnClick","as","getIconColor","emotions","RiEmotionUnhappyFill","RiEmotionNormalFill","RiEmotionHappyFill","RiEmotionFill","useState","filter","getEmotionColorByName","useThoughtRecord","isSubmitting","onSubmit","thoughtRecord","rounded","border","borderColor","height","minHeight","flexDir","position","top","spacing","map","isLoading","minH","LoadingTextField","hotThought","useThemeColors","mr","colorScheme","variant","sliderColor","value","MoodEntry","deleteHandler","mood","moodRating","sliderChange","currentQuestion","UseThoughtRecord","isDeleting","setIsDeleting","in","transition","enter","duration","exit","style","flexDirection","alignItems","display","width","base","lg","mx","pl","pr","justifyContent","slice","mb","onChange","hasArrow","zIndex","fontSize","placement","isOpen","DeleteButton","setTimeout","animateThenDelete","moods","setMoods","mt","moodName","MoodDisplay","m","pb","boxSize","RiNodeTree","bottom","EmotionDisplay","isFullThoughtRecord","evidencefor","evidenceagainst","overflow","situationquestion","thoughts","alternativethought","rerateemotion","isKeyOfThoughtRecord","question","thoughtRecordKeys","isThoughtRecord","record","Object","keys","key","includes","thoughtRecordData","type","isQuestion","pathname","toast","useToast","navigate","useNavigate","useLocation","state","setThoughtRecord","logout","useAuth","authHeader","getAuthHeader","setIsSubmitting","handleFetch","endPoint","fetchOptions","fetch","response","ok","json","data","status","Error","statusText","getActiveThoughtRecord","token","thoughtRecordEndPoint","getNewThoughtRecord","options","method","updateThoughtRecord","activeThoughtRecord","updateKey","updateOptions","headers","body","JSON","stringify","useThoughtRecordApi","getToken","useEffect","getThoughtRecord","NextLinkIndex","indexOf","updatedRecord","description"],"sourceRoot":""}