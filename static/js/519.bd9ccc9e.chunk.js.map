{"version":3,"file":"static/js/519.bd9ccc9e.chunk.js","mappings":"0PA4FA,UAjFqC,WACnC,IAAOA,GAAmBC,EAAAA,EAAAA,KAAnBD,gBACP,GAA8CE,EAAAA,EAAAA,UAAiB,IAA/D,eAAOC,EAAP,KAAwBC,EAAxB,KACA,GAA0BF,EAAAA,EAAAA,UAAiB,IAA3C,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAgDC,EAAAA,EAAAA,KAAzCC,EAAP,EAAOA,SAAUC,EAAjB,EAAiBA,cAAeC,EAAhC,EAAgCA,cAEhCC,EAAAA,EAAAA,YAAW,WACT,OAAGF,QAAH,IAAGA,GAAAA,EAAeG,oBAChBN,EAASG,EAAcG,sBAEzB,CAACH,EAAcH,IAEjB,IAEMO,EAAgB,CAACC,OAFK,OAAbL,QAAa,IAAbA,GAAAA,EAAeM,YAAcN,EAAcM,YAAc,GAEjCC,WADP,OAAbP,QAAa,IAAbA,GAAAA,EAAeQ,gBAAkBR,EAAcQ,gBAAkB,IAE9EC,EAA0B,OAAbT,QAAa,IAAbA,GAAAA,EAAeU,SAAWV,EAAcU,SAASD,WAAa,GAYjF,OAAIT,GAIF,UAAC,KAAD,CAAQW,SAAU,UAAWC,GAAI,EAAGC,QAAS,EAAGC,EAAG,EAAGC,EAAE,OAAOC,EAAE,OAAjE,WACE,SAAC,KAAD,CAASC,EAAG,EAAGC,UAAW,SAA1B,yCACA,SAAC,KAAD,CAAWC,IAAKlB,EACdmB,MAAO,CAACC,cAAe,SAAUC,OAAO,OAAQC,MAAM,OAAQC,QAAQ,QACtEC,WAAY,CAACC,MAAO,CAACC,SAAS,IAAMC,KAAM,CAACD,SAAS,GAAKE,MAAO,KAChEC,QAAS,EAAGC,QAAS,IAHvB,UAIE,SAAC,IAAD,CAAmBtB,WAAYA,OAEjC,SAAC,KAAD,CAAWU,IAAKlB,EACdmB,MAAO,CAACC,cAAe,SAAUC,OAAO,OAAQC,MAAM,OAAQC,QAAQ,QACtEC,WAAY,CAACC,MAAO,CAACC,SAAS,GAAKE,MAAO,IAAMD,KAAM,CAACD,SAAS,GAAKE,MAAO,KAC5EC,QAAS,EAAGC,SAAU,IAHxB,UAIE,SAAC,IAAD,CAAiB3B,cAAeA,OAElC,UAAC,KAAD,CAAWe,IAAKlB,EACdmB,MAAO,CAACC,cAAe,SAAUW,aAAa,SAAUV,OAAO,OAAQC,MAAM,OAAQC,QAAQ,QAC7FC,WAAY,CAACC,MAAO,CAACC,SAAS,GAAKE,MAAO,IAAMD,KAAM,CAACD,SAAS,KAChEG,QAAS,EAAGC,QAAS,IAHvB,WAIE,SAAC,KAAD,CACEE,SAlC4D,SAACC,GACnEvC,EAAmBuC,EAAMC,OAAOC,QAkC1BA,MAAO1C,EACP2C,KAAK,KACLvB,EAAG,EACHwB,UAAW,SACXC,QAAQ,WACRC,GAAIjD,EACJyB,EAAG,MACHyB,aAAc,CAACC,MAAM,iBAAkBxB,UAAW,UAClDyB,YAAY,sCACd,SAAC,KAAD,CAAQC,QAAS,kBAxCNC,EAwCoBnD,GAvC9BE,EAAMkD,KAAI,SAAAD,GAAI,OAAIA,EAAKA,QAAOE,SAASF,IAASA,GACnDhD,EAAS,GAAD,eAAKD,GAAL,CAAY,CAACiD,KAAMA,EAAMG,WAAY,WAE/CrD,EAAmB,IAJL,IAACkD,GAwCuCP,UAAW,SAC3DtB,EAAG,MAAOiC,KAAM,GAAIC,GAAI,EAAGtC,GAAI,EADjC,6BAOF,SAAC,IAAD,CAAYhB,MAAOA,EAAOC,SAAUA,IACnCD,EAAMuD,OAAS,GAAI,SAAC,KAAD,CAClBF,KAAM,GACNjC,EAAE,MACFoC,UAAWnD,EACXuC,GAAIjD,EACJ8D,YAAa,aACbT,QAAS,kBAAM7C,EAASH,IANN,sBAOC,MACrB,SAAC,KAAD,CAAKmB,EAAG,aAhDH,SAAC,IAAD","sources":["Components/AlternativeThought.tsx"],"sourcesContent":["\nimport {Box, Heading, VStack, Badge, Input, Button, SlideFade} from '@chakra-ui/react'\nimport { useEffect, useState } from 'react'\nimport useThoughtRecord from '../Hooks/UseThoughtRecord'\nimport useThemeColors from '../Hooks/useThemeColors'\nimport ArgumentButtons from './ArgumentAccordion'\nimport MoodSlider from './MoodSlider'\nimport { Mood } from './types'\nimport LoadingTextField from './LoadingTextField'\nimport HotThoughtDisplay from './HotThoughtDisplay'\n\nconst AlternativeThought: React.FC = () => {\n  const {foregroundColor} = useThemeColors()\n  const [balancedThought, setBalancedThought] = useState<string>(\"\")\n  const [moods, setMoods] = useState<Mood[]>([])\n  const {onSubmit, thoughtRecord, isSubmitting} = useThoughtRecord() \n  \n  useEffect (() => {\n    if(thoughtRecord?.alternativethought) {\n      setMoods(thoughtRecord.alternativethought)\n    }\n  },[thoughtRecord,setMoods])\n\n  const argFor = thoughtRecord?.evidencefor ? thoughtRecord.evidencefor : \"\"\n  const argAgainst = thoughtRecord?.evidenceagainst ? thoughtRecord.evidenceagainst : \"\"\n  const argumentsText = {argFor: argFor, argAgainst: argAgainst}\n  const hotThought = thoughtRecord?.thoughts ? thoughtRecord.thoughts.hotThought : \"\"\n  const handleOnChange:  React.ChangeEventHandler<HTMLInputElement> = (event) => {\n    setBalancedThought(event.target.value)\n  }\n \n  const addMood = (mood: string) => {\n    if(!(moods.map(mood => mood.mood)).includes(mood) && mood) {\n      setMoods([...moods, {mood: mood, moodRating: 0}])\n    }\n    setBalancedThought(\"\")\n  }\n\n  if(!thoughtRecord) {\n    return <LoadingTextField/>\n  }\n  return (\n    <VStack overflow={\"visible\"} mt={1} spacing={8} p={1} h=\"full\" w=\"full\">\n      <Heading m={0} textAlign={\"center\"}> Write a Balanced Thought </Heading> \n      <SlideFade in={!isSubmitting} \n        style={{flexDirection: \"column\", height:\"full\", width:\"95vw\", display:\"flex\"}}\n        transition={{enter: {duration:0.5}, exit: {duration:0.5, delay: .5}}}\n        offsetY={0} offsetX={100}>\n        <HotThoughtDisplay hotThought={hotThought} />\n      </SlideFade>\n      <SlideFade in={!isSubmitting} \n        style={{flexDirection: \"column\", height:\"full\", width:\"95vw\", display:\"flex\"}}\n        transition={{enter: {duration:0.5, delay: 0.3}, exit: {duration:0.5, delay: 0.3}}}\n        offsetY={0} offsetX={-100}>\n        <ArgumentButtons argumentsText={argumentsText}/>\n      </SlideFade>\n      <SlideFade in={!isSubmitting} \n        style={{flexDirection: \"column\", alignContent:\"center\", height:\"full\", width:\"95vw\", display:\"flex\"}}\n        transition={{enter: {duration:0.5, delay: 0.5}, exit: {duration:0.5}}}\n        offsetY={0} offsetX={100}>\n        <Input\n          onChange={handleOnChange}\n          value={balancedThought}\n          size=\"lg\"\n          p={1}\n          alignSelf={\"center\"}\n          variant=\"outlined\"\n          bg={foregroundColor}\n          w={\"90%\"} \n          _placeholder={{color:\"blackAlpha.700\", textAlign: \"center\"}}\n          placeholder='What are some Balanced Thoughts?'/>\n        <Button onClick={() => addMood(balancedThought)}  alignSelf={\"center\"} \n          w={\"60%\"} minH={10} mb={4} mt={7}\n        > \n        Add Thought \n        </Button>\n      </SlideFade>\n\n      <MoodSlider moods={moods} setMoods={setMoods} />\n      {moods.length > 0 ? <Button \n        minH={10}\n        w=\"60%\"\n        isLoading={isSubmitting}\n        bg={foregroundColor}\n        loadingText={\"Submitting\"}\n        onClick={() => onSubmit(moods)} \n      > Submit </Button> : null}\n      <Box h={\"10vh\"} />\n    </VStack>\n  )\n}\n\nexport default AlternativeThought"],"names":["foregroundColor","useThemeColors","useState","balancedThought","setBalancedThought","moods","setMoods","useThoughtRecord","onSubmit","thoughtRecord","isSubmitting","useEffect","alternativethought","argumentsText","argFor","evidencefor","argAgainst","evidenceagainst","hotThought","thoughts","overflow","mt","spacing","p","h","w","m","textAlign","in","style","flexDirection","height","width","display","transition","enter","duration","exit","delay","offsetY","offsetX","alignContent","onChange","event","target","value","size","alignSelf","variant","bg","_placeholder","color","placeholder","onClick","mood","map","includes","moodRating","minH","mb","length","isLoading","loadingText"],"sourceRoot":""}