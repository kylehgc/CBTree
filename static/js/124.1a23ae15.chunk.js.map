{"version":3,"file":"static/js/124.1a23ae15.chunk.js","mappings":"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","sources":["Components/ThoughtRecordDisplay/ThoughtRecordModal.tsx","Components/ThoughtRecordDisplay/ThoughtRecordTable.tsx"],"sourcesContent":["import {\n\tButton,\n\tHStack,\n\tModal,\n\tModalContent,\n\tPopover,\n\tModalOverlay,\n\tPopoverTrigger,\n\tuseBreakpointValue,\n\tPopoverContent,\n} from '@chakra-ui/react'\nimport { ThoughtRecord } from '../../types'\nimport ThoughtRecordDisplay from './ThoughtRecordDisplay'\nimport UseThemeColors from '../../Hooks/useThemeColors'\nimport useThoughtRecordApi from '../../Hooks/useThoughtRecordApi'\nimport { useNavigate } from 'react-router-dom'\n\ninterface Props {\n\tthoughtRecord: ThoughtRecord | undefined\n\tisOpen: boolean\n\tonClose: () => void\n\tonOpen: () => void\n\tsetThoughtRecords: React.Dispatch<\n\t\tReact.SetStateAction<ThoughtRecord[] | undefined>\n\t>\n}\n\nconst ThoughtRecordModal: React.FC<Props> = ({\n\tonClose,\n\tisOpen,\n\tonOpen,\n\tthoughtRecord,\n\tsetThoughtRecords,\n}) => {\n\tconst {\n\t\tdeleteThoughtRecord,\n\t\tgetAllThoughtRecords,\n\t\teditThoughtRecord,\n\t\tisSubmitting,\n\t} = useThoughtRecordApi()\n\tconst navigate = useNavigate()\n\n\tconst handleEdit = async (thoughtRecordId: string) => {\n\t\tconst thoughtRecord = await editThoughtRecord(thoughtRecordId)\n\t\tnavigate('/emotion', { state: { ...thoughtRecord } })\n\t}\n\tconst handleDelete = async (thoughtRecordId: string) => {\n\t\tawait deleteThoughtRecord(thoughtRecordId)\n\t\tconst thoughtRecords = await getAllThoughtRecords()\n\t\tsetThoughtRecords(thoughtRecords)\n\t\tonClose()\n\t}\n\tconst modelSize = useBreakpointValue<string>({ base: 'xs', lg: 'xl' })\n\tconst { backgroundColor } = UseThemeColors()\n\tif (!thoughtRecord) {\n\t\treturn <></>\n\t}\n\treturn (\n\t\t<>\n\t\t\t<Modal size={modelSize} isOpen={isOpen} onClose={onClose}>\n\t\t\t\t<ModalOverlay backdropFilter=\"blur(5px)\" />\n\t\t\t\t<ModalContent bg={backgroundColor} p={4}>\n\t\t\t\t\t<HStack m={2} spacing={'auto'}>\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tonClick={() => handleEdit(thoughtRecord.key)}\n\t\t\t\t\t\t\tisLoading={isSubmitting}\n\t\t\t\t\t\t\tw={{ base: '40%', lg: '30%' }}\n\t\t\t\t\t\t\tminH={'full'}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tEdit\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t<Popover placement=\"bottom\">\n\t\t\t\t\t\t\t<PopoverTrigger>\n\t\t\t\t\t\t\t\t<Button isLoading={isSubmitting} w={{ base: '40%', lg: '30%' }}>\n\t\t\t\t\t\t\t\t\tDelete\n\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t</PopoverTrigger>\n\t\t\t\t\t\t\t<PopoverContent\n\t\t\t\t\t\t\t\tm={2}\n\t\t\t\t\t\t\t\tw={'65%'}\n\t\t\t\t\t\t\t\talignItems={'center'}\n\t\t\t\t\t\t\t\tp={2}\n\t\t\t\t\t\t\t\ttextAlign={'center'}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tAre you sure you want to delete this record? It can't be undone\n\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\tisLoading={isSubmitting}\n\t\t\t\t\t\t\t\t\tonClick={() => handleDelete(thoughtRecord?.key)}\n\t\t\t\t\t\t\t\t\tw={'70%'}\n\t\t\t\t\t\t\t\t\tm={2}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\tYes\n\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t<Button isLoading={isSubmitting} w={'70%'} m={2}>\n\t\t\t\t\t\t\t\t\tNo\n\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t</PopoverContent>\n\t\t\t\t\t\t</Popover>\n\t\t\t\t\t</HStack>\n\t\t\t\t\t{thoughtRecord && (\n\t\t\t\t\t\t<ThoughtRecordDisplay thoughtRecord={thoughtRecord} />\n\t\t\t\t\t)}\n\t\t\t\t</ModalContent>\n\t\t\t</Modal>\n\t\t</>\n\t)\n}\n\nexport default ThoughtRecordModal\n","import {\n\tTableContainer,\n\tTable,\n\tTableCaption,\n\tThead,\n\tTr,\n\tTh,\n\tTbody,\n\tTd,\n\tText,\n\tuseDisclosure,\n\tuseToast,\n} from '@chakra-ui/react'\nimport React, { useEffect, useState } from 'react'\nimport EmotionDisplay from './EmotionDisplay'\nimport { ThoughtRecord } from '../../types'\nimport ThoughtRecordModal from './ThoughtRecordModal'\nimport useThoughtRecordApi from '../../Hooks/useThoughtRecordApi'\nimport LoadingTextField from '../Loading/LoadingTextField'\ninterface props {}\n\nconst getFormattedDate = (time: number) => {\n\tconst date = new Date(time)\n\treturn date.toLocaleDateString()\n}\n\nconst ThoughtRecordTable: React.FC<props> = () => {\n\tconst [recordToShow, setRecordToShow] = useState<ThoughtRecord>()\n\tconst { isOpen, onOpen, onClose } = useDisclosure()\n\tconst toast = useToast()\n\tconst { getAllThoughtRecords, isSubmitting } = useThoughtRecordApi()\n\tconst [thoughtRecords, setThoughtRecords] = useState<ThoughtRecord[]>()\n\n\tuseEffect(() => {\n\t\tconst fetchThoughtRecords = async () => {\n\t\t\ttry {\n\t\t\t\tconst data = await getAllThoughtRecords()\n\t\t\t\tsetThoughtRecords(data)\n\t\t\t} catch {\n\t\t\t\ttoast({\n\t\t\t\t\tstatus: 'error',\n\t\t\t\t\tdescription: 'something went wrong getting thoughtrecords',\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\t\tif (!isSubmitting && !thoughtRecords) {\n\t\t\tfetchThoughtRecords()\n\t\t}\n\t}, [getAllThoughtRecords, isSubmitting, thoughtRecords, toast])\n\n\tconst handleOnClick = (thoughtRecordId: string) => {\n\t\tif (thoughtRecords) {\n\t\t\tconst chosenRecord = thoughtRecords.filter(\n\t\t\t\t(record) => record.key === thoughtRecordId,\n\t\t\t)[0]\n\t\t\tsetRecordToShow(chosenRecord)\n\t\t\tonOpen()\n\t\t}\n\t}\n\tif (!thoughtRecords) {\n\t\treturn <LoadingTextField />\n\t}\n\treturn (\n\t\t<>\n\t\t\t<ThoughtRecordModal\n\t\t\t\tsetThoughtRecords={setThoughtRecords}\n\t\t\t\tisOpen={isOpen}\n\t\t\t\tonOpen={onOpen}\n\t\t\t\tonClose={onClose}\n\t\t\t\tthoughtRecord={recordToShow}\n\t\t\t/>\n\t\t\t<TableContainer overflowY={'auto'} w={'93%'}>\n\t\t\t\t<Table size=\"sm\" variant=\"striped\">\n\t\t\t\t\t<TableCaption> Your Thought Records </TableCaption>\n\t\t\t\t\t<Thead>\n\t\t\t\t\t\t<Tr>\n\t\t\t\t\t\t\t<Th>Recorded</Th>\n\t\t\t\t\t\t\t<Th> Felt Before </Th>\n\t\t\t\t\t\t\t<Th> Felt After </Th>\n\t\t\t\t\t\t</Tr>\n\t\t\t\t\t</Thead>\n\t\t\t\t\t<Tbody>\n\t\t\t\t\t\t{thoughtRecords.map((record) => (\n\t\t\t\t\t\t\t<Tr key={record.key} onClick={() => handleOnClick(record.key)}>\n\t\t\t\t\t\t\t\t<Td>\n\t\t\t\t\t\t\t\t\t<Text>{getFormattedDate(record.timeCreated)}</Text>\n\t\t\t\t\t\t\t\t</Td>\n\t\t\t\t\t\t\t\t<Td py={4}>\n\t\t\t\t\t\t\t\t\t{record.emotion && (\n\t\t\t\t\t\t\t\t\t\t<EmotionDisplay size={'3x'} emotionName={record.emotion} />\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t</Td>\n\t\t\t\t\t\t\t\t<Td py={2}>\n\t\t\t\t\t\t\t\t\t{record.rerateemotion && (\n\t\t\t\t\t\t\t\t\t\t<EmotionDisplay\n\t\t\t\t\t\t\t\t\t\t\tsize={'3x'}\n\t\t\t\t\t\t\t\t\t\t\temotionName={record.rerateemotion}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t</Td>\n\t\t\t\t\t\t\t</Tr>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</Tbody>\n\t\t\t\t</Table>\n\t\t\t</TableContainer>\n\t\t</>\n\t)\n}\n\nexport default ThoughtRecordTable\n"],"names":["onClose","isOpen","thoughtRecord","onOpen","setThoughtRecords","useThoughtRecordApi","deleteThoughtRecord","getAllThoughtRecords","editThoughtRecord","isSubmitting","navigate","useNavigate","handleEdit","thoughtRecordId","state","handleDelete","thoughtRecords","modelSize","useBreakpointValue","base","lg","backgroundColor","UseThemeColors","size","backdropFilter","bg","p","m","spacing","onClick","key","isLoading","w","minH","placement","alignItems","textAlign","ThoughtRecordDisplay","useState","recordToShow","setRecordToShow","useDisclosure","toast","useToast","useEffect","fetchThoughtRecords","data","status","description","overflowY","variant","Tr","Th","map","record","chosenRecord","filter","handleOnClick","Td","time","timeCreated","Date","toLocaleDateString","py","emotion","EmotionDisplay","emotionName","rerateemotion","LoadingTextField"],"sourceRoot":""}