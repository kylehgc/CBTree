{"version":3,"file":"static/js/862.ddc929c1.chunk.js","mappings":"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","sources":["Components/AccordianElement.tsx","Components/ArgumentAccordion.tsx","Components/EmotionButton.tsx","Components/EmotionPicker.tsx","Components/HotThoughtDisplay.tsx","Components/MoodSlider.tsx","Components/ThoughtRecordDisplay.tsx","Components/SubmitThoughtRecord.tsx","Hooks/UseThoughtRecord.tsx"],"sourcesContent":["import {\n\tAccordionItem,\n\tAccordionButton,\n\tBox,\n\tAccordionIcon,\n\tAccordionPanel,\n\tHeading,\n\tText,\n\tLightMode,\n} from '@chakra-ui/react'\nimport UseThemeColors from '../Hooks/useThemeColors'\n\ninterface PopoverButtonProps {\n\tlabel: string\n\tpopoverText: string\n}\n\nconst AccordionElement: React.FC<PopoverButtonProps> = ({\n\tlabel,\n\tpopoverText,\n}) => {\n\tconst { foregroundColor } = UseThemeColors()\n\treturn (\n\t\t<AccordionItem\n\t\t\talignSelf={'center'}\n\t\t\tmy={2}\n\t\t\tml={{ base: 5, lg: 0 }}\n\t\t\tw={{ base: '90%', lg: '100%' }}\n\t\t>\n\t\t\t<Heading>\n\t\t\t\t<AccordionButton>\n\t\t\t\t\t<Box flex=\"1\" textAlign=\"left\">\n\t\t\t\t\t\t{label}\n\t\t\t\t\t</Box>\n\t\t\t\t\t<AccordionIcon />\n\t\t\t\t</AccordionButton>\n\t\t\t</Heading>\n\t\t\t<AccordionPanel color=\"white\" p={4}>\n\t\t\t\t{popoverText}\n\t\t\t</AccordionPanel>\n\t\t</AccordionItem>\n\t)\n}\n\nexport default AccordionElement\n","import { Accordion } from '@chakra-ui/react'\nimport AccordionElement from './AccordianElement'\n\ninterface Arguments {\n\targFor: string\n\targAgainst: string\n}\n\ninterface Props {\n\targumentsText: Arguments\n}\nconst ArgumentAccordion: React.FC<Props> = ({ argumentsText }) => {\n\tconst { argFor, argAgainst } = argumentsText\n\treturn (\n\t\t<Accordion allowMultiple alignSelf={'center'} w={'100%'} allowToggle>\n\t\t\t<AccordionElement label={'Arguments For'} popoverText={argFor} />\n\t\t\t<AccordionElement label={'Arguments Against'} popoverText={argAgainst} />\n\t\t</Accordion>\n\t)\n}\n\nexport default ArgumentAccordion\n","import { useBreakpointValue, useColorModeValue } from '@chakra-ui/react'\nimport { IconDefinition } from '@fortawesome/free-solid-svg-icons'\nimport { Dispatch, SetStateAction } from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { emotions } from './EmotionPicker'\n\nexport interface Emotion {\n\ticon: IconDefinition\n\temotionColor: string\n\temotionName: string\n}\n\ntype ButtonSizes = '3x' | '5x'\n\ninterface EmotionButtonProps {\n\temotionName: string\n\tsetSelected: Dispatch<SetStateAction<string>>\n\tselected: string\n}\n\nconst EmotionButton: React.FC<EmotionButtonProps> = ({\n\temotionName,\n\tsetSelected,\n\tselected,\n}) => {\n\tconst emotion = emotions.filter(\n\t\t(emotion) => emotionName === emotion.emotionName,\n\t)[0]\n\tconst { emotionColor, icon } = emotion\n\tconst iconColor = useColorModeValue('black', 'white')\n\tconst buttonSize = useBreakpointValue<string>({\n\t\tbase: '3x',\n\t\tlg: '5x',\n\t}) as ButtonSizes\n\n\tconst getIconColor = (emotionName: string) => {\n\t\tif (selected && emotionName !== selected) {\n\t\t\treturn iconColor\n\t\t} else {\n\t\t\treturn emotionColor\n\t\t}\n\t}\n\n\tconst handleOnClick = (emotionName: string) => {\n\t\tif (emotionName === selected) {\n\t\t\tsetSelected('')\n\t\t} else {\n\t\t\tsetSelected(emotionName)\n\t\t}\n\t}\n\tconst displayColor = getIconColor(emotionName)\n\treturn (\n\t\t<>\n\t\t\t<FontAwesomeIcon\n\t\t\t\tsize={buttonSize}\n\t\t\t\tonClick={() => handleOnClick(emotionName)}\n\t\t\t\taria-label={`${emotionName} button`}\n\t\t\t\tcolor={displayColor}\n\t\t\t\ticon={icon}\n\t\t\t/>\n\t\t</>\n\t)\n}\n\nexport default EmotionButton\n","import { Button, Center, Heading, HStack, VStack } from '@chakra-ui/react'\nimport React, { useState } from 'react'\nimport EmotionButton, { Emotion } from './EmotionButton'\nimport LoadingTextField from './LoadingTextField'\nimport useThoughtRecord from '../Hooks/UseThoughtRecord'\nimport {\n\tfaFaceMeh,\n\tfaFaceFrownOpen,\n\tfaFaceGrin,\n\tfaFaceSmile,\n} from '@fortawesome/free-solid-svg-icons'\n\nexport const emotions: Emotion[] = [\n\t{ icon: faFaceFrownOpen, emotionColor: '#322659', emotionName: 'Awful' },\n\t{ icon: faFaceMeh, emotionColor: '#2C5282', emotionName: 'Meh' },\n\t{ icon: faFaceSmile, emotionColor: '#68D391', emotionName: 'Good' },\n\t{ icon: faFaceGrin, emotionColor: '#F6E05E', emotionName: 'Awesome' },\n]\n\nconst getEmotionColorByName = (emotionName: string) => {\n\treturn emotions.filter((emotion) => emotion.emotionName === emotionName)[0]\n\t\t?.emotionColor\n}\n\nconst EmotionPicker: React.FC = () => {\n\tconst [selected, setSelected] = useState<string>('')\n\tconst emotionColor = getEmotionColorByName(selected)\n\tconst { label, isSubmitting, onSubmit, thoughtRecord } = useThoughtRecord()\n\n\tif (!thoughtRecord) {\n\t\treturn <LoadingTextField />\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t<Center\n\t\t\t\trounded={'75px'}\n\t\t\t\tborder={selected ? '15px solid' : 'none'}\n\t\t\t\tborderColor={emotionColor}\n\t\t\t\tm={0}\n\t\t\t\tmx={-20}\n\t\t\t\tw={{ base: 'auto', lg: '100vw' }}\n\t\t\t\tp={2}\n\t\t\t\theight={'150vh'}\n\t\t\t\tflexDir={'column'}\n\t\t\t>\n\t\t\t\t<Heading position={'fixed'} top={48} p={0}>\n\t\t\t\t\t{label}\n\t\t\t\t</Heading>\n\t\t\t\t<HStack\n\t\t\t\t\theight={'50%'}\n\t\t\t\t\tp={2}\n\t\t\t\t\tw={{ base: '100%', lg: '50%' }}\n\t\t\t\t\tspacing={{ base: 12, lg: 'auto' }}\n\t\t\t\t>\n\t\t\t\t\t{emotions.map(({ emotionName }) => (\n\t\t\t\t\t\t<EmotionButton\n\t\t\t\t\t\t\tkey={emotionName}\n\t\t\t\t\t\t\temotionName={emotionName}\n\t\t\t\t\t\t\tselected={selected}\n\t\t\t\t\t\t\tsetSelected={setSelected}\n\t\t\t\t\t\t/>\n\t\t\t\t\t))}\n\t\t\t\t</HStack>\n\t\t\t\t<VStack p={2} w={'full'} height={'10vh'} spacing={6}>\n\t\t\t\t\t{selected ? (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<Heading color={emotionColor}> {selected} </Heading>\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\tm={2}\n\t\t\t\t\t\t\t\tisLoading={isSubmitting}\n\t\t\t\t\t\t\t\tonClick={() => onSubmit(selected)}\n\t\t\t\t\t\t\t\tw={'60%'}\n\t\t\t\t\t\t\t\tminH={'40px'}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tSubmit\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t</>\n\t\t\t\t\t) : null}\n\t\t\t\t</VStack>\n\t\t\t</Center>\n\t\t</>\n\t)\n}\n\nexport default EmotionPicker\n","import { Badge, Center, VStack } from '@chakra-ui/react'\nimport useThemeColors from '../Hooks/useThemeColors'\ninterface Props {\n\thotThought: string\n}\n\nconst HotThoughtDisplay: React.FC<Props> = ({ hotThought }) => {\n\tconst { foregroundColor } = useThemeColors()\n\treturn (\n\t\t<VStack w={'full'} spacing={-1}>\n\t\t\t<Badge\n\t\t\t\talignSelf={'end'}\n\t\t\t\tmy={2}\n\t\t\t\tmr={6}\n\t\t\t\tcolorScheme=\"red\"\n\t\t\t\tvariant={'solid'}\n\t\t\t>\n\t\t\t\tHot Thought\n\t\t\t</Badge>\n\t\t\t<Center\n\t\t\t\tbg={'red.500'}\n\t\t\t\tp={2}\n\t\t\t\talignSelf={'center'}\n\t\t\t\tw={'90%'}\n\t\t\t\ttextAlign={'center'}\n\t\t\t\tminH={{ base: '80px', lg: '20vh' }}\n\t\t\t\trounded={'2xl'}\n\t\t\t>\n\t\t\t\t{hotThought}\n\t\t\t</Center>\n\t\t</VStack>\n\t)\n}\n\nexport default HotThoughtDisplay\n","import {\n\tTooltip,\n\tBox,\n\tSlider,\n\tText,\n\tIconButton,\n\tHStack,\n\tSliderFilledTrack,\n\tSliderThumb,\n\tSliderTrack,\n\tVStack,\n\tCenter,\n\tFade,\n} from '@chakra-ui/react'\nimport { CloseIcon } from '@chakra-ui/icons'\nimport { Mood } from './types'\nimport { SetStateAction, useState } from 'react'\nimport React from 'react'\nimport UseThemeColors from '../Hooks/useThemeColors'\nimport UseThoughtRecord from '../Hooks/UseThoughtRecord'\ninterface ButtonProps {\n\tdeleteHandler: React.MouseEventHandler<HTMLButtonElement>\n}\ninterface MoodEntryProps {\n\tmood: string\n\tmoodRating: number\n\tsliderChange: (value: number) => void\n\tdeleteHandler: () => void\n}\n\nexport const sliderColor = (value: number): string => {\n\tif (value < 25) {\n\t\treturn 'green.400'\n\t}\n\tif (value < 50) {\n\t\treturn 'yellow.600'\n\t}\n\tif (value < 75) {\n\t\treturn 'orange.400'\n\t}\n\treturn 'red.800'\n}\ninterface SliderProps {\n\tmoods: Mood[]\n\tsetMoods: (value: SetStateAction<Mood[]>) => void\n}\nconst MoodSlider: React.FC<SliderProps> = ({ moods, setMoods }) => {\n\tconst deleteHandler = (moodName: string) => {\n\t\tsetMoods(moods.filter((mood) => mood.mood !== moodName))\n\t}\n\tconst sliderChange = (moodName: string) => (value: number) => {\n\t\tsetMoods((moods) =>\n\t\t\tmoods.map((mood) => {\n\t\t\t\tif (mood.mood === moodName) {\n\t\t\t\t\treturn { mood: mood.mood, moodRating: value }\n\t\t\t\t} else {\n\t\t\t\t\treturn mood\n\t\t\t\t}\n\t\t\t}),\n\t\t)\n\t}\n\treturn (\n\t\t<Center flexDirection={'column'} w={'100%'} mt={0} mb={0}>\n\t\t\t{moods.map(({ mood, moodRating }) => (\n\t\t\t\t<MoodEntry\n\t\t\t\t\tmood={mood}\n\t\t\t\t\tkey={mood}\n\t\t\t\t\tdeleteHandler={() => deleteHandler(mood)}\n\t\t\t\t\tsliderChange={sliderChange(mood)}\n\t\t\t\t\tmoodRating={moodRating}\n\t\t\t\t/>\n\t\t\t))}\n\t\t</Center>\n\t)\n}\nconst MoodEntry: React.FC<MoodEntryProps> = ({\n\tdeleteHandler,\n\tmood,\n\tmoodRating,\n\tsliderChange,\n}: MoodEntryProps) => {\n\tconst { currentQuestion } = UseThoughtRecord()\n\tconst [isDeleting, setIsDeleting] = useState(false)\n\tconst animateThenDelete = (deleteHandler: () => void) => {\n\t\tsetIsDeleting(true)\n\t\tsetTimeout(deleteHandler, 500)\n\t}\n\tconst { foregroundColor } = UseThemeColors()\n\treturn (\n\t\t<>\n\t\t\t<Fade\n\t\t\t\tin={!isDeleting}\n\t\t\t\ttransition={{ enter: { duration: 0.5 }, exit: { duration: 0.5 } }}\n\t\t\t\tstyle={{\n\t\t\t\t\tflexDirection: 'column',\n\t\t\t\t\talignItems: 'center',\n\t\t\t\t\tdisplay: 'flex',\n\t\t\t\t\theight: 'auto',\n\t\t\t\t\twidth: '100%',\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<Box w={{ base: 'full', lg: '50%' }} my={3} alignSelf={'center'}>\n\t\t\t\t\t<HStack\n\t\t\t\t\t\trounded={'2xl'}\n\t\t\t\t\t\tmx={3}\n\t\t\t\t\t\tbg={foregroundColor}\n\t\t\t\t\t\tpl={2}\n\t\t\t\t\t\tminH={20}\n\t\t\t\t\t\tpr={1}\n\t\t\t\t\t\tjustifyContent={'center'}\n\t\t\t\t\t>\n\t\t\t\t\t\t<VStack ml={2} spacing={2} p={1} w={'100%'}>\n\t\t\t\t\t\t\t<Text w={'100%'} textAlign={'left'}>\n\t\t\t\t\t\t\t\t{mood}\n\t\t\t\t\t\t\t</Text>\n\t\t\t\t\t\t\t<Slider\n\t\t\t\t\t\t\t\tcolorScheme={sliderColor(moodRating).slice(0, -4)}\n\t\t\t\t\t\t\t\tml={2}\n\t\t\t\t\t\t\t\tmr={1}\n\t\t\t\t\t\t\t\tmb={2}\n\t\t\t\t\t\t\t\tonChange={(value) => sliderChange(value)}\n\t\t\t\t\t\t\t\tvalue={moodRating}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<SliderTrack>\n\t\t\t\t\t\t\t\t\t<SliderFilledTrack />\n\t\t\t\t\t\t\t\t</SliderTrack>\n\t\t\t\t\t\t\t\t<Tooltip\n\t\t\t\t\t\t\t\t\thasArrow\n\t\t\t\t\t\t\t\t\tzIndex={-9999}\n\t\t\t\t\t\t\t\t\tfontSize={'sm'}\n\t\t\t\t\t\t\t\t\tbg={sliderColor(moodRating)}\n\t\t\t\t\t\t\t\t\tcolor=\"white\"\n\t\t\t\t\t\t\t\t\tplacement=\"right\"\n\t\t\t\t\t\t\t\t\tisOpen={!isDeleting}\n\t\t\t\t\t\t\t\t\tlabel={`${moodRating}%`}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<SliderThumb bg=\"teal.400\" />\n\t\t\t\t\t\t\t\t</Tooltip>\n\t\t\t\t\t\t\t</Slider>\n\t\t\t\t\t\t</VStack>\n\t\t\t\t\t\t{currentQuestion !== 'reratemoods' ? (\n\t\t\t\t\t\t\t<DeleteButton\n\t\t\t\t\t\t\t\tdeleteHandler={() => animateThenDelete(deleteHandler)}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t) : null}\n\t\t\t\t\t</HStack>\n\t\t\t\t</Box>\n\t\t\t</Fade>\n\t\t</>\n\t)\n}\nconst DeleteButton: React.FC<ButtonProps> = ({ deleteHandler }) => {\n\treturn (\n\t\t<IconButton\n\t\t\tcolor={'black'}\n\t\t\taria-label=\"Delete Mood\"\n\t\t\tvariant=\"ghost\"\n\t\t\tsize={'sm'}\n\t\t\ticon={<CloseIcon />}\n\t\t\tonClick={deleteHandler}\n\t\t/>\n\t)\n}\n\nexport default MoodSlider\n","import {\n\tFlex,\n\tProgress,\n\tLightMode,\n\tList,\n\tListItem,\n\tText,\n\tListIcon,\n\tHeading,\n\tVStack,\n} from '@chakra-ui/react'\nimport LoadingTextField from './LoadingTextField'\nimport { Mood, isFullThoughtRecord, ThoughtRecord } from './types'\nimport UseThemeColors from '../Hooks/useThemeColors'\nimport { sliderColor } from './MoodSlider'\nimport { Accordion } from '@chakra-ui/react'\nimport AccordionElement from './AccordianElement'\nimport HotThoughtDisplay from './HotThoughtDisplay'\nimport ArgumentAccordion from './ArgumentAccordion'\nimport { emotions } from './EmotionPicker'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { RiNodeTree } from 'react-icons/ri'\ninterface MoodDisplayProps {\n\tmoods: Mood[]\n\tlabel: string\n}\nconst MoodDisplay: React.FC<MoodDisplayProps> = ({ moods, label }) => {\n\tconst { foregroundColor, textColor } = UseThemeColors()\n\treturn (\n\t\t<Flex\n\t\t\tflexDirection={'column'}\n\t\t\tm={2}\n\t\t\talignItems={'flexStart'}\n\t\t\tjustifyContent={'left'}\n\t\t\tw={'100%'}\n\t\t>\n\t\t\t<Heading m={2} ml={4} textAlign={'center'}>\n\t\t\t\t{label}\n\t\t\t</Heading>\n\t\t\t<List\n\t\t\t\tm={2}\n\t\t\t\tw={'85%'}\n\t\t\t\talignItems={'center'}\n\t\t\t\talignSelf={'center'}\n\t\t\t\tbg={foregroundColor}\n\t\t\t\tp={2}\n\t\t\t\tpb={4}\n\t\t\t>\n\t\t\t\t{moods.map(({ mood, moodRating }) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<ListItem p={2} width={'full'} key={mood}>\n\t\t\t\t\t\t\t<ListIcon\n\t\t\t\t\t\t\t\tboxSize={8}\n\t\t\t\t\t\t\t\tcolor={sliderColor(moodRating)}\n\t\t\t\t\t\t\t\tas={RiNodeTree}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<Text\n\t\t\t\t\t\t\t\tm={2}\n\t\t\t\t\t\t\t\tcolor={textColor}\n\t\t\t\t\t\t\t\tposition={'relative'}\n\t\t\t\t\t\t\t\tbottom={2}\n\t\t\t\t\t\t\t\ttextAlign={'center'}\n\t\t\t\t\t\t\t\tdisplay={'inline-flex'}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{mood}\n\t\t\t\t\t\t\t</Text>\n\t\t\t\t\t\t\t<LightMode>\n\t\t\t\t\t\t\t\t<Progress\n\t\t\t\t\t\t\t\t\tsize={'sm'}\n\t\t\t\t\t\t\t\t\tcolorScheme={sliderColor(moodRating).slice(0, -4)}\n\t\t\t\t\t\t\t\t\tvalue={moodRating}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</LightMode>\n\t\t\t\t\t\t</ListItem>\n\t\t\t\t\t)\n\t\t\t\t})}\n\t\t\t</List>\n\t\t</Flex>\n\t)\n}\ninterface EmotionDisplayProps {\n\temotionName: string\n\tlabel: string\n}\n\nconst EmotionDisplay: React.FC<EmotionDisplayProps> = ({\n\temotionName,\n\tlabel,\n}) => {\n\tconst emotion = emotions.filter(\n\t\t(emotion) => emotionName === emotion.emotionName,\n\t)[0]\n\tconst { icon, emotionColor } = emotion\n\treturn (\n\t\t<>\n\t\t\t<VStack spacing={4}>\n\t\t\t\t<Heading textAlign={'center'}> {label} </Heading>\n\t\t\t\t<FontAwesomeIcon size={'6x'} icon={icon} color={emotionColor} />\n\t\t\t\t<Heading color={emotionColor}> {emotionName} </Heading>\n\t\t\t</VStack>\n\t\t</>\n\t)\n}\ninterface ThoughtRecordDisplayProps {\n\tthoughtRecord: ThoughtRecord | undefined\n}\nconst ThoughtRecordDisplay: React.FC<ThoughtRecordDisplayProps> = ({\n\tthoughtRecord,\n}) => {\n\t// const {thoughtRecord} = useThoughtRecord()\n\tif (!isFullThoughtRecord(thoughtRecord)) {\n\t\treturn <LoadingTextField />\n\t}\n\tconst argumentsText = {\n\t\targFor: thoughtRecord.evidencefor,\n\t\targAgainst: thoughtRecord.evidenceagainst,\n\t}\n\treturn (\n\t\t<>\n\t\t\t<VStack\n\t\t\t\tm={0}\n\t\t\t\toverflow={{ base: 'auto', lg: 'visible' }}\n\t\t\t\tspacing={10}\n\t\t\t\twidth={{ base: '100%', lg: '70%' }}\n\t\t\t>\n\t\t\t\t<EmotionDisplay label=\"Emotion\" emotionName={thoughtRecord.emotion} />\n\t\t\t\t<Accordion allowToggle w={'100%'}>\n\t\t\t\t\t<AccordionElement\n\t\t\t\t\t\tlabel=\"The Situation\"\n\t\t\t\t\t\tpopoverText={thoughtRecord.situationquestion}\n\t\t\t\t\t/>\n\t\t\t\t</Accordion>\n\t\t\t\t<MoodDisplay moods={thoughtRecord.mood} label={'Moods'} />\n\t\t\t\t<MoodDisplay\n\t\t\t\t\tmoods={thoughtRecord.thoughts.thoughts}\n\t\t\t\t\tlabel={'Thoughts'}\n\t\t\t\t/>\n\t\t\t\t<HotThoughtDisplay hotThought={thoughtRecord.thoughts.hotThought} />\n\t\t\t\t<ArgumentAccordion argumentsText={argumentsText} />\n\t\t\t\t<MoodDisplay\n\t\t\t\t\tmoods={thoughtRecord.alternativethought}\n\t\t\t\t\tlabel={'Alternative thoughts'}\n\t\t\t\t/>\n\t\t\t\t<EmotionDisplay\n\t\t\t\t\tlabel=\"After Emotion\"\n\t\t\t\t\temotionName={thoughtRecord.rerateemotion}\n\t\t\t\t/>\n\t\t\t</VStack>\n\t\t</>\n\t)\n}\nexport default ThoughtRecordDisplay\n","import { Button } from '@chakra-ui/react'\nimport UseThoughtRecord from '../Hooks/UseThoughtRecord'\nimport LoadingTextField from './LoadingTextField'\nimport ThoughtRecordDisplay from './ThoughtRecordDisplay'\n\nconst SubmitThoughtRecord: React.FC = () => {\n\tconst { thoughtRecord, onSubmit, isSubmitting, isValidQuestion } =\n\t\tUseThoughtRecord()\n\tif (!isValidQuestion || !thoughtRecord) {\n\t\treturn <LoadingTextField />\n\t}\n\treturn (\n\t\t<>\n\t\t\t<ThoughtRecordDisplay thoughtRecord={thoughtRecord} />\n\t\t\t<Button\n\t\t\t\tmt={2}\n\t\t\t\tvariant={'submit'}\n\t\t\t\tisLoading={isSubmitting}\n\t\t\t\tonClick={() => onSubmit(thoughtRecord)}\n\t\t\t>\n\t\t\t\tFinish Thought Record\n\t\t\t</Button>\n\t\t</>\n\t)\n}\n\nexport default SubmitThoughtRecord\n","import { useToast } from '@chakra-ui/react'\nimport { useEffect, useState } from 'react'\nimport { useLocation, useNavigate } from 'react-router-dom'\nimport {\n\tThoughtRecord,\n\tisThoughtRecord,\n\tisKeyOfThoughtRecord,\n\tQuestionType,\n\tquestion,\n\tthoughtRecordData,\n\tisQuestion,\n\tFormValues,\n} from '../Components/types'\nimport { getToken } from '../utils/api'\nimport { useThoughtRecordApi } from './useThoughtRecordApi'\n\ninterface UseThoughtRecordReturn {\n\tlabel: string\n\tonSubmit: (data: FormValues) => void\n\tisSubmitting: boolean\n\tcurrentQuestion: string\n\tisValidQuestion: boolean | null\n\tthoughtRecord: ThoughtRecord | undefined\n}\n\nconst getLastValid = (pathname: QuestionType, thoughtRecord: ThoughtRecord) => {\n\tfor (let path of question) {\n\t\tlet thoughtRecordKey = path.slice(1)\n\t\tif (path === pathname) {\n\t\t\treturn path\n\t\t}\n\t\tif (isKeyOfThoughtRecord(thoughtRecordKey, thoughtRecord)) {\n\t\t\tif (thoughtRecord[thoughtRecordKey] === null) {\n\t\t\t\treturn path\n\t\t\t}\n\t\t}\n\t}\n\treturn pathname\n}\nconst UseThoughtRecord = (): UseThoughtRecordReturn | never => {\n\tconst toast = useToast()\n\tconst navigate = useNavigate()\n\tconst { pathname, state } = useLocation()\n\tconst [thoughtRecord, setThoughtRecord] = useState<ThoughtRecord>()\n\tconst [isValidQuestion, setIsValidQuestion] = useState<boolean | null>(null)\n\tconst {\n\t\tupdateThoughtRecord,\n\t\tgetActiveThoughtRecord,\n\t\tisSubmitting,\n\t\tsaveThoughtRecord,\n\t} = useThoughtRecordApi()\n\n\tconst token = getToken()\n\tif (!token) {\n\t\tthrow Error\n\t}\n\tuseEffect(() => {\n\t\tif (!isValidQuestion && isQuestion(pathname)) {\n\t\t\tif (thoughtRecord) {\n\t\t\t\tconst lastValid = getLastValid(pathname, thoughtRecord)\n\t\t\t\tif (lastValid !== pathname) {\n\t\t\t\t\tnavigate(lastValid)\n\t\t\t\t} else {\n\t\t\t\t\tsetIsValidQuestion(true)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}, [isValidQuestion, navigate, pathname, thoughtRecord])\n\n\tuseEffect(() => {\n\t\tconst getThoughtRecord = async () => {\n\t\t\tif (!thoughtRecord) {\n\t\t\t\tif (isThoughtRecord(state)) {\n\t\t\t\t\tsetThoughtRecord(state)\n\t\t\t\t} else {\n\t\t\t\t\tsetThoughtRecord(await getActiveThoughtRecord(token))\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (!isSubmitting) {\n\t\t\tgetThoughtRecord()\n\t\t}\n\t}, [getActiveThoughtRecord, isSubmitting, state, thoughtRecord, token])\n\n\tconst onSubmit = async (data: FormValues) => {\n\t\tif (isQuestion(pathname)) {\n\t\t\tif (pathname === '/submit') {\n\t\t\t\ttry {\n\t\t\t\t\tawait saveThoughtRecord()\n\t\t\t\t\tnavigate('/')\n\t\t\t\t} catch (error) {\n\t\t\t\t\tif (error instanceof Error) {\n\t\t\t\t\t\ttoast({\n\t\t\t\t\t\t\tstatus: 'error',\n\t\t\t\t\t\t\tdescription: 'problem submitting',\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst updateKey = pathname.slice(1)\n\t\t\t\tconst activeThoughtRecord: string = isThoughtRecord(thoughtRecord)\n\t\t\t\t\t? thoughtRecord.key\n\t\t\t\t\t: ''\n\t\t\t\tconst NextLinkIndex = question.indexOf(pathname) + 1\n\t\t\t\ttry {\n\t\t\t\t\tconst updatedRecord = await updateThoughtRecord(\n\t\t\t\t\t\tdata,\n\t\t\t\t\t\tactiveThoughtRecord,\n\t\t\t\t\t\tupdateKey,\n\t\t\t\t\t)\n\t\t\t\t\tnavigate(question[NextLinkIndex], { state: { ...updatedRecord } })\n\t\t\t\t} catch {\n\t\t\t\t\ttoast({\n\t\t\t\t\t\tstatus: 'error',\n\t\t\t\t\t\tdescription: 'problem with update',\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tlet label: string = ''\n\tlet currentQuestion: string = ''\n\tif (isQuestion(pathname)) {\n\t\tlabel = thoughtRecordData[pathname].label\n\t\tcurrentQuestion = pathname.slice(1)\n\t}\n\treturn {\n\t\tlabel: label,\n\t\tonSubmit: onSubmit,\n\t\tisSubmitting: isSubmitting,\n\t\tcurrentQuestion: currentQuestion,\n\t\tthoughtRecord: thoughtRecord,\n\t\tisValidQuestion: isValidQuestion,\n\t}\n}\nexport default UseThoughtRecord\n"],"names":["label","popoverText","UseThemeColors","foregroundColor","alignSelf","my","ml","base","lg","w","flex","textAlign","color","p","argumentsText","argFor","argAgainst","allowMultiple","allowToggle","emotionName","setSelected","selected","emotion","emotions","filter","emotionColor","icon","iconColor","useColorModeValue","buttonSize","useBreakpointValue","displayColor","getIconColor","size","onClick","handleOnClick","faFaceFrownOpen","faFaceMeh","faFaceSmile","faFaceGrin","useState","getEmotionColorByName","useThoughtRecord","isSubmitting","onSubmit","thoughtRecord","rounded","border","borderColor","m","mx","height","flexDir","position","top","spacing","map","isLoading","minH","LoadingTextField","hotThought","useThemeColors","mr","colorScheme","variant","bg","sliderColor","value","MoodEntry","deleteHandler","mood","moodRating","sliderChange","currentQuestion","UseThoughtRecord","isDeleting","setIsDeleting","in","transition","enter","duration","exit","style","flexDirection","alignItems","display","width","pl","pr","justifyContent","slice","mb","onChange","hasArrow","zIndex","fontSize","placement","isOpen","DeleteButton","setTimeout","animateThenDelete","moods","setMoods","mt","moodName","MoodDisplay","textColor","pb","boxSize","as","RiNodeTree","bottom","EmotionDisplay","isFullThoughtRecord","evidencefor","evidenceagainst","overflow","situationquestion","thoughts","HotThoughtDisplay","ArgumentAccordion","alternativethought","rerateemotion","isValidQuestion","toast","useToast","navigate","useNavigate","useLocation","pathname","state","setThoughtRecord","setIsValidQuestion","useThoughtRecordApi","updateThoughtRecord","getActiveThoughtRecord","saveThoughtRecord","token","getToken","Error","useEffect","isQuestion","lastValid","question","path","thoughtRecordKey","isKeyOfThoughtRecord","getLastValid","getThoughtRecord","isThoughtRecord","data","status","description","updateKey","activeThoughtRecord","key","NextLinkIndex","updatedRecord","thoughtRecordData"],"sourceRoot":""}