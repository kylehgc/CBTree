{"version":3,"file":"static/js/432.611f074d.chunk.js","mappings":"w3EAWaA,EAAS,SAACC,GACtB,SAAIC,MAAMC,QAAQF,IAAUA,EAAMG,OAAS,IACnC,SAAUH,EAAM,IAsDzB,EAlDyC,WACxC,OAA0BI,EAAAA,EAAAA,UAAiB,IAA3C,eAAOC,EAAP,KAAcC,EAAd,KACA,GACCC,EAAAA,EAAAA,KADOC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,SAAUC,EAAzB,EAAyBA,cAAeC,EAAxC,EAAwCA,gBAAiBC,EAAzD,EAAyDA,aAoBzD,OAjBAC,EAAAA,EAAAA,YAAU,WACe,gBAApBF,GACH,OAAID,QAAJ,IAAIA,GAAAA,EAAeI,MAClBR,EAASI,EAAcI,QAGvB,CAACH,EAAiBL,EAAUI,KAC/BG,EAAAA,EAAAA,YAAU,WACT,GAAIH,IACCK,EAAAA,EAAAA,IAAqBJ,EAAiBD,GAAgB,CACzD,IAAMM,EAAoBN,EAAcC,GACpCZ,EAAOiB,IACVV,EAASU,MAIV,CAACL,EAAiBD,IAChBA,GAIJ,iCACC,SAACO,EAAA,EAAD,CACCL,aAAcA,EACdP,MAAOA,EACPC,SAAUA,EACVY,cAAeC,EACfX,MAAOA,IAEPH,EAAMF,OAAS,GACf,SAAC,KAAD,CACCiB,GAAI,EACJC,GAAI,EACJC,KAAM,GACNC,EAAE,MACFC,UAAWZ,EACXa,YAAa,aACbC,QAAS,kBAAMjB,EAASJ,IAPzB,oBAWG,SAvBE,SAACsB,EAAA,EAAD,M,qICuDT,IAvE8C,SAAC,GAM3B,IALnBf,EAKkB,EALlBA,aACAP,EAIkB,EAJlBA,MACAC,EAGkB,EAHlBA,SACAY,EAEkB,EAFlBA,cACAV,EACkB,EADlBA,MAEQG,GAAoBiB,EAAAA,EAAAA,KAApBjB,gBACR,GAAwCP,EAAAA,EAAAA,UAAiB,IAAzD,eAAOyB,EAAP,KAAqBC,EAArB,KAeA,OACC,gCACsB,gBAApBnB,GACA,UAAC,KAAD,CACCoB,QAAS,EACTC,QAAS,GACTC,WAAY,CACXC,MAAO,CAAEC,MAAO,GAAKC,SAAU,IAC/BC,KAAM,CAAEF,MAAO,GAAKC,SAAU,KAE/BE,MAAO,CACNC,cAAe,SACfC,WAAY,SACZC,QAAS,OACTC,OAAQ,OACRC,MAAO,QAERC,IAAKhC,EAdN,WAgBC,UAAC,KAAD,CAAKiC,EAAG,EAAGtB,EAAG,MAAOH,GAAI,EAAGC,GAAI,EAAGyB,GAAI,EAAvC,WACC,SAAC,KAAD,CAAWzB,GAAI,EAAG0B,MAAO,QAASC,SAAU,GAA5C,SACExC,KAEF,SAAC,KAAD,CACCyC,KAAK,KACLC,SAjCe,SACpBC,EACAC,GAEID,GACHrB,EAAgBqB,EAAOnD,QA6BnBqD,QAASnC,QAGX,SAAC,KAAD,CACCoC,UAAW,SACX5B,QAAS,kBA5CGZ,EA4CWe,QA3CtBxB,EAAMkD,KAAI,SAACzC,GAAD,OAAUA,EAAKA,QAAM0C,SAAS1C,IAASA,GACrDR,EAAS,GAAD,eAAKD,GAAL,CAAY,CAAES,KAAMA,EAAM2C,WAAY,OAFhC,IAAC3C,GA6CZS,EAAG,MACHD,KAAM,GACNoC,GAAI,EALL,qBAWD,UAAC,KAAD,eAAWlD,EAAX,QAGD,SAAC,IAAD,CAAUH,MAAOA,EAAOC,SAAUA","sources":["Components/ThoughtRecordQuestions/FeelingQuestion.tsx","Components/ThoughtRecordQuestions/SelectQuestion.tsx"],"sourcesContent":["import { Button } from '@chakra-ui/react'\nimport { useEffect, useState } from 'react'\nimport feelings from '../../Data/feelings.json'\nimport UseThoughtRecord from '../../Hooks/UseThoughtRecord'\nimport LoadingTextField from '../Loading/LoadingTextField'\nimport SelectQuestion from './SelectQuestion'\nimport { isKeyOfThoughtRecord, Mood } from '../../types'\n\ninterface Props {\n\tdefaultMoods?: Mood[]\n}\nexport const isMood = (value: any): value is Mood[] => {\n\tif (Array.isArray(value) && value.length > 0) {\n\t\treturn 'mood' in value[0]\n\t}\n\treturn false\n}\nconst FeelingQuestion: React.FC<Props> = () => {\n\tconst [moods, setMoods] = useState<Mood[]>([])\n\tconst { label, onSubmit, thoughtRecord, currentQuestion, isSubmitting } =\n\t\tUseThoughtRecord()\n\n\tuseEffect(() => {\n\t\tif (currentQuestion === 'reratemoods') {\n\t\t\tif (thoughtRecord?.mood) {\n\t\t\t\tsetMoods(thoughtRecord.mood)\n\t\t\t}\n\t\t}\n\t}, [currentQuestion, setMoods, thoughtRecord])\n\tuseEffect(() => {\n\t\tif (thoughtRecord) {\n\t\t\tif (isKeyOfThoughtRecord(currentQuestion, thoughtRecord)) {\n\t\t\t\tconst thoughtRecordMood = thoughtRecord[currentQuestion]\n\t\t\t\tif (isMood(thoughtRecordMood)) {\n\t\t\t\t\tsetMoods(thoughtRecordMood)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}, [currentQuestion, thoughtRecord])\n\tif (!thoughtRecord) {\n\t\treturn <LoadingTextField />\n\t}\n\treturn (\n\t\t<>\n\t\t\t<SelectQuestion\n\t\t\t\tisSubmitting={isSubmitting}\n\t\t\t\tmoods={moods}\n\t\t\t\tsetMoods={setMoods}\n\t\t\t\tselectOptions={feelings}\n\t\t\t\tlabel={label}\n\t\t\t/>\n\t\t\t{moods.length > 0 ? (\n\t\t\t\t<Button\n\t\t\t\t\tmt={8}\n\t\t\t\t\tmb={2}\n\t\t\t\t\tminH={10}\n\t\t\t\t\tw=\"60%\"\n\t\t\t\t\tisLoading={isSubmitting}\n\t\t\t\t\tloadingText={'Submitting'}\n\t\t\t\t\tonClick={() => onSubmit(moods)}\n\t\t\t\t>\n\t\t\t\t\tSubmit\n\t\t\t\t</Button>\n\t\t\t) : null}\n\t\t</>\n\t)\n}\nexport default FeelingQuestion\n","import { CreatableSelect, ActionMeta } from 'chakra-react-select'\nimport { Dispatch, SetStateAction } from 'react'\nimport { Button, Box, FormLabel, Heading, SlideFade } from '@chakra-ui/react'\nimport { useState } from 'react'\nimport { Mood } from '../../types'\nimport MoodList from './MoodSlider'\nimport useThoughtRecord from '../../Hooks/UseThoughtRecord'\n\ntype Option = {\n\tvalue: string\n\tlabel: string\n}\ninterface SelectOption {\n\tlabel: string\n\tvalue: string\n}\ninterface RecordProps {\n\tmoods: Mood[]\n\tsetMoods: Dispatch<SetStateAction<Mood[]>>\n\tselectOptions: SelectOption[]\n\tlabel: string\n\tisSubmitting: boolean\n}\n\nconst SelectQuestion: React.FC<RecordProps> = ({\n\tisSubmitting,\n\tmoods,\n\tsetMoods,\n\tselectOptions,\n\tlabel,\n}: RecordProps) => {\n\tconst { currentQuestion } = useThoughtRecord()\n\tconst [selectedMood, setSelectedMood] = useState<string>('')\n\n\tconst addMood = (mood: string) => {\n\t\tif (!moods.map((mood) => mood.mood).includes(mood) && mood) {\n\t\t\tsetMoods([...moods, { mood: mood, moodRating: 0 }])\n\t\t}\n\t}\n\tconst handleChange = (\n\t\toption: Option | null,\n\t\tactionMeta: ActionMeta<Option>,\n\t) => {\n\t\tif (option) {\n\t\t\tsetSelectedMood(option.value)\n\t\t}\n\t}\n\treturn (\n\t\t<>\n\t\t\t{currentQuestion !== 'reratemoods' ? (\n\t\t\t\t<SlideFade\n\t\t\t\t\toffsetY={0}\n\t\t\t\t\toffsetX={50}\n\t\t\t\t\ttransition={{\n\t\t\t\t\t\tenter: { delay: 0.2, duration: 0.5 },\n\t\t\t\t\t\texit: { delay: 0.4, duration: 0.5 },\n\t\t\t\t\t}}\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tflexDirection: 'column',\n\t\t\t\t\t\talignItems: 'center',\n\t\t\t\t\t\tdisplay: 'flex',\n\t\t\t\t\t\theight: 'auto',\n\t\t\t\t\t\twidth: '100%',\n\t\t\t\t\t}}\n\t\t\t\t\tin={!isSubmitting}\n\t\t\t\t>\n\t\t\t\t\t<Box p={2} w={'92%'} mt={6} mb={2} mx={7}>\n\t\t\t\t\t\t<FormLabel mb={2} color={'white'} fontSize={14}>\n\t\t\t\t\t\t\t{label}\n\t\t\t\t\t\t</FormLabel>\n\t\t\t\t\t\t<CreatableSelect\n\t\t\t\t\t\t\tsize=\"md\"\n\t\t\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\t\t\toptions={selectOptions}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Box>\n\t\t\t\t\t<Button\n\t\t\t\t\t\talignSelf={'center'}\n\t\t\t\t\t\tonClick={() => addMood(selectedMood)}\n\t\t\t\t\t\tw={'60%'}\n\t\t\t\t\t\tminH={10}\n\t\t\t\t\t\tmy={6}\n\t\t\t\t\t>\n\t\t\t\t\t\tAdd\n\t\t\t\t\t</Button>\n\t\t\t\t</SlideFade>\n\t\t\t) : (\n\t\t\t\t<Heading> {label} </Heading>\n\t\t\t)}\n\n\t\t\t<MoodList moods={moods} setMoods={setMoods} />\n\t\t</>\n\t)\n}\n\nexport default SelectQuestion\n"],"names":["isMood","value","Array","isArray","length","useState","moods","setMoods","UseThoughtRecord","label","onSubmit","thoughtRecord","currentQuestion","isSubmitting","useEffect","mood","isKeyOfThoughtRecord","thoughtRecordMood","SelectQuestion","selectOptions","feelings","mt","mb","minH","w","isLoading","loadingText","onClick","LoadingTextField","useThoughtRecord","selectedMood","setSelectedMood","offsetY","offsetX","transition","enter","delay","duration","exit","style","flexDirection","alignItems","display","height","width","in","p","mx","color","fontSize","size","onChange","option","actionMeta","options","alignSelf","map","includes","moodRating","my"],"sourceRoot":""}