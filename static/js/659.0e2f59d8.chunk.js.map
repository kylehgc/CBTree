{"version":3,"file":"static/js/659.0e2f59d8.chunk.js","mappings":"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","sources":["../node_modules/@chakra-ui/progress/dist/chakra-ui-progress.esm.js","Components/ThoughtRecord.tsx"],"sourcesContent":["import { keyframes, chakra, useStyles, omitThemingProps, useMultiStyleConfig, StylesProvider } from '@chakra-ui/system';\nimport { valueToPercent, isFunction, isUndefined, __DEV__ } from '@chakra-ui/utils';\nimport * as React from 'react';\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar spin = keyframes({\n  \"0%\": {\n    strokeDasharray: \"1, 400\",\n    strokeDashoffset: \"0\"\n  },\n  \"50%\": {\n    strokeDasharray: \"400, 400\",\n    strokeDashoffset: \"-100\"\n  },\n  \"100%\": {\n    strokeDasharray: \"400, 400\",\n    strokeDashoffset: \"-260\"\n  }\n});\nvar rotate = keyframes({\n  \"0%\": {\n    transform: \"rotate(0deg)\"\n  },\n  \"100%\": {\n    transform: \"rotate(360deg)\"\n  }\n});\nvar progress = keyframes({\n  \"0%\": {\n    left: \"-40%\"\n  },\n  \"100%\": {\n    left: \"100%\"\n  }\n});\nvar stripe = keyframes({\n  from: {\n    backgroundPosition: \"1rem 0\"\n  },\n  to: {\n    backgroundPosition: \"0 0\"\n  }\n});\n\n/**\n * Get the common `aria-*` attributes for both the linear and circular\n * progress components.\n */\nfunction getProgressProps(options) {\n  var _options$value = options.value,\n      value = _options$value === void 0 ? 0 : _options$value,\n      min = options.min,\n      max = options.max,\n      valueText = options.valueText,\n      getValueText = options.getValueText,\n      isIndeterminate = options.isIndeterminate;\n  var percent = valueToPercent(value, min, max);\n\n  var getAriaValueText = function getAriaValueText() {\n    if (value == null) return undefined;\n    return isFunction(getValueText) ? getValueText(value, percent) : valueText;\n  };\n\n  return {\n    bind: {\n      \"data-indeterminate\": isIndeterminate ? \"\" : undefined,\n      \"aria-valuemax\": max,\n      \"aria-valuemin\": min,\n      \"aria-valuenow\": isIndeterminate ? undefined : value,\n      \"aria-valuetext\": getAriaValueText(),\n      role: \"progressbar\"\n    },\n    percent: percent,\n    value: value\n  };\n}\n\nvar _excluded$1 = [\"size\", \"isIndeterminate\"],\n    _excluded2$1 = [\"size\", \"max\", \"min\", \"valueText\", \"getValueText\", \"value\", \"capIsRound\", \"children\", \"thickness\", \"color\", \"trackColor\", \"isIndeterminate\"];\n\nvar Circle = function Circle(props) {\n  return /*#__PURE__*/React.createElement(chakra.circle, _extends({\n    cx: 50,\n    cy: 50,\n    r: 42,\n    fill: \"transparent\"\n  }, props));\n};\n\nif (__DEV__) {\n  Circle.displayName = \"Circle\";\n}\n\nvar Shape = function Shape(props) {\n  var size = props.size,\n      isIndeterminate = props.isIndeterminate,\n      rest = _objectWithoutPropertiesLoose(props, _excluded$1);\n\n  return /*#__PURE__*/React.createElement(chakra.svg, _extends({\n    viewBox: \"0 0 100 100\",\n    __css: {\n      width: size,\n      height: size,\n      animation: isIndeterminate ? rotate + \" 2s linear infinite\" : undefined\n    }\n  }, rest));\n};\n\nif (__DEV__) {\n  Shape.displayName = \"Shape\";\n}\n\n/**\n * CircularProgress is used to indicate the progress of an activity.\n * It is built using `svg` and `circle` components with support for\n * theming and `indeterminate` state\n *\n * @see Docs https://chakra-ui.com/circularprogress\n * @todo add theming support for circular progress\n */\nvar CircularProgress = function CircularProgress(props) {\n  var _progress$percent;\n\n  var _props$size = props.size,\n      size = _props$size === void 0 ? \"48px\" : _props$size,\n      _props$max = props.max,\n      max = _props$max === void 0 ? 100 : _props$max,\n      _props$min = props.min,\n      min = _props$min === void 0 ? 0 : _props$min,\n      valueText = props.valueText,\n      getValueText = props.getValueText,\n      value = props.value,\n      capIsRound = props.capIsRound,\n      children = props.children,\n      _props$thickness = props.thickness,\n      thickness = _props$thickness === void 0 ? \"10px\" : _props$thickness,\n      _props$color = props.color,\n      color = _props$color === void 0 ? \"#0078d4\" : _props$color,\n      _props$trackColor = props.trackColor,\n      trackColor = _props$trackColor === void 0 ? \"#edebe9\" : _props$trackColor,\n      isIndeterminate = props.isIndeterminate,\n      rest = _objectWithoutPropertiesLoose(props, _excluded2$1);\n\n  var progress = getProgressProps({\n    min: min,\n    max: max,\n    value: value,\n    valueText: valueText,\n    getValueText: getValueText,\n    isIndeterminate: isIndeterminate\n  });\n  var determinant = isIndeterminate ? undefined : ((_progress$percent = progress.percent) != null ? _progress$percent : 0) * 2.64;\n  var strokeDasharray = isUndefined(determinant) ? undefined : determinant + \" \" + (264 - determinant);\n  var indicatorProps = isIndeterminate ? {\n    css: {\n      animation: spin + \" 1.5s linear infinite\"\n    }\n  } : {\n    strokeDashoffset: 66,\n    strokeDasharray: strokeDasharray,\n    transitionProperty: \"stroke-dasharray, stroke\",\n    transitionDuration: \"0.6s\",\n    transitionTimingFunction: \"ease\"\n  };\n  var rootStyles = {\n    display: \"inline-block\",\n    position: \"relative\",\n    verticalAlign: \"middle\",\n    fontSize: size\n  };\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({\n    className: \"chakra-progress\"\n  }, progress.bind, rest, {\n    __css: rootStyles\n  }), /*#__PURE__*/React.createElement(Shape, {\n    size: size,\n    isIndeterminate: isIndeterminate\n  }, /*#__PURE__*/React.createElement(Circle, {\n    stroke: trackColor,\n    strokeWidth: thickness,\n    className: \"chakra-progress__track\"\n  }), /*#__PURE__*/React.createElement(Circle, _extends({\n    stroke: color,\n    strokeWidth: thickness,\n    className: \"chakra-progress__indicator\",\n    strokeLinecap: capIsRound ? \"round\" : undefined\n    /**\n     * fix issue in Safari where indictor still shows when value is 0\n     * @see Issue https://github.com/chakra-ui/chakra-ui/issues/3754\n     */\n    ,\n    opacity: progress.value === 0 && !isIndeterminate ? 0 : undefined\n  }, indicatorProps))), children);\n};\n\nif (__DEV__) {\n  CircularProgress.displayName = \"CircularProgress\";\n}\n/**\n * CircularProgress component label. In most cases it is a numeric indicator\n * of the circular progress component's value\n */\n\n\nvar CircularProgressLabel = chakra(\"div\", {\n  baseStyle: {\n    fontSize: \"0.24em\",\n    top: \"50%\",\n    left: \"50%\",\n    width: \"100%\",\n    textAlign: \"center\",\n    position: \"absolute\",\n    transform: \"translate(-50%, -50%)\"\n  }\n});\n\nif (__DEV__) {\n  CircularProgressLabel.displayName = \"CircularProgressLabel\";\n}\n\nvar _excluded = [\"min\", \"max\", \"value\", \"isIndeterminate\"],\n    _excluded2 = [\"value\", \"min\", \"max\", \"hasStripe\", \"isAnimated\", \"children\", \"borderRadius\", \"isIndeterminate\", \"aria-label\", \"aria-labelledby\"];\n\n/**\n * ProgressLabel is used to show the numeric value of the progress.\n * @see Docs https://chakra-ui.com/progress\n */\nvar ProgressLabel = function ProgressLabel(props) {\n  var styles = useStyles();\n\n  var labelStyles = _extends({\n    top: \"50%\",\n    left: \"50%\",\n    width: \"100%\",\n    textAlign: \"center\",\n    position: \"absolute\",\n    transform: \"translate(-50%, -50%)\"\n  }, styles.label);\n\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({}, props, {\n    __css: labelStyles\n  }));\n};\n\nif (__DEV__) {\n  ProgressLabel.displayName = \"ProgressLabel\";\n}\n\n/**\n * ProgressFilledTrack (Linear)\n *\n * The progress component that visually indicates the current level of the progress bar.\n * It applies `background-color` and changes its width.\n *\n * @see Docs https://chakra-ui.com/progress\n */\nvar ProgressFilledTrack = function ProgressFilledTrack(props) {\n  var min = props.min,\n      max = props.max,\n      value = props.value,\n      isIndeterminate = props.isIndeterminate,\n      rest = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var progress = getProgressProps({\n    value: value,\n    min: min,\n    max: max,\n    isIndeterminate: isIndeterminate\n  });\n  var styles = useStyles();\n\n  var trackStyles = _extends({\n    height: \"100%\"\n  }, styles.filledTrack);\n\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({\n    style: _extends({\n      width: progress.percent + \"%\"\n    }, rest.style)\n  }, progress.bind, rest, {\n    __css: trackStyles\n  }));\n};\n\n/**\n * Progress (Linear)\n *\n * Progress is used to display the progress status for a task that takes a long\n * time or consists of several steps.\n *\n * It includes accessible attributes to help assistive technologies understand\n * and speak the progress values.\n *\n * @see Docs https://chakra-ui.com/progress\n */\nvar Progress = function Progress(props) {\n  var _styles$track;\n\n  var _omitThemingProps = omitThemingProps(props),\n      value = _omitThemingProps.value,\n      _omitThemingProps$min = _omitThemingProps.min,\n      min = _omitThemingProps$min === void 0 ? 0 : _omitThemingProps$min,\n      _omitThemingProps$max = _omitThemingProps.max,\n      max = _omitThemingProps$max === void 0 ? 100 : _omitThemingProps$max,\n      hasStripe = _omitThemingProps.hasStripe,\n      isAnimated = _omitThemingProps.isAnimated,\n      children = _omitThemingProps.children,\n      propBorderRadius = _omitThemingProps.borderRadius,\n      isIndeterminate = _omitThemingProps.isIndeterminate,\n      ariaLabel = _omitThemingProps[\"aria-label\"],\n      ariaLabelledBy = _omitThemingProps[\"aria-labelledby\"],\n      rest = _objectWithoutPropertiesLoose(_omitThemingProps, _excluded2);\n\n  var styles = useMultiStyleConfig(\"Progress\", props);\n  var borderRadius = propBorderRadius != null ? propBorderRadius : (_styles$track = styles.track) == null ? void 0 : _styles$track.borderRadius;\n  var stripeAnimation = {\n    animation: stripe + \" 1s linear infinite\"\n  };\n  /**\n   * We should not use stripe if it is `indeterminate`\n   */\n\n  var shouldAddStripe = !isIndeterminate && hasStripe;\n  var shouldAnimateStripe = shouldAddStripe && isAnimated;\n  /**\n   * Generate styles for stripe and stripe animation\n   */\n\n  var css = _extends({}, shouldAnimateStripe && stripeAnimation, isIndeterminate && {\n    position: \"absolute\",\n    willChange: \"left\",\n    minWidth: \"50%\",\n    animation: progress + \" 1s ease infinite normal none running\"\n  });\n\n  var trackStyles = _extends({\n    overflow: \"hidden\",\n    position: \"relative\"\n  }, styles.track);\n\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({\n    borderRadius: borderRadius,\n    __css: trackStyles\n  }, rest), /*#__PURE__*/React.createElement(StylesProvider, {\n    value: styles\n  }, /*#__PURE__*/React.createElement(ProgressFilledTrack, {\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabelledBy,\n    min: min,\n    max: max,\n    value: value,\n    isIndeterminate: isIndeterminate,\n    css: css,\n    borderRadius: borderRadius\n  }), children));\n};\n\nif (__DEV__) {\n  Progress.displayName = \"Progress\";\n}\n\nexport { CircularProgress, CircularProgressLabel, Progress, ProgressLabel };\n","import useThoughtRecord from '../Hooks/UseThoughtRecord'\nimport { Icon, Flex,Box, Progress, List, ListItem, Text, HStack, ListIcon, Heading, Spacer, VStack } from '@chakra-ui/react'\nimport LoadingTextField from './LoadingTextField'\nimport { Mood, isFullThoughtRecord } from './types'\nimport UseThemeColors from '../Hooks/useThemeColors'\nimport {RiNodeTree} from 'react-icons/ri'\nimport {GiEvilTree} from 'react-icons/gi'\nimport { sliderColor } from './MoodSlider'\nimport { IconType } from 'react-icons'\nimport { Collapse, Accordion} from '@chakra-ui/react'\nimport AccordionElement from './AccordianElement'\nimport HotThoughtDisplay from './HotThoughtDisplay'\nimport ArgumentAccordion from './ArgumentAccordion'\n\n\ninterface MoodDisplayProps {\n  moods: Mood[],\n  label: string\n} \nconst MoodDisplay: React.FC<MoodDisplayProps> = ({moods,label}) => {\n  const {foregroundColor} = UseThemeColors() \n  return (\n    <Flex flexDirection={\"column\"} m={2} alignItems={\"flexStart\"} justifyContent={\"left\"} w={\"100%\"}>\n      <Heading m={2} ml={4} textAlign={\"center\"}> {label} </Heading>\n      <List m={2} w={\"80%\"} alignItems={\"center\"} alignSelf={\"center\"} bg={foregroundColor} p={2} pb={4}>\n        {moods.map(({mood, moodRating}) => {\n          return (\n            <ListItem p={2} width={\"full\"} key={mood}> \n              <ListIcon boxSize={8} color={sliderColor(moodRating)} as={RiNodeTree}/> \n              <Text m={2} position={\"relative\"} bottom={2} textAlign={\"right\"} display={\"inline-flex\"}>{mood}</Text>\n              <Progress size={\"xs\"} colorScheme={sliderColor(moodRating).slice(0,-4)} value={moodRating}/>\n\n            </ListItem>\n            \n          )\n        })}\n      </List>\n    </Flex>\n      \n  )\n}\n\nconst ThoughtRecordDisplay = () => {\n\n  const {thoughtRecord} = useThoughtRecord() \n  if(!isFullThoughtRecord(thoughtRecord)) {\n    return <LoadingTextField/>\n  }\n  const argumentsText = {argFor: thoughtRecord.evidencefor, argAgainst: thoughtRecord.evidenceagainst}\n\n  return (\n    <>\n      <VStack overflow={\"scroll\"} m={0} spacing={10} width={\"100%\"}>\n        <Accordion allowToggle w={\"100%\"}>\n          <AccordionElement label=\"The Situation\" popoverText={thoughtRecord.situationquestion}/> \n        </Accordion>\n        <MoodDisplay moods={thoughtRecord.mood} label={\"Moods\"} />\n        <MoodDisplay moods={thoughtRecord.thoughts.thoughts} label={\"Thoughts\"} />\n        <HotThoughtDisplay hotThought={thoughtRecord.thoughts.hotThought}/>\n        <ArgumentAccordion argumentsText={argumentsText}/>\n        <MoodDisplay moods={thoughtRecord.alternativethought} label={\"Alternative thoughts\"}/>\n        <MoodDisplay moods={thoughtRecord.reratemoods} label={\"Moods after\"}/>  \n      </VStack>\n    </>\n  )\n}\n\n\nexport default ThoughtRecordDisplay\n\n"],"names":["_objectWithoutPropertiesLoose","source","excluded","key","i","target","sourceKeys","Object","keys","length","indexOf","_extends","assign","arguments","prototype","hasOwnProperty","call","apply","this","keyframes","strokeDasharray","strokeDashoffset","rotate","transform","progress","left","stripe","from","backgroundPosition","to","getProgressProps","options","_options$value","value","min","max","valueText","getValueText","isIndeterminate","percent","valueToPercent","bind","undefined","isFunction","getAriaValueText","role","_excluded$1","Circle","props","React","chakra","cx","cy","r","fill","__DEV__","displayName","Shape","size","rest","viewBox","__css","width","height","animation","CircularProgressLabel","baseStyle","fontSize","top","textAlign","position","_excluded","_excluded2","ProgressFilledTrack","trackStyles","useStyles","filledTrack","style","Progress","_styles$track","_omitThemingProps","omitThemingProps","_omitThemingProps$min","_omitThemingProps$max","hasStripe","isAnimated","children","propBorderRadius","borderRadius","ariaLabel","ariaLabelledBy","styles","useMultiStyleConfig","track","css","willChange","minWidth","overflow","StylesProvider","MoodDisplay","moods","label","foregroundColor","UseThemeColors","flexDirection","m","alignItems","justifyContent","w","ml","alignSelf","bg","p","pb","map","mood","moodRating","boxSize","color","sliderColor","as","RiNodeTree","bottom","display","colorScheme","slice","thoughtRecord","useThoughtRecord","isFullThoughtRecord","LoadingTextField","argumentsText","argFor","evidencefor","argAgainst","evidenceagainst","spacing","allowToggle","popoverText","situationquestion","thoughts","HotThoughtDisplay","hotThought","ArgumentAccordion","alternativethought","reratemoods"],"sourceRoot":""}