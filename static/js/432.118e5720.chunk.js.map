{"version":3,"file":"static/js/432.118e5720.chunk.js","mappings":"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","sources":["Components/ThoughtRecordQuestions/FeelingQuestion.tsx","Components/ThoughtRecordQuestions/MoodSlider.tsx","Components/ThoughtRecordQuestions/SelectQuestion.tsx","Hooks/UseThoughtRecord.tsx","Hooks/useThoughtRecordApi.tsx"],"sourcesContent":["import { Button } from '@chakra-ui/react'\nimport { useEffect, useState } from 'react'\nimport feelings from '../../Data/feelings.json'\nimport UseThoughtRecord from '../../Hooks/UseThoughtRecord'\nimport LoadingTextField from '../Loading/LoadingTextField'\nimport SelectQuestion from './SelectQuestion'\nimport { isKeyOfThoughtRecord, Mood } from '../../types'\n\ninterface Props {\n\tdefaultMoods?: Mood[]\n}\nexport const isMood = (value: any): value is Mood[] => {\n\tif (Array.isArray(value) && value.length > 0) {\n\t\treturn 'mood' in value[0]\n\t}\n\treturn false\n}\nconst FeelingQuestion: React.FC<Props> = () => {\n\tconst [moods, setMoods] = useState<Mood[]>([])\n\tconst { label, onSubmit, thoughtRecord, currentQuestion, isSubmitting } =\n\t\tUseThoughtRecord()\n\n\tuseEffect(() => {\n\t\tif (currentQuestion === 'reratemoods') {\n\t\t\tif (thoughtRecord?.mood) {\n\t\t\t\tsetMoods(thoughtRecord.mood)\n\t\t\t}\n\t\t}\n\t}, [currentQuestion, setMoods, thoughtRecord])\n\tuseEffect(() => {\n\t\tif (thoughtRecord) {\n\t\t\tif (isKeyOfThoughtRecord(currentQuestion, thoughtRecord)) {\n\t\t\t\tconst thoughtRecordMood = thoughtRecord[currentQuestion]\n\t\t\t\tif (isMood(thoughtRecordMood)) {\n\t\t\t\t\tsetMoods(thoughtRecordMood)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}, [currentQuestion, thoughtRecord])\n\tif (!thoughtRecord) {\n\t\treturn <LoadingTextField />\n\t}\n\treturn (\n\t\t<>\n\t\t\t<SelectQuestion\n\t\t\t\tisSubmitting={isSubmitting}\n\t\t\t\tmoods={moods}\n\t\t\t\tsetMoods={setMoods}\n\t\t\t\tselectOptions={feelings}\n\t\t\t\tlabel={label}\n\t\t\t/>\n\t\t\t{moods.length > 0 ? (\n\t\t\t\t<Button\n\t\t\t\t\tmt={8}\n\t\t\t\t\tmb={2}\n\t\t\t\t\tminH={10}\n\t\t\t\t\tw=\"60%\"\n\t\t\t\t\tisLoading={isSubmitting}\n\t\t\t\t\tloadingText={'Submitting'}\n\t\t\t\t\tonClick={() => onSubmit(moods)}\n\t\t\t\t>\n\t\t\t\t\tSubmit\n\t\t\t\t</Button>\n\t\t\t) : null}\n\t\t</>\n\t)\n}\nexport default FeelingQuestion\n","import {\n\tTooltip,\n\tBox,\n\tSlider,\n\tText,\n\tIconButton,\n\tHStack,\n\tSliderFilledTrack,\n\tSliderThumb,\n\tSliderTrack,\n\tVStack,\n\tCenter,\n\tFade,\n} from '@chakra-ui/react'\nimport { CloseIcon } from '@chakra-ui/icons'\nimport { Mood } from '../../types'\nimport { SetStateAction, useState } from 'react'\nimport React from 'react'\nimport UseThemeColors from '../../Hooks/useThemeColors'\nimport UseThoughtRecord from '../../Hooks/UseThoughtRecord'\ninterface ButtonProps {\n\tdeleteHandler: React.MouseEventHandler<HTMLButtonElement>\n}\ninterface MoodEntryProps {\n\tmood: string\n\tmoodRating: number\n\tsliderChange: (value: number) => void\n\tdeleteHandler: () => void\n}\n\nexport const sliderColor = (value: number): string => {\n\tif (value < 25) {\n\t\treturn 'green.400'\n\t}\n\tif (value < 50) {\n\t\treturn 'yellow.600'\n\t}\n\tif (value < 75) {\n\t\treturn 'orange.400'\n\t}\n\treturn 'red.800'\n}\ninterface SliderProps {\n\tmoods: Mood[]\n\tsetMoods: (value: SetStateAction<Mood[]>) => void\n}\nconst MoodSlider: React.FC<SliderProps> = ({ moods, setMoods }) => {\n\tconst deleteHandler = (moodName: string) => {\n\t\tsetMoods(moods.filter((mood) => mood.mood !== moodName))\n\t}\n\tconst sliderChange = (moodName: string) => (value: number) => {\n\t\tsetMoods((moods) =>\n\t\t\tmoods.map((mood) => {\n\t\t\t\tif (mood.mood === moodName) {\n\t\t\t\t\treturn { mood: mood.mood, moodRating: value }\n\t\t\t\t} else {\n\t\t\t\t\treturn mood\n\t\t\t\t}\n\t\t\t}),\n\t\t)\n\t}\n\treturn (\n\t\t<Center flexDirection={'column'} w={'100%'} mt={0} mb={0}>\n\t\t\t{moods.map(({ mood, moodRating }) => (\n\t\t\t\t<MoodEntry\n\t\t\t\t\tmood={mood}\n\t\t\t\t\tkey={mood}\n\t\t\t\t\tdeleteHandler={() => deleteHandler(mood)}\n\t\t\t\t\tsliderChange={sliderChange(mood)}\n\t\t\t\t\tmoodRating={moodRating}\n\t\t\t\t/>\n\t\t\t))}\n\t\t</Center>\n\t)\n}\nconst MoodEntry: React.FC<MoodEntryProps> = ({\n\tdeleteHandler,\n\tmood,\n\tmoodRating,\n\tsliderChange,\n}: MoodEntryProps) => {\n\tconst { currentQuestion } = UseThoughtRecord()\n\tconst [isDeleting, setIsDeleting] = useState(false)\n\tconst animateThenDelete = (deleteHandler: () => void) => {\n\t\tsetIsDeleting(true)\n\t\tsetTimeout(deleteHandler, 500)\n\t}\n\tconst { foregroundColor } = UseThemeColors()\n\treturn (\n\t\t<>\n\t\t\t<Fade\n\t\t\t\tin={!isDeleting}\n\t\t\t\ttransition={{ enter: { duration: 0.5 }, exit: { duration: 0.5 } }}\n\t\t\t\tstyle={{\n\t\t\t\t\tflexDirection: 'column',\n\t\t\t\t\talignItems: 'center',\n\t\t\t\t\tdisplay: 'flex',\n\t\t\t\t\theight: 'auto',\n\t\t\t\t\twidth: '100%',\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<Box w={{ base: 'full', lg: '80%' }} my={3} alignSelf={'center'}>\n\t\t\t\t\t<HStack\n\t\t\t\t\t\trounded={'2xl'}\n\t\t\t\t\t\tmx={3}\n\t\t\t\t\t\tbg={foregroundColor}\n\t\t\t\t\t\tpl={2}\n\t\t\t\t\t\tminH={20}\n\t\t\t\t\t\tpr={1}\n\t\t\t\t\t\tjustifyContent={'center'}\n\t\t\t\t\t>\n\t\t\t\t\t\t<VStack ml={2} spacing={2} p={1} w={'100%'}>\n\t\t\t\t\t\t\t<Text w={'100%'} textAlign={'left'}>\n\t\t\t\t\t\t\t\t{mood}\n\t\t\t\t\t\t\t</Text>\n\t\t\t\t\t\t\t<Slider\n\t\t\t\t\t\t\t\tcolorScheme={sliderColor(moodRating).slice(0, -4)}\n\t\t\t\t\t\t\t\tml={2}\n\t\t\t\t\t\t\t\tmr={1}\n\t\t\t\t\t\t\t\tmb={2}\n\t\t\t\t\t\t\t\tonChange={(value) => sliderChange(value)}\n\t\t\t\t\t\t\t\tvalue={moodRating}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<SliderTrack>\n\t\t\t\t\t\t\t\t\t<SliderFilledTrack />\n\t\t\t\t\t\t\t\t</SliderTrack>\n\t\t\t\t\t\t\t\t<Tooltip\n\t\t\t\t\t\t\t\t\thasArrow\n\t\t\t\t\t\t\t\t\tzIndex={-9999}\n\t\t\t\t\t\t\t\t\tfontSize={'sm'}\n\t\t\t\t\t\t\t\t\tbg={sliderColor(moodRating)}\n\t\t\t\t\t\t\t\t\tcolor=\"white\"\n\t\t\t\t\t\t\t\t\tplacement=\"right\"\n\t\t\t\t\t\t\t\t\tisOpen={!isDeleting}\n\t\t\t\t\t\t\t\t\tlabel={`${moodRating}%`}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<SliderThumb bg=\"teal.400\" />\n\t\t\t\t\t\t\t\t</Tooltip>\n\t\t\t\t\t\t\t</Slider>\n\t\t\t\t\t\t</VStack>\n\t\t\t\t\t\t{currentQuestion !== 'reratemoods' ? (\n\t\t\t\t\t\t\t<DeleteButton\n\t\t\t\t\t\t\t\tdeleteHandler={() => animateThenDelete(deleteHandler)}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t) : null}\n\t\t\t\t\t</HStack>\n\t\t\t\t</Box>\n\t\t\t</Fade>\n\t\t</>\n\t)\n}\nconst DeleteButton: React.FC<ButtonProps> = ({ deleteHandler }) => {\n\treturn (\n\t\t<IconButton\n\t\t\tcolor={'black'}\n\t\t\taria-label=\"Delete Mood\"\n\t\t\tvariant=\"ghost\"\n\t\t\tsize={'sm'}\n\t\t\ticon={<CloseIcon />}\n\t\t\tonClick={deleteHandler}\n\t\t/>\n\t)\n}\n\nexport default MoodSlider\n","import { CreatableSelect, ActionMeta } from 'chakra-react-select'\nimport { Dispatch, SetStateAction } from 'react'\nimport { Button, Box, FormLabel, Heading, SlideFade } from '@chakra-ui/react'\nimport { useState } from 'react'\nimport { Mood } from '../../types'\nimport MoodList from './MoodSlider'\nimport useThoughtRecord from '../../Hooks/UseThoughtRecord'\n\ntype Option = {\n\tvalue: string\n\tlabel: string\n}\ninterface SelectOption {\n\tlabel: string\n\tvalue: string\n}\ninterface RecordProps {\n\tmoods: Mood[]\n\tsetMoods: Dispatch<SetStateAction<Mood[]>>\n\tselectOptions: SelectOption[]\n\tlabel: string\n\tisSubmitting: boolean\n}\n\nconst SelectQuestion: React.FC<RecordProps> = ({\n\tisSubmitting,\n\tmoods,\n\tsetMoods,\n\tselectOptions,\n\tlabel,\n}: RecordProps) => {\n\tconst { currentQuestion } = useThoughtRecord()\n\tconst [selectedMood, setSelectedMood] = useState<string>('')\n\n\tconst addMood = (mood: string) => {\n\t\tif (!moods.map((mood) => mood.mood).includes(mood) && mood) {\n\t\t\tsetMoods([...moods, { mood: mood, moodRating: 0 }])\n\t\t}\n\t}\n\tconst handleChange = (\n\t\toption: Option | null,\n\t\tactionMeta: ActionMeta<Option>,\n\t) => {\n\t\tif (option) {\n\t\t\tsetSelectedMood(option.value)\n\t\t}\n\t}\n\treturn (\n\t\t<>\n\t\t\t{currentQuestion !== 'reratemoods' ? (\n\t\t\t\t<SlideFade\n\t\t\t\t\toffsetY={0}\n\t\t\t\t\toffsetX={50}\n\t\t\t\t\ttransition={{\n\t\t\t\t\t\tenter: { delay: 0.2, duration: 0.5 },\n\t\t\t\t\t\texit: { delay: 0.4, duration: 0.5 },\n\t\t\t\t\t}}\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tflexDirection: 'column',\n\t\t\t\t\t\talignItems: 'center',\n\t\t\t\t\t\tdisplay: 'flex',\n\t\t\t\t\t\theight: 'auto',\n\t\t\t\t\t\twidth: '100%',\n\t\t\t\t\t}}\n\t\t\t\t\tin={!isSubmitting}\n\t\t\t\t>\n\t\t\t\t\t<Box p={2} w={'92%'} mt={6} mb={2} mx={7}>\n\t\t\t\t\t\t<FormLabel mb={2} color={'white'} fontSize={14}>\n\t\t\t\t\t\t\t{label}\n\t\t\t\t\t\t</FormLabel>\n\t\t\t\t\t\t<CreatableSelect\n\t\t\t\t\t\t\tsize=\"md\"\n\t\t\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\t\t\toptions={selectOptions}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Box>\n\t\t\t\t\t<Button\n\t\t\t\t\t\talignSelf={'center'}\n\t\t\t\t\t\tonClick={() => addMood(selectedMood)}\n\t\t\t\t\t\tw={'60%'}\n\t\t\t\t\t\tminH={10}\n\t\t\t\t\t\tmy={6}\n\t\t\t\t\t>\n\t\t\t\t\t\tAdd\n\t\t\t\t\t</Button>\n\t\t\t\t</SlideFade>\n\t\t\t) : (\n\t\t\t\t<Heading> {label} </Heading>\n\t\t\t)}\n\n\t\t\t<MoodList moods={moods} setMoods={setMoods} />\n\t\t</>\n\t)\n}\n\nexport default SelectQuestion\n","import { useToast } from '@chakra-ui/react'\nimport { useEffect, useState } from 'react'\nimport { useLocation, useNavigate } from 'react-router-dom'\nimport {\n\tThoughtRecord,\n\tisThoughtRecord,\n\tisKeyOfThoughtRecord,\n\tQuestionType,\n\tquestion,\n\tthoughtRecordData,\n\tisQuestion,\n\tFormValues,\n} from '../types'\nimport useThoughtRecordApi from './useThoughtRecordApi'\n\ninterface UseThoughtRecordReturn {\n\tlabel: string\n\tonSubmit: (data: FormValues) => void\n\tisSubmitting: boolean\n\tcurrentQuestion: string\n\tisValidQuestion: boolean | null\n\tthoughtRecord: ThoughtRecord | undefined\n}\n\nconst getLastValid = (pathname: QuestionType, thoughtRecord: ThoughtRecord) => {\n\tfor (let path of question) {\n\t\tlet thoughtRecordKey = path.slice(1)\n\t\tif (path === pathname) {\n\t\t\treturn path\n\t\t}\n\t\tif (isKeyOfThoughtRecord(thoughtRecordKey, thoughtRecord)) {\n\t\t\tif (thoughtRecord[thoughtRecordKey] === null) {\n\t\t\t\treturn path\n\t\t\t}\n\t\t}\n\t}\n\treturn pathname\n}\nconst UseThoughtRecord = (): UseThoughtRecordReturn | never => {\n\tconst toast = useToast()\n\tconst navigate = useNavigate()\n\tconst { pathname, state } = useLocation()\n\tconst [thoughtRecord, setThoughtRecord] = useState<ThoughtRecord>()\n\tconst [isValidQuestion, setIsValidQuestion] = useState<boolean | null>(null)\n\tconst {\n\t\tupdateThoughtRecord,\n\t\tgetActiveThoughtRecord,\n\t\tisSubmitting,\n\t\tsaveThoughtRecord,\n\t} = useThoughtRecordApi()\n\n\tuseEffect(() => {\n\t\tif (!isValidQuestion && isQuestion(pathname)) {\n\t\t\tif (thoughtRecord) {\n\t\t\t\tconst lastValid = getLastValid(pathname, thoughtRecord)\n\t\t\t\tif (lastValid !== pathname) {\n\t\t\t\t\tnavigate(lastValid)\n\t\t\t\t} else {\n\t\t\t\t\tsetIsValidQuestion(true)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}, [isValidQuestion, navigate, pathname, thoughtRecord])\n\n\tuseEffect(() => {\n\t\tconst getThoughtRecord = async () => {\n\t\t\tif (!thoughtRecord) {\n\t\t\t\tif (isThoughtRecord(state)) {\n\t\t\t\t\tsetThoughtRecord(state)\n\t\t\t\t} else {\n\t\t\t\t\tsetThoughtRecord(await getActiveThoughtRecord())\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (!thoughtRecord) {\n\t\t\tgetThoughtRecord()\n\t\t}\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, [])\n\n\tconst onSubmit = async (data: FormValues) => {\n\t\tif (isQuestion(pathname)) {\n\t\t\tif (pathname === '/submit') {\n\t\t\t\ttry {\n\t\t\t\t\tawait saveThoughtRecord()\n\t\t\t\t\tnavigate('/thoughtrecords')\n\t\t\t\t} catch (error) {\n\t\t\t\t\tif (error instanceof Error) {\n\t\t\t\t\t\ttoast({\n\t\t\t\t\t\t\tstatus: 'error',\n\t\t\t\t\t\t\tdescription: 'problem submitting',\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst updateKey = pathname.slice(1)\n\t\t\t\tconst activeThoughtRecord: string = isThoughtRecord(thoughtRecord)\n\t\t\t\t\t? thoughtRecord.key\n\t\t\t\t\t: ''\n\t\t\t\tconst NextLinkIndex = question.indexOf(pathname) + 1\n\t\t\t\ttry {\n\t\t\t\t\tconst updatedRecord = await updateThoughtRecord(\n\t\t\t\t\t\tdata,\n\t\t\t\t\t\tactiveThoughtRecord,\n\t\t\t\t\t\tupdateKey,\n\t\t\t\t\t)\n\t\t\t\t\tnavigate(question[NextLinkIndex], { state: { ...updatedRecord } })\n\t\t\t\t} catch {\n\t\t\t\t\ttoast({\n\t\t\t\t\t\tstatus: 'error',\n\t\t\t\t\t\tdescription: 'problem with update',\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tlet label: string = ''\n\tlet currentQuestion: string = ''\n\tif (isQuestion(pathname)) {\n\t\tlabel = thoughtRecordData[pathname].label\n\t\tcurrentQuestion = pathname.slice(1)\n\t}\n\treturn {\n\t\tlabel: label,\n\t\tonSubmit: onSubmit,\n\t\tisSubmitting: isSubmitting,\n\t\tcurrentQuestion: currentQuestion,\n\t\tthoughtRecord: thoughtRecord,\n\t\tisValidQuestion: isValidQuestion,\n\t}\n}\nexport default UseThoughtRecord\n","import { useState } from 'react'\nimport {\n\tthoughtRecordEndPoint,\n\tgetAuthHeader,\n\tuserEndPoint,\n} from '../Utils/api'\nimport useAuth from './useAuth'\nimport { FormValues, ThoughtRecord, isThoughtRecord, User } from '../types'\n/* returns a function that takes in the current path and active thought record \nto update and a piece of state that shows if the data is currently being fetched */\n\ntype FetchThoughtRecord = () => Promise<ThoughtRecord>\n\ninterface useThoughtRecordReturn {\n\tdeleteThoughtRecord: (thoughtRecord: string) => Promise<string>\n\tgetActiveThoughtRecord: FetchThoughtRecord\n\tgetNewThoughtRecord: FetchThoughtRecord\n\tgetAllThoughtRecords: () => Promise<ThoughtRecord[]>\n\tupdateThoughtRecord: (\n\t\tdata: FormValues,\n\t\tactiveThoughtRecord: string,\n\t\tupdateKey: string,\n\t) => Promise<ThoughtRecord>\n\tsaveThoughtRecord: () => Promise<User>\n\teditThoughtRecord: (thoughtRecordId: string) => Promise<ThoughtRecord>\n\tisSubmitting: boolean\n}\n\nconst useThoughtRecordApi = (): useThoughtRecordReturn => {\n\tconst { logout } = useAuth()\n\tconst authHeader = getAuthHeader()\n\tconst [isSubmitting, setIsSubmitting] = useState(false)\n\n\tconst handleFetch = async (endPoint: string, fetchOptions: RequestInit) => {\n\t\tif (isSubmitting) {\n\t\t\treturn\n\t\t}\n\t\tawait setIsSubmitting(true)\n\t\tconst response = await fetch(endPoint, fetchOptions)\n\t\tif (response.ok) {\n\t\t\tconst data = await response.json()\n\t\t\tsetIsSubmitting(false)\n\t\t\treturn data\n\t\t}\n\t\tif (response.status === 401 || 403) {\n\t\t\tlogout()\n\t\t} else throw Error(response.statusText)\n\t}\n\n\tconst getActiveThoughtRecord = async (): Promise<ThoughtRecord> => {\n\t\tconst data = await handleFetch(thoughtRecordEndPoint, authHeader)\n\t\tif (isThoughtRecord(data)) {\n\t\t\treturn data\n\t\t}\n\t\tthrow Error('not a thought record')\n\t}\n\tconst getNewThoughtRecord = async (): Promise<ThoughtRecord> => {\n\t\tconst options = { method: 'POST', ...authHeader }\n\t\tconst thoughtRecord = await handleFetch(thoughtRecordEndPoint, options)\n\n\t\tif (isThoughtRecord(thoughtRecord)) {\n\t\t\treturn thoughtRecord\n\t\t} else {\n\t\t\tthrow Error('response isnt valid')\n\t\t}\n\t}\n\n\tconst getAllThoughtRecords = async (): Promise<ThoughtRecord[]> => {\n\t\tconst options: RequestInit = {\n\t\t\t...authHeader,\n\t\t}\n\t\treturn await handleFetch(`${thoughtRecordEndPoint}/all`, options)\n\t}\n\n\tconst saveThoughtRecord = async (): Promise<User> => {\n\t\tconst saveOptions: RequestInit = {\n\t\t\theaders: {\n\t\t\t\t...authHeader.headers,\n\t\t\t\tAccept: 'application/json',\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t},\n\t\t\tmethod: 'POST',\n\t\t}\n\n\t\treturn await handleFetch(`${userEndPoint}/thoughtrecord`, saveOptions)\n\t}\n\tconst deleteThoughtRecord = async (\n\t\tthoughtRecord: string,\n\t): Promise<string> => {\n\t\tconst deleteOptions: RequestInit = {\n\t\t\t...authHeader,\n\t\t\tmethod: 'DELETE',\n\t\t}\n\t\treturn await handleFetch(\n\t\t\t`${thoughtRecordEndPoint}/${thoughtRecord}`,\n\t\t\tdeleteOptions,\n\t\t)\n\t}\n\n\tconst editThoughtRecord = async (thoughtRecordId: string) => {\n\t\tconst editOptions: RequestInit = {\n\t\t\t...authHeader,\n\t\t\tmethod: 'POST',\n\t\t}\n\t\tconst thoughtRecord = await handleFetch(\n\t\t\t`${thoughtRecordEndPoint}/edit/${thoughtRecordId}`,\n\t\t\teditOptions,\n\t\t)\n\t\tif (isThoughtRecord(thoughtRecord)) {\n\t\t\treturn thoughtRecord\n\t\t}\n\t\tthrow Error('Invalid return')\n\t}\n\tconst updateThoughtRecord = async (\n\t\tdata: FormValues,\n\t\tactiveThoughtRecord: string,\n\t\tupdateKey: string,\n\t): Promise<ThoughtRecord> => {\n\t\tconst updateOptions: RequestInit = {\n\t\t\theaders: {\n\t\t\t\tAccept: 'application/json',\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t...authHeader.headers,\n\t\t\t},\n\t\t\tmethod: 'PATCH',\n\t\t}\n\t\tupdateOptions.body = JSON.stringify({ [updateKey]: data })\n\t\treturn await handleFetch(\n\t\t\t`${thoughtRecordEndPoint}/${activeThoughtRecord}`,\n\t\t\tupdateOptions,\n\t\t)\n\t}\n\treturn {\n\t\tdeleteThoughtRecord,\n\t\tgetAllThoughtRecords,\n\t\tupdateThoughtRecord,\n\t\tgetActiveThoughtRecord,\n\t\tgetNewThoughtRecord,\n\t\tisSubmitting,\n\t\tsaveThoughtRecord,\n\t\teditThoughtRecord,\n\t}\n}\n\nexport default useThoughtRecordApi\n"],"names":["isMood","value","Array","isArray","length","useState","moods","setMoods","UseThoughtRecord","label","onSubmit","thoughtRecord","currentQuestion","isSubmitting","useEffect","mood","isKeyOfThoughtRecord","thoughtRecordMood","SelectQuestion","selectOptions","feelings","mt","mb","minH","w","isLoading","loadingText","onClick","LoadingTextField","sliderColor","MoodEntry","deleteHandler","moodRating","sliderChange","isDeleting","setIsDeleting","foregroundColor","UseThemeColors","in","transition","enter","duration","exit","style","flexDirection","alignItems","display","height","width","base","lg","my","alignSelf","rounded","mx","bg","pl","pr","justifyContent","ml","spacing","p","textAlign","colorScheme","slice","mr","onChange","hasArrow","zIndex","fontSize","color","placement","isOpen","DeleteButton","setTimeout","animateThenDelete","variant","size","icon","map","moodName","filter","useThoughtRecord","selectedMood","setSelectedMood","offsetY","offsetX","delay","option","actionMeta","options","includes","toast","useToast","navigate","useNavigate","useLocation","pathname","state","setThoughtRecord","isValidQuestion","setIsValidQuestion","useThoughtRecordApi","updateThoughtRecord","getActiveThoughtRecord","saveThoughtRecord","isQuestion","lastValid","question","path","thoughtRecordKey","getLastValid","getThoughtRecord","isThoughtRecord","data","Error","status","description","updateKey","activeThoughtRecord","key","NextLinkIndex","updatedRecord","thoughtRecordData","logout","useAuth","authHeader","getAuthHeader","setIsSubmitting","handleFetch","endPoint","fetchOptions","fetch","response","ok","json","statusText","thoughtRecordEndPoint","getNewThoughtRecord","method","getAllThoughtRecords","saveOptions","headers","Accept","userEndPoint","deleteThoughtRecord","deleteOptions","editThoughtRecord","thoughtRecordId","editOptions","updateOptions","body","JSON","stringify"],"sourceRoot":""}