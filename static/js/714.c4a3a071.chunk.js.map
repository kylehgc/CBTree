{"version":3,"file":"static/js/714.c4a3a071.chunk.js","mappings":"m2EAUA,EAR8B,WAC5B,OACE,SAAC,KAAD,K,mBCQSA,EAAS,SAACC,GACrB,SAAGC,MAAMC,QAAQF,IAAUA,EAAMG,OAAS,KACxCC,QAAQC,IAAIL,EAAM,IACX,SAAUA,EAAM,KA4C3B,EAvCyC,SAAC,GAAyB,IAAD,IAAvBM,aAAAA,OAAuB,MAAR,GAAQ,EAChE,GAA0BC,EAAAA,EAAAA,UAAiBD,GAA3C,eAAOE,EAAP,KAAcC,EAAd,KACA,GAA2DC,EAAAA,EAAAA,KAApDC,EAAP,EAAOA,MAAOC,EAAd,EAAcA,SAAUC,EAAxB,EAAwBA,cAAeC,EAAvC,EAAuCA,gBAqBvC,OAnBAC,EAAAA,EAAAA,YAAW,WACc,gBAApBD,GACD,OAAGD,QAAH,IAAGA,GAAAA,EAAeG,MAChBP,EAASI,EAAcG,QAG1B,CAACF,EAAiBL,EAAUI,KAE/BE,EAAAA,EAAAA,YAAW,WACT,GAAGF,IACEI,EAAAA,EAAAA,GAAqBH,EAAiBD,IAAmC,IAAjBL,EAAML,OAAc,CAC7E,IAAMe,EAAoBL,EAAcC,GACrCf,EAAOmB,KACRd,QAAQC,IAAI,UACZI,EAASS,OAId,CAACJ,EAAiBN,EAAML,OAAQU,IAC/BA,GAIF,iCACE,SAACM,EAAA,EAAD,CACEX,MAAOA,EACPC,SAAUA,EACVW,cAAeC,EACfV,MAAOA,IAERH,EAAML,OAAS,GAAI,SAAC,KAAD,CAAQmB,QAAS,kBAAMV,EAASJ,IAAQe,QAAQ,SAAhD,sBAA6E,SAV5F,SAAC,EAAD,M,yHCUX,IA/B8C,SAAC,GAAwD,IAAvDf,EAAsD,EAAtDA,MAAMC,EAAgD,EAAhDA,SAAUW,EAAsC,EAAtCA,cAAcT,EAAwB,EAAxBA,MAC5E,GAA2Ca,EAAAA,EAAAA,KAAnBC,GAAxB,EAAOC,gBAAP,EAAwBD,iBACxB,GAAwClB,EAAAA,EAAAA,UAAiB,IAAzD,eAAOoB,EAAP,KAAqBC,EAArB,KAYA,OACE,iCACE,UAAC,KAAD,CAAKC,EAAG,EAAGC,GAAIL,EAAiBM,EAAG,MAAOC,GAAI,GAAIC,GAAI,EAAtD,WACE,UAAC,KAAD,CAAWC,GAAI,EAAGC,SAAU,GAA5B,cAAkCxB,EAAlC,QACA,SAAC,KAAD,CACEyB,KAAK,KACLC,SAXa,SAACC,EAAuBC,GACxCD,GACDV,EAAgBU,EAAOtC,QAUnBwC,QAASpB,QAGb,SAAC,KAAD,CAAQqB,UAAW,SAAUnB,QAAS,kBApBzBN,EAoBuCW,QAnBjDnB,EAAMkC,KAAI,SAAA1B,GAAI,OAAIA,EAAKA,QAAO2B,SAAS3B,IAASA,GACnDP,EAAS,GAAD,eAAKD,GAAL,CAAY,CAACQ,KAAMA,EAAM4B,WAAY,OAFjC,IAAC5B,GAoBsDe,EAAG,MAAOc,KAAM,GAAIX,GAAI,EAAGF,GAAI,EAAlG,oBACA,SAAC,IAAD,CAAUxB,MAAOA,EAAOC,SAAUA","sources":["Components/LoadingSelectQuestion.tsx","Components/FeelingQuestion.tsx","Components/SelectQuestion.tsx"],"sourcesContent":["import { Skeleton } from \"@chakra-ui/react\"\n\nconst LoadingSelectQuestion = () => {\n  return (\n    <Skeleton>\n      \n    </Skeleton>\n  )\n}\n\nexport default LoadingSelectQuestion","import { Button } from '@chakra-ui/react'\nimport { useEffect, useState } from 'react'\nimport feelings from '../Data/feelings.json'\nimport UseThoughtRecord from '../Hooks/UseThoughtRecord'\nimport LoadingSelectQuestion from './LoadingSelectQuestion'\nimport SelectQuestion from './SelectQuestion'\nimport {isKeyOfThoughtRecord, Mood} from './types'\n\ninterface Props {\n  defaultMoods?: Mood[]\n}\n\nexport const isMood = (value: any): value is Mood[] => {\n  if(Array.isArray(value) && value.length > 0 ) {\n    console.log(value[0])\n    return \"mood\" in value[0]\n  }\n  return false\n}\n\nconst FeelingQuestion: React.FC<Props> = ({defaultMoods = []}) => {\n  const [moods, setMoods] = useState<Mood[]>(defaultMoods)\n  const {label, onSubmit, thoughtRecord, currentQuestion } = UseThoughtRecord()\n  \n  useEffect (() => {\n    if(currentQuestion === \"reratemoods\") {\n      if(thoughtRecord?.mood) {\n        setMoods(thoughtRecord.mood)\n      }\n    }\n  }, [currentQuestion, setMoods, thoughtRecord])\n\n  useEffect (() => {\n    if(thoughtRecord) {\n      if(isKeyOfThoughtRecord(currentQuestion, thoughtRecord) && moods.length === 0) {\n        const thoughtRecordMood = thoughtRecord[currentQuestion]\n        if(isMood(thoughtRecordMood)){\n          console.log(\"no way\")\n          setMoods(thoughtRecordMood)\n        }\n      }\n    }\n  }, [currentQuestion, moods.length, thoughtRecord])\n  if(!thoughtRecord) {\n    return <LoadingSelectQuestion/>\n  }\n  return (\n    <>\n      <SelectQuestion \n        moods={moods} \n        setMoods={setMoods} \n        selectOptions={feelings} \n        label={label}\n      / >\n      {moods.length > 0 ? <Button onClick={() => onSubmit(moods)} variant=\"submit\"> Submit </Button> : null}\n    </>\n  )\n}\n\nexport default FeelingQuestion\n\n","import {CreatableSelect, ActionMeta} from 'chakra-react-select'\nimport { Dispatch, SetStateAction } from 'react'\nimport {Button,Box, FormLabel} from '@chakra-ui/react'\nimport {useState } from 'react'\nimport { Mood } from './types'\nimport MoodList from './MoodSlider'\nimport UseThemeColors from '../Hooks/useThemeColors'\n\ntype Option = {\n  value: string,\n  label: string\n}\ninterface SelectOption {\n  label: string,\n  value: string\n}\ninterface RecordProps {\n  moods: Mood[],\n  setMoods: Dispatch<SetStateAction<Mood[]>>,\n  selectOptions: SelectOption[],\n  label:string,\n}\n\nconst SelectQuestion: React.FC<RecordProps> = ({moods,setMoods, selectOptions,label}: RecordProps) => {\n  const {backgroundColor, foregroundColor} = UseThemeColors()\n  const [selectedMood, setSelectedMood] = useState<string>(\"\")\n\n  const addMood = (mood: string) => {\n    if(!(moods.map(mood => mood.mood)).includes(mood) && mood) {\n      setMoods([...moods, {mood: mood, moodRating: 0}])\n    }\n  }\n  const handleChange = (option: Option | null, actionMeta: ActionMeta<Option>) => {\n    if(option) {\n      setSelectedMood(option.value)\n    }\n  }\n  return (\n    <>\n      <Box p={2} bg={foregroundColor} w={\"70%\"} mt={10} mx={7} >\n        <FormLabel mb={2} fontSize={14}> {label} </FormLabel>\n        <CreatableSelect\n          size='md'\n          onChange={handleChange}\n          options={selectOptions}\n        />\n      </Box>\n      <Button alignSelf={'center'} onClick={() => addMood(selectedMood)} w={\"60%\"} minH={10} mb={4} mt={7}> Add </Button>\n      <MoodList moods={moods} setMoods={setMoods} />\n    </>\n  )\n}\n\n\nexport default SelectQuestion"],"names":["isMood","value","Array","isArray","length","console","log","defaultMoods","useState","moods","setMoods","UseThoughtRecord","label","onSubmit","thoughtRecord","currentQuestion","useEffect","mood","isKeyOfThoughtRecord","thoughtRecordMood","SelectQuestion","selectOptions","feelings","onClick","variant","UseThemeColors","foregroundColor","backgroundColor","selectedMood","setSelectedMood","p","bg","w","mt","mx","mb","fontSize","size","onChange","option","actionMeta","options","alignSelf","map","includes","moodRating","minH"],"sourceRoot":""}