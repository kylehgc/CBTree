{"version":3,"file":"static/js/423.0410c2d3.chunk.js","mappings":"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","sources":["Components/SelectQuestion.tsx","Components/HotThoughtSelect.tsx","Components/ThoughtQuestion.tsx","../node_modules/@babel/runtime/helpers/esm/objectSpread2.js"],"sourcesContent":["import {CreatableSelect, ActionMeta} from 'chakra-react-select'\nimport { Dispatch, SetStateAction } from 'react'\nimport {Button,Box, FormLabel} from '@chakra-ui/react'\nimport {useState } from 'react'\nimport { Mood } from './types'\nimport MoodList from './MoodSlider'\nimport UseThemeColors from '../Hooks/useThemeColors'\n\ntype Option = {\n  value: string,\n  label: string\n}\ninterface SelectOption {\n  label: string,\n  value: string\n}\ninterface RecordProps {\n  moods: Mood[],\n  setMoods: Dispatch<SetStateAction<Mood[]>>,\n  selectOptions: SelectOption[],\n  label:string,\n}\n\nconst SelectQuestion: React.FC<RecordProps> = ({moods,setMoods, selectOptions,label}: RecordProps) => {\n  const {backgroundColor, foregroundColor} = UseThemeColors()\n  const [selectedMood, setSelectedMood] = useState<string>(\"\")\n\n  const addMood = (mood: string) => {\n    if(!(moods.map(mood => mood.mood)).includes(mood) && mood) {\n      setMoods([...moods, {mood: mood, moodRating: 0}])\n    }\n  }\n  const handleChange = (option: Option | null, actionMeta: ActionMeta<Option>) => {\n    if(option) {\n      setSelectedMood(option.value)\n    }\n  }\n  return (\n    <>\n      <Box p={2} bg={foregroundColor} w={\"70%\"} mt={10} mx={7} >\n        <FormLabel mb={2} fontSize={14}> {label} </FormLabel>\n        <CreatableSelect\n          size='md'\n          onChange={handleChange}\n          options={selectOptions}\n        />\n      </Box>\n      <Button alignSelf={'center'} onClick={() => addMood(selectedMood)} w={\"60%\"} minH={10} mb={4} mt={7}> Add </Button>\n      <MoodList moods={moods} setMoods={setMoods} />\n    </>\n  )\n}\n\n\nexport default SelectQuestion","\nimport {Center, Heading} from '@chakra-ui/react'\nimport UseThemeColors from '../Hooks/useThemeColors'\n\ninterface HotThoughtProps {\n  thoughts: string[],\n  onSelect: (value: string) => void,\n  selected: string\n} \n\nconst HotThoughtSelect: React.FC<HotThoughtProps> = ({thoughts, onSelect, selected }) => {\n  const {foregroundColor} = UseThemeColors()\n  return (\n    <>\n      <Heading mt={4} mx={4} textAlign={\"center\"}> Choose the Hot Thought </Heading>\n      <Center p={4} flexDirection={\"column\"} mx={2} w={\"100%\"} minHeight={\"60%\"} justifyContent={\"space-evenly\"}>\n        {thoughts.map(thought => {\n          return (  \n            <Center \n              key={thought}\n              p={2}\n              rounded={\"2xl\"} \n              fontSize={14}\n              color={selected === thought ? foregroundColor : \"inherit\"} \n              minH={\"20%\"} \n              width={\"90%\"} \n              bg={selected === thought ? \"red.400\" : foregroundColor} \n              onClick={()=> onSelect(thought)}>\n              {thought}\n            </Center>\n          )\n        })}\n      </Center>\n    </>\n  )\n}\n\nexport default HotThoughtSelect","import { useEffect, useState } from 'react'\nimport partialThoughtData from './../Data/thoughts.json'\nimport SelectQuestion from './SelectQuestion'\nimport {Mood} from './types'\nimport {Button} from '@chakra-ui/react'\nimport HotThoughtSelect from './HotThoughtSelect'\nimport UseThoughtRecord from '../Hooks/UseThoughtRecord'\nimport UseThemeColors from '../Hooks/useThemeColors'\nimport LoadingTextField from './LoadingTextField'\n\nconst ThoughtQuestion = () => {\n  const thoughtData = partialThoughtData.map(thought => ({...thought, value: thought.label}))\n  const [thoughts, setThoughts] = useState<Mood[]>([])\n  const [selected, SetSelected] = useState<string>(\"\")\n  const {label, onSubmit, isSubmitting, thoughtRecord} = UseThoughtRecord()\n  const [doneThoughts, setDoneThoughts] = useState<Boolean>(false)\n  const {foregroundColor} = UseThemeColors()\n  const onSelect = (value: string) => {\n    SetSelected(value)\n  }\n  useEffect (() => {\n    console.log(thoughtRecord)\n    if(thoughtRecord?.thoughts) {\n      setThoughts(thoughtRecord.thoughts.thoughts)\n    }\n  },[thoughtRecord, setThoughts])\n  const handleMoodSubmit = () => {\n    if(!doneThoughts) {\n      setDoneThoughts(true)\n    } else {\n      onSubmit({thoughts: thoughts, hotThought: selected})\n    }\n  }\n  const thoughtIDs = thoughts.map(thought => thought.mood)\n  if(!thoughtRecord) {\n    return <LoadingTextField/>\n  }\n  return (\n    <>\n      { !doneThoughts \n        ?\n        <SelectQuestion \n          moods={thoughts} \n          setMoods={setThoughts} \n          selectOptions={thoughtData} \n          label={label}\n        /> \n        : \n        <HotThoughtSelect thoughts={thoughtIDs} onSelect={onSelect} selected={selected} /> \n      }\n      {thoughts.length > 0 ?<Button \n        minH={10}\n        w=\"60%\"\n        isLoading={isSubmitting}\n        bg={foregroundColor}\n        loadingText={\"Submitting\"}\n        onClick={handleMoodSubmit} \n      >Submit </Button> : null}\n    </>\n    \n  )\n}\n\nexport default ThoughtQuestion","import defineProperty from \"./defineProperty.js\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}"],"names":["moods","setMoods","selectOptions","label","UseThemeColors","foregroundColor","backgroundColor","useState","selectedMood","setSelectedMood","p","bg","w","mt","mx","mb","fontSize","size","onChange","option","actionMeta","value","options","alignSelf","onClick","mood","map","includes","moodRating","minH","thoughts","onSelect","selected","textAlign","flexDirection","minHeight","justifyContent","thought","rounded","color","width","thoughtData","partialThoughtData","setThoughts","SetSelected","UseThoughtRecord","onSubmit","isSubmitting","thoughtRecord","doneThoughts","setDoneThoughts","useEffect","console","log","thoughtIDs","SelectQuestion","length","isLoading","loadingText","hotThought","LoadingTextField","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread2","target","i","arguments","source","forEach","key","getOwnPropertyDescriptors","defineProperties","defineProperty"],"sourceRoot":""}