{"version":3,"file":"static/js/911.aeedf42d.chunk.js","mappings":"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","sources":["Components/ThoughtRecordQuestions/AlternativeThought.tsx","../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js"],"sourcesContent":["import {\n\tBox,\n\tHeading,\n\tVStack,\n\tInput,\n\tButton,\n\tSlideFade,\n\tLightMode,\n} from '@chakra-ui/react'\nimport { useEffect, useState } from 'react'\nimport useThoughtRecord from '../../Hooks/UseThoughtRecord'\nimport useThemeColors from '../../Hooks/useThemeColors'\nimport ArgumentButtons from './ArgumentAccordion'\nimport MoodSlider from './MoodSlider'\nimport { Mood } from '../../types'\nimport LoadingTextField from '../Loading/LoadingTextField'\nimport HotThoughtDisplay from '../ThoughtRecordDisplay/HotThoughtDisplay'\n\nconst AlternativeThought: React.FC = () => {\n\tconst { foregroundColor, textColor } = useThemeColors()\n\tconst [balancedThought, setBalancedThought] = useState<string>('')\n\tconst [moods, setMoods] = useState<Mood[]>([])\n\tconst { onSubmit, thoughtRecord, isSubmitting, isValidQuestion } =\n\t\tuseThoughtRecord()\n\n\tuseEffect(() => {\n\t\tif (thoughtRecord?.alternativethought) {\n\t\t\tsetMoods(thoughtRecord.alternativethought)\n\t\t}\n\t}, [thoughtRecord, setMoods])\n\n\tconst argFor = thoughtRecord?.evidencefor ? thoughtRecord.evidencefor : ''\n\tconst argAgainst = thoughtRecord?.evidenceagainst\n\t\t? thoughtRecord.evidenceagainst\n\t\t: ''\n\tconst argumentsText = { argFor: argFor, argAgainst: argAgainst }\n\tconst hotThought = thoughtRecord?.thoughts\n\t\t? thoughtRecord.thoughts.hotThought\n\t\t: ''\n\n\tconst handleOnChange: React.ChangeEventHandler<HTMLInputElement> = (\n\t\tevent,\n\t) => {\n\t\tsetBalancedThought(event.target.value)\n\t}\n\n\tconst addMood = (mood: string) => {\n\t\tif (!moods.map((mood) => mood.mood).includes(mood) && mood) {\n\t\t\tsetMoods([...moods, { mood: mood, moodRating: 0 }])\n\t\t}\n\t\tsetBalancedThought('')\n\t}\n\n\tif (!thoughtRecord || !isValidQuestion) {\n\t\treturn <LoadingTextField />\n\t}\n\treturn (\n\t\t<VStack\n\t\t\toverflow={'visible'}\n\t\t\tmt={1}\n\t\t\tspacing={8}\n\t\t\tp={1}\n\t\t\th=\"full\"\n\t\t\tw={{ base: 'full', lg: 'full' }}\n\t\t>\n\t\t\t<Heading m={0} textAlign={'center'}>\n\t\t\t\tWrite a Balanced Thought\n\t\t\t</Heading>\n\t\t\t<SlideFade\n\t\t\t\tin={!isSubmitting}\n\t\t\t\tstyle={{\n\t\t\t\t\tflexDirection: 'column',\n\t\t\t\t\theight: 'full',\n\t\t\t\t\twidth: '95%',\n\t\t\t\t\tdisplay: 'flex',\n\t\t\t\t}}\n\t\t\t\ttransition={{\n\t\t\t\t\tenter: { duration: 0.5 },\n\t\t\t\t\texit: { duration: 0.5, delay: 0.5 },\n\t\t\t\t}}\n\t\t\t\toffsetY={0}\n\t\t\t\toffsetX={100}\n\t\t\t>\n\t\t\t\t<HotThoughtDisplay hotThought={hotThought} />\n\t\t\t</SlideFade>\n\t\t\t<SlideFade\n\t\t\t\tin={!isSubmitting}\n\t\t\t\tstyle={{\n\t\t\t\t\tflexDirection: 'column',\n\t\t\t\t\theight: 'full',\n\t\t\t\t\twidth: '95%',\n\t\t\t\t\tdisplay: 'flex',\n\t\t\t\t}}\n\t\t\t\ttransition={{\n\t\t\t\t\tenter: { duration: 0.5, delay: 0.3 },\n\t\t\t\t\texit: { duration: 0.5, delay: 0.3 },\n\t\t\t\t}}\n\t\t\t\toffsetY={0}\n\t\t\t\toffsetX={-100}\n\t\t\t>\n\t\t\t\t<ArgumentButtons argumentsText={argumentsText} />\n\t\t\t</SlideFade>\n\t\t\t<SlideFade\n\t\t\t\tin={!isSubmitting}\n\t\t\t\tstyle={{\n\t\t\t\t\tflexDirection: 'column',\n\t\t\t\t\talignContent: 'center',\n\t\t\t\t\theight: 'full',\n\t\t\t\t\twidth: '95%',\n\t\t\t\t\tdisplay: 'flex',\n\t\t\t\t}}\n\t\t\t\ttransition={{\n\t\t\t\t\tenter: { duration: 0.5, delay: 0.5 },\n\t\t\t\t\texit: { duration: 0.5 },\n\t\t\t\t}}\n\t\t\t\toffsetY={0}\n\t\t\t\toffsetX={100}\n\t\t\t>\n\t\t\t\t<LightMode>\n\t\t\t\t\t<Input\n\t\t\t\t\t\tcolor={textColor}\n\t\t\t\t\t\tonChange={handleOnChange}\n\t\t\t\t\t\tvalue={balancedThought}\n\t\t\t\t\t\tsize=\"lg\"\n\t\t\t\t\t\tp={1}\n\t\t\t\t\t\talignSelf={'center'}\n\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\tbg={foregroundColor}\n\t\t\t\t\t\tw={'90%'}\n\t\t\t\t\t\t_placeholder={{ color: textColor, textAlign: 'center' }}\n\t\t\t\t\t\tplaceholder=\"Balanced Thought\"\n\t\t\t\t\t/>\n\t\t\t\t</LightMode>\n\t\t\t\t<Button\n\t\t\t\t\tonClick={() => addMood(balancedThought)}\n\t\t\t\t\tbg={foregroundColor}\n\t\t\t\t\talignSelf={'center'}\n\t\t\t\t\tw={'60%'}\n\t\t\t\t\tminH={10}\n\t\t\t\t\tmb={4}\n\t\t\t\t\tmt={7}\n\t\t\t\t>\n\t\t\t\t\tAdd Thought\n\t\t\t\t</Button>\n\t\t\t</SlideFade>\n\n\t\t\t<MoodSlider moods={moods} setMoods={setMoods} />\n\t\t\t{moods.length > 0 ? (\n\t\t\t\t<Button\n\t\t\t\t\tminH={10}\n\t\t\t\t\tw=\"60%\"\n\t\t\t\t\tisLoading={isSubmitting}\n\t\t\t\t\tbg={foregroundColor}\n\t\t\t\t\tloadingText={'Submitting'}\n\t\t\t\t\tonClick={() => onSubmit(moods)}\n\t\t\t\t>\n\t\t\t\t\tSubmit\n\t\t\t\t</Button>\n\t\t\t) : null}\n\t\t\t<Box h={'10vh'} />\n\t\t</VStack>\n\t)\n}\n\nexport default AlternativeThought\n","import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"names":["useThemeColors","foregroundColor","textColor","useState","balancedThought","setBalancedThought","moods","setMoods","useThoughtRecord","onSubmit","thoughtRecord","isSubmitting","isValidQuestion","useEffect","alternativethought","argumentsText","argFor","evidencefor","argAgainst","evidenceagainst","hotThought","thoughts","overflow","mt","spacing","p","h","w","base","lg","m","textAlign","in","style","flexDirection","height","width","display","transition","enter","duration","exit","delay","offsetY","offsetX","alignContent","color","onChange","event","target","value","size","alignSelf","variant","bg","_placeholder","placeholder","onClick","mood","map","includes","moodRating","minH","mb","length","isLoading","loadingText","_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","from","unsupportedIterableToArray","TypeError"],"sourceRoot":""}