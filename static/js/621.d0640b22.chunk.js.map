{"version":3,"file":"static/js/621.d0640b22.chunk.js","mappings":"g4EAaaA,EAAS,SAACC,GACrB,SAAGC,MAAMC,QAAQF,IAAUA,EAAMG,OAAS,KACxCC,QAAQC,IAAIL,EAAM,IACX,SAAUA,EAAM,KAyD3B,EApDyC,WACvC,OAA0BM,EAAAA,EAAAA,UAAiB,IAA3C,eAAOC,EAAP,KAAcC,EAAd,KACOC,GAAmBC,EAAAA,EAAAA,KAAnBD,gBACP,GAAyEE,EAAAA,EAAAA,KAAlEC,EAAP,EAAOA,MAAOC,EAAd,EAAcA,SAAUC,EAAxB,EAAwBA,cAAeC,EAAvC,EAAuCA,gBAAiBC,EAAxD,EAAwDA,aAqBxD,OAnBAC,EAAAA,EAAAA,YAAW,WACc,gBAApBF,GACD,OAAGD,QAAH,IAAGA,GAAAA,EAAeI,MAChBV,EAASM,EAAcI,QAG1B,CAACH,EAAiBP,EAAUM,KAE/BG,EAAAA,EAAAA,YAAW,WACT,GAAGH,IACEK,EAAAA,EAAAA,GAAqBJ,EAAiBD,IAAmC,IAAjBP,EAAMJ,OAAc,CAC7E,IAAMiB,EAAoBN,EAAcC,GACrChB,EAAOqB,IACRZ,EAASY,MAKd,CAACL,EAAiBD,IACjBA,GAIF,iCACE,SAACO,EAAA,EAAD,CACEd,MAAOA,EACPC,SAAUA,EACVc,cAAeC,EACfX,MAAOA,IAERL,EAAMJ,OAAS,GACd,SAAC,KAAD,CACEqB,GAAI,EACJC,KAAM,GACNC,EAAE,MACFC,UAAWX,EACXY,GAAInB,EACJoB,YAAa,aACbC,QAAS,kBAAMjB,EAASN,IAP1B,oBAWE,SAtBC,SAACwB,EAAA,EAAD,M,mICaX,IApC8C,SAAC,GAAwD,IAAvDxB,EAAsD,EAAtDA,MAAMC,EAAgD,EAAhDA,SAAUc,EAAsC,EAAtCA,cAAcV,EAAwB,EAAxBA,MACrEH,GAAmBC,EAAAA,EAAAA,KAAnBD,gBACP,GAAwCH,EAAAA,EAAAA,UAAiB,IAAzD,eAAO0B,EAAP,KAAqBC,EAArB,KAYA,OACE,iCACE,UAAC,KAAD,CAAWC,QAAS,EAAGC,QAAS,GAAIC,WAAY,CAACC,MAAO,CAACC,MAAO,GAAKC,SAAU,KAC7EC,MAAO,CAACC,cAAe,SAAWC,WAAW,SAAUC,QAAQ,OAAQC,OAAO,OAAOC,MAAM,QAASC,IAAE,EADxG,WAEE,UAAC,KAAD,CAAKC,EAAG,EAAGnB,GAAInB,EAAiBiB,EAAG,MAAOF,GAAI,EAAGwB,GAAI,EAAGC,GAAI,EAA5D,WACE,UAAC,KAAD,CAAWD,GAAI,EAAGE,SAAU,GAA5B,cAAkCtC,EAAlC,QACA,SAAC,KAAD,CACEuC,KAAK,KACLC,SAbW,SAACC,EAAuBC,GACxCD,GACDpB,EAAgBoB,EAAOrD,QAYjBuD,QAASjC,QAGb,SAAC,KAAD,CAAQkC,UAAW,SAAU1B,QAAS,kBAtB3BZ,EAsByCc,QArBnDzB,EAAMkD,KAAI,SAAAvC,GAAI,OAAIA,EAAKA,QAAOwC,SAASxC,IAASA,GACnDV,EAAS,GAAD,eAAKD,GAAL,CAAY,CAACW,KAAMA,EAAMyC,WAAY,OAFjC,IAACzC,GAsBwDQ,EAAG,MAAOD,KAAM,GAAImC,GAAI,EAA3F,uBAGF,SAAC,IAAD,CAAUrD,MAAOA,EAAOC,SAAUA","sources":["Components/FeelingQuestion.tsx","Components/SelectQuestion.tsx"],"sourcesContent":["import { Button, Fade, Flex, SlideFade, VStack } from '@chakra-ui/react'\nimport { useEffect, useState } from 'react'\nimport feelings from '../Data/feelings.json'\nimport UseThemeColors from '../Hooks/useThemeColors'\nimport UseThoughtRecord from '../Hooks/UseThoughtRecord'\nimport LoadingTextField from './LoadingTextField'\nimport SelectQuestion from './SelectQuestion'\nimport {isKeyOfThoughtRecord, Mood} from './types'\n\ninterface Props {\n  defaultMoods?: Mood[]\n}\n\nexport const isMood = (value: any): value is Mood[] => {\n  if(Array.isArray(value) && value.length > 0 ) {\n    console.log(value[0])\n    return \"mood\" in value[0]\n  }\n  return false\n}\n\nconst FeelingQuestion: React.FC<Props> = () => {\n  const [moods, setMoods] = useState<Mood[]>([])\n  const {foregroundColor} = UseThemeColors()\n  const {label, onSubmit, thoughtRecord, currentQuestion, isSubmitting } = UseThoughtRecord()\n  \n  useEffect (() => {\n    if(currentQuestion === \"reratemoods\") {\n      if(thoughtRecord?.mood) {\n        setMoods(thoughtRecord.mood)\n      }\n    }\n  }, [currentQuestion, setMoods, thoughtRecord])\n\n  useEffect (() => {\n    if(thoughtRecord) {\n      if(isKeyOfThoughtRecord(currentQuestion, thoughtRecord) && moods.length === 0) {\n        const thoughtRecordMood = thoughtRecord[currentQuestion]\n        if(isMood(thoughtRecordMood)){\n          setMoods(thoughtRecordMood)\n        }\n      }\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentQuestion, thoughtRecord])\n  if(!thoughtRecord) {\n    return <LoadingTextField/>\n  }\n  return (\n    <>\n      <SelectQuestion \n        moods={moods} \n        setMoods={setMoods} \n        selectOptions={feelings} \n        label={label}\n      />\n      {moods.length > 0 ? \n        <Button \n          mt={8}\n          minH={10}\n          w=\"60%\"\n          isLoading={isSubmitting}\n          bg={foregroundColor}\n          loadingText={\"Submitting\"}\n          onClick={() => onSubmit(moods)} \n        >\n           Submit \n        </Button> \n        : null}\n    </>\n  )\n}\n\nexport default FeelingQuestion\n\n","import {CreatableSelect, ActionMeta} from 'chakra-react-select'\nimport { Dispatch, SetStateAction } from 'react'\nimport {Button,Box, FormLabel, Fade, SlideFade} from '@chakra-ui/react'\nimport {useState } from 'react'\nimport { Mood } from './types'\nimport MoodList from './MoodSlider'\nimport UseThemeColors from '../Hooks/useThemeColors'\n\ntype Option = {\n  value: string,\n  label: string\n}\ninterface SelectOption {\n  label: string,\n  value: string\n}\ninterface RecordProps {\n  moods: Mood[],\n  setMoods: Dispatch<SetStateAction<Mood[]>>,\n  selectOptions: SelectOption[],\n  label:string,\n}\n\nconst SelectQuestion: React.FC<RecordProps> = ({moods,setMoods, selectOptions,label}: RecordProps) => {\n  const {foregroundColor} = UseThemeColors()\n  const [selectedMood, setSelectedMood] = useState<string>(\"\")\n\n  const addMood = (mood: string) => {\n    if(!(moods.map(mood => mood.mood)).includes(mood) && mood) {\n      setMoods([...moods, {mood: mood, moodRating: 0}])\n    }\n  }\n  const handleChange = (option: Option | null, actionMeta: ActionMeta<Option>) => {\n    if(option) {\n      setSelectedMood(option.value)\n    }\n  }\n  return (\n    <>\n      <SlideFade offsetY={0} offsetX={50} transition={{enter: {delay: 0.2, duration: .5}}}\n        style={{flexDirection: \"column\" , alignItems:\"center\", display:\"flex\", height:\"auto\",width:\"100%\"}} in> \n        <Box p={2} bg={foregroundColor} w={\"92%\"} mt={6} mb={2} mx={7} >\n          <FormLabel mb={2} fontSize={14}> {label} </FormLabel>\n          <CreatableSelect\n            size='md'\n            onChange={handleChange}\n            options={selectOptions}\n          />\n        </Box>\n        <Button alignSelf={'center'} onClick={() => addMood(selectedMood)} w={\"60%\"} minH={10} my={6}> Add </Button>\n      </SlideFade>\n      \n      <MoodList moods={moods} setMoods={setMoods} />\n     \n    </>\n  )\n}\n\n\nexport default SelectQuestion"],"names":["isMood","value","Array","isArray","length","console","log","useState","moods","setMoods","foregroundColor","UseThemeColors","UseThoughtRecord","label","onSubmit","thoughtRecord","currentQuestion","isSubmitting","useEffect","mood","isKeyOfThoughtRecord","thoughtRecordMood","SelectQuestion","selectOptions","feelings","mt","minH","w","isLoading","bg","loadingText","onClick","LoadingTextField","selectedMood","setSelectedMood","offsetY","offsetX","transition","enter","delay","duration","style","flexDirection","alignItems","display","height","width","in","p","mb","mx","fontSize","size","onChange","option","actionMeta","options","alignSelf","map","includes","moodRating","my"],"sourceRoot":""}