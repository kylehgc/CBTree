{"version":3,"file":"static/js/423.80b797dc.chunk.js","mappings":"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","sources":["Components/MoodEntry.tsx","Components/FeelingSlider.tsx","Components/HotThoughtSelect.tsx","Components/ThoughtQuestion.tsx","Hooks/UseThoughtRecord.tsx","../node_modules/@babel/runtime/helpers/esm/objectSpread2.js"],"sourcesContent":["import { \n  Tooltip,\n  Box, \n  Slider, Text, IconButton, HStack, SliderFilledTrack, SliderThumb, SliderTrack, VStack} from \"@chakra-ui/react\"\nimport {CloseIcon} from '@chakra-ui/icons'\n\n\n\ninterface ButtonProps {\n  deleteHandler: React.MouseEventHandler<HTMLButtonElement>\n}\n\ninterface MoodEntryProps {\n  mood: string,\n  moodRating: number,\n  sliderChange: (value: number) => void,\n  deleteHandler: () => void\n}\n\nconst sliderColor = (value: number):string => {\n  if(value < 25) {\n    return \"green.400\"\n  }\n  if(value < 50) {\n    return \"yellow.300\"\n  }\n  if(value < 75) {\n    return \"red.500\"\n  }\n  return \"red.800\"\n}\nconst MoodEntry: React.FC<MoodEntryProps> =\n  ( {deleteHandler,mood, moodRating, sliderChange}: MoodEntryProps ) => {\n    \n    return (\n      <>\n        <Box w={{base:\"full\", lg:\"50%\"}} alignSelf={\"center\"}>\n          <HStack mx={3} pl={2} my={4} minH={20} bg={\"white\"} justifyContent={\"center\"}>\n            <VStack ml={2} spacing={1} p={1} w={\"100%\"}>\n              <Text w={\"100%\"} textAlign={\"left\"}>\n                {mood} \n              </Text>\n              <Slider colorScheme={\"teal\"} ml={2} mb={2} onChange={(value) => sliderChange(value)} value={moodRating}>\n                <SliderTrack>\n                  <SliderFilledTrack />\n                </SliderTrack>\n                <Tooltip\n                  hasArrow\n                  fontSize={\"sm\"}\n                  bg={sliderColor(moodRating)}\n                  color='white'\n                  placement='right'\n                  isOpen\n                  label={`${moodRating}%`}\n                > \n                  <SliderThumb bg=\"teal.400\"/>\n                </Tooltip>\n              </Slider>\n            </VStack>\n            {<DeleteButton deleteHandler={deleteHandler}/>}\n          </HStack>\n        </Box>\n      </>\n    )\n  }\n\n\nconst DeleteButton : React.FC<ButtonProps> = ({deleteHandler}) => {\n  return (\n    \n    <IconButton \n      aria-label='Delete Mood' \n      variant='ghost'\n      size={\"lg\"}\n      icon={<CloseIcon/>}\n      onClick={deleteHandler}/>\n  )\n}\n\nexport default MoodEntry","import {CreatableSelect, ActionMeta} from 'chakra-react-select'\nimport { Dispatch, SetStateAction } from 'react'\nimport {Button,Box, FormLabel} from '@chakra-ui/react'\nimport {useState } from 'react'\n\nimport MoodEntry from './MoodEntry'\nimport UseThemeColors from '../Hooks/useThemeColors'\n\n\ntype Option = {\n  value: string,\n  label: string\n}\n\nexport type Mood = {\n  mood: string,\n  moodRating: number\n}\n\n\ninterface SelectOption {\n  label: string,\n  value: string\n}\n\ninterface RecordProps {\n  moods: Mood[],\n  setMoods: Dispatch<SetStateAction<Mood[]>>,\n  selectOptions: SelectOption[],\n  label:string,\n}\n\nconst FeelingSlider: React.FC<RecordProps> = ({moods,setMoods,  selectOptions,label}: RecordProps) => {\n  const {backgroundColor, foregroundColor} = UseThemeColors()\n  const [selectedMood, setSelectedMood] = useState<string>(\"\")\n  \n\n  const deleteHandler = (moodName: string) => {\n    setMoods(moods.filter(mood => mood.mood !== moodName))\n  }\n\n  const sliderChange = (moodName:string) => (value: number) => {\n    setMoods(moods => moods.map(mood => {\n      if(mood.mood === moodName) {\n        return {mood: mood.mood, moodRating: value}\n      } else {\n        return mood\n      }\n    }))\n  }\n\n  const handleChange = (option: Option | null, actionMeta: ActionMeta<Option>) => {\n    if(option) {\n      setSelectedMood(option.value)\n    }\n  }\n\n  const onCreate = async(value: string) => { \n    addMood(value)\n  }\n\n  const addMood = (mood: string) => {\n    \n    if(!(moods.map(mood => mood.mood)).includes(mood) && mood) {\n      setMoods([...moods, {mood: selectedMood, moodRating: 0}])\n    }\n  }\n  \n  return (\n    <>\n      \n      <Box p={2} bg={foregroundColor} mt={10} mx={7} >\n        <FormLabel mb={2} fontSize={14}> {label} </FormLabel>\n        <CreatableSelect\n          size='md'\n          onChange={handleChange}\n          options={selectOptions}\n        />\n      </Box>\n      <Button alignSelf={'center'} onClick={() => addMood(selectedMood)} w={\"60%\"} minH={10} mb={4} mt={7}> Add </Button>\n      {moods.map(({mood,moodRating}) => \n        <MoodEntry \n          mood={mood} \n          key={mood}\n          deleteHandler={() => deleteHandler(mood)}\n          sliderChange={sliderChange(mood)} \n          moodRating={moodRating} \n        />\n      )\n      }\n      \n      \n    </>\n  )\n}\n\n\nexport default FeelingSlider","\nimport {Center, Heading} from '@chakra-ui/react'\nimport UseThemeColors from '../Hooks/useThemeColors'\n\ninterface HotThoughtProps {\n  thoughts: string[],\n  onSelect: (value: string) => void,\n  selected: string\n} \n\n\n\nconst HotThoughtSelect: React.FC<HotThoughtProps> = ({thoughts, onSelect, selected }) => {\n  const {foregroundColor, backgroundColor} = UseThemeColors()\n  return (\n    <>\n      <Heading mt={4} mx={4} textAlign={\"center\"}> Choose the Hot Thought </Heading>\n      <Center p={4} flexDirection={\"column\"} mx={2} w={\"100%\"} minHeight={\"60%\"} justifyContent={\"space-evenly\"}>\n        {thoughts.map(thought => {\n          return (  \n            <Center \n              p={2}\n              rounded={\"2xl\"} \n              fontSize={14} \n              minH={\"20%\"} \n              width={\"90%\"} \n              bg={selected === thought ? \"red.400\" : foregroundColor} \n              onClick={()=> onSelect(thought)}>\n              {thought}\n            </Center>\n          \n          )\n        })}\n      </Center>\n    </>\n  )\n}\n\nexport default HotThoughtSelect","import { useState } from 'react'\nimport partialThoughtData from './../Data/thoughts.json'\nimport FeelingSlider, {Mood} from './FeelingSlider'\nimport {Button, ModalCloseButton, useToast, VStack} from '@chakra-ui/react'\nimport HotThoughtSelect from './HotThoughtSelect'\nimport UseThoughtRecord from '../Hooks/UseThoughtRecord'\n\nconst ThoughtQuestion = () => {\n  const thoughtData = partialThoughtData.map(thought => ({...thought, value: thought.label}))\n  const [thoughts, setThoughts] = useState<Mood[]>([])\n  const [selected, SetSelected] = useState<string>(\"\")\n  const [label, onSubmit] = UseThoughtRecord({moods:thoughts,hotThought:selected})\n  const [doneThoughts, setDoneThoughts] = useState<Boolean>(false)\n  \n  const onSelect = (value: string) => {\n    SetSelected(value)\n  }\n  const handleMoodSubmit = () => {\n    if(!doneThoughts) {\n      setDoneThoughts(true)\n    } else {\n      onSubmit()\n    }\n  }\n  const thoughtIDs = thoughts.map(thought => thought.mood)\n  return (\n    <>\n\n      { !doneThoughts \n        ?\n        <FeelingSlider \n          moods={thoughts} \n          setMoods={setThoughts} \n          selectOptions={thoughtData} \n          label={label}\n        /> \n        : \n       \n        <HotThoughtSelect thoughts={thoughtIDs} onSelect={onSelect} selected={selected} /> \n      }\n      {thoughts.length > 0 ? <Button onClick={handleMoodSubmit} variant=\"submit\"> Submit </Button> : null}\n      \n    </>\n    \n  )\n}\n\nexport default ThoughtQuestion","import { useEffect } from \"react\"\nimport { useLocation, useNavigate } from \"react-router-dom\"\nimport { Mood } from \"../Components/FeelingSlider\"\n\n\n\nconst question = [\n  \"/situationquestion\" ,\n  \"/mood\",\n  \"/thoughts\",\n  \"/evidencefor\",\n  \"/evidenceagainst\",\n  \"/alternativethought\",\n  \"/reratemood\",\n  \"/Submit\"\n] as const\n\nconst labels = {\n  \"/situationquestion\": \"What is the Situation?\",\n  \"/mood\": \"Add any emotions you felt and rate them\",\n  \"/thoughts\": \"List any thoughts and rate your Belief\",\n  \"/evidencefor\": \"What is the Evidence for\",\n  \"/evidenceagainst\": \"What is the Evidence Against\",\n  \"/alternativethought\": \"List any alternative thoughts and rate them\",\n  \"/reratemood\": \"rerate your moods\",\n  \"/Submit\": \"something\"\n} \n\nexport interface ThoughtRecordState {\n  moods?: Mood[],\n  hotThought?: string,\n  answer?: string\n\n}\n\nconst UseThoughtRecord= (recordState: ThoughtRecordState): [string,() => void] => {\n  const navigate = useNavigate()\n  const pathName = useLocation().pathname as typeof question[number]\n  console.log(pathName)\n  const label = labels[pathName]\n  console.log(label)\n  \n  useEffect(() => {\n    window.localStorage.setItem(pathName, JSON.stringify(recordState))\n    console.log(pathName,  window.localStorage.getItem(pathName))\n  },[recordState, pathName])\n  \n  const submitGenerator = () => {\n    const NextLinkIndex = question.indexOf(pathName) + 1\n    return () => navigate(question[NextLinkIndex])\n  }\n  \n  \n\n  \n\n  \n  return [label, submitGenerator()]\n}\n\nexport default UseThoughtRecord","import defineProperty from \"./defineProperty.js\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}"],"names":["DeleteButton","deleteHandler","variant","size","icon","onClick","value","mood","moodRating","sliderChange","w","base","lg","alignSelf","mx","pl","my","minH","bg","justifyContent","ml","spacing","p","textAlign","colorScheme","mb","onChange","hasArrow","fontSize","color","placement","isOpen","label","moods","setMoods","selectOptions","UseThemeColors","foregroundColor","backgroundColor","useState","selectedMood","setSelectedMood","addMood","map","includes","mt","option","actionMeta","options","moodName","filter","thoughts","onSelect","selected","flexDirection","minHeight","thought","rounded","width","thoughtData","partialThoughtData","setThoughts","SetSelected","UseThoughtRecord","hotThought","onSubmit","doneThoughts","setDoneThoughts","thoughtIDs","FeelingSlider","length","question","labels","recordState","navigate","useNavigate","pathName","useLocation","pathname","console","log","useEffect","window","localStorage","setItem","JSON","stringify","getItem","NextLinkIndex","indexOf","submitGenerator","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread2","target","i","arguments","source","forEach","key","getOwnPropertyDescriptors","defineProperties","defineProperty"],"sourceRoot":""}