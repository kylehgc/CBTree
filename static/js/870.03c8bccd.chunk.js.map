{"version":3,"file":"static/js/870.03c8bccd.chunk.js","mappings":"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","sources":["Components/LoginForm.tsx","Components/UserPassFormElements.tsx"],"sourcesContent":["import {\n  Box,\n  Stack,\n  Link,\n  Button,\n  Heading,\n  useToast,\n} from '@chakra-ui/react';\n\nimport useAuth, {Token} from '../Hooks/useAuth'\nimport { useForm, SubmitHandler } from 'react-hook-form';\nimport { getToken, loginEndpoint } from '../utils/api';\nimport UserPassFormElements from './UserPassFormElements'\nimport UseThemeColors from '../Hooks/useThemeColors';\nimport { useEffect } from 'react';\nimport { useNavigate, Link as BrowserLink, useLocation} from 'react-router-dom';\nimport LoadingTextField from './LoadingTextField';\n\n\ninterface FormValues {\n  username: string,\n  password: string\n}\ntype LocationState = {\n  state: {\n    path: string\n  } \n}\n\nconst Login: React.FC = () => {\n  const toast = useToast()\n  const {login, currentUser} = useAuth()\n  const {foregroundColor, backgroundColor} = UseThemeColors()\n  const {register, handleSubmit, formState: {errors , isSubmitting}} = useForm<FormValues>()\n  const navigate = useNavigate()\n  const {state} = useLocation() as LocationState\n  const token = getToken() \n\n  useEffect(() => {\n    if(currentUser) {\n      navigate(state?.path || \"/situationquestion\")\n    }\n  }, [currentUser, navigate, state?.path])\n\n  const onSubmit: SubmitHandler<FormValues> = async(value) => {\n    try{\n      const response = await fetch(loginEndpoint, {\n        body: new URLSearchParams({...value}),\n        method: \"POST\",\n        mode: \"cors\",\n      })\n      if(response.status === 200) {\n        const token: Token = await response.json()\n        login(token)\n        toast({\n          status: 'success',\n          description: \"Logged in.  Redirecting...\"\n        })  \n      } else {\n        throw new Error(\"Incorrect Username or Password\")\n      }\n    } catch (error) {\n      if(error instanceof Error) {   \n        toast({\n          status: 'error',\n          description: error.message\n        })\n      }\n    }\n  }\n  if(token) {\n    return <LoadingTextField/>\n  }\n  return (\n    <Stack spacing={8} mx={'auto'} maxW={'lg'} maxH={'100%'} py={12} px={6}>\n      <Stack align={'center'}>\n        <Heading fontSize={'4xl'}>Sign in to your account</Heading>\n      </Stack>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <Box rounded={'lg'} bg={foregroundColor} boxShadow={'lg'} p={8}>\n          <Stack spacing={4}>\n            <UserPassFormElements register={register} errors={errors} />\n            <Stack spacing={8}>\n              <Stack\n                direction={{ base: 'column', sm: 'row' }}\n                align={'start'}\n                spacing={4}\n                justify={'space-between'}\n              >\n                <Link color={'blue.400'}>\n                    Forgot password?\n                </Link>\n              </Stack>\n              <Button\n                type={\"submit\"}\n                isLoading={isSubmitting}\n                loadingText={\"Submitting\"}\n                variant={\"loginSubmit\"}\n                bg={backgroundColor}\n                _hover={{\n                  bg: 'blue.500',\n                }}\n              >\n                  Sign in\n              </Button>\n              <Link as={BrowserLink} \n                to=\"/signup\" \n                textAlign={\"center\"}\n                color={'blue.400'}\n              >\n                    New User? Sign up here!\n              </Link>\n            </Stack>\n          </Stack>\n        </Box>\n      </form>\n    </Stack>\n\n  );\n}\n\nexport default Login","import { FormControl, FormLabel, Input, FormErrorMessage } from \"@chakra-ui/react\"\nimport {FieldError, UseFormRegister} from 'react-hook-form'\nimport React from 'react'\n\ninterface FormValues {\n  username: string,\n  password: string\n}\ninterface IProps {\n  errors: Errors,\n  register: UseFormRegister<FormValues>\n}\ninterface Errors {\n  username?: FieldError | undefined;\n  password?: FieldError | undefined;\n}\n\nconst UserPassFormElements: React.FC<IProps> = ({errors, register}: IProps) => {\n  return (\n    <>\n      <FormControl isRequired isInvalid={!!errors?.username} id=\"email\">\n        <FormLabel>Email address</FormLabel>\n        <Input type=\"text\" placeholder=\"Email\" {...register(\n          \"username\", {required: true, pattern:{\n            value: /^\\S+@\\S+$/i, message: \"Not a valid email address\"}})}  />\n        <FormErrorMessage>{errors?.username?.message}</FormErrorMessage>\n      </FormControl>\n      <FormControl isInvalid={!!errors?.password?.message} id=\"password\">\n        <FormLabel>Password</FormLabel>\n        <Input type=\"password\" placeholder=\"password\" {\n          ...register(\"password\", {\n            required: true, maxLength:{\n              value: 10,\n              message:\"Your password is too long\"},\n            minLength:{\n              value: 4,\n              message: \"Your password is too short\"}})} /> \n        <FormErrorMessage>{errors?.password?.message}</FormErrorMessage>\n      </FormControl>\n    </>)\n                \n}\n\n\nexport default UserPassFormElements"],"names":["toast","useToast","useAuth","login","currentUser","UseThemeColors","foregroundColor","backgroundColor","useForm","register","handleSubmit","formState","errors","isSubmitting","navigate","useNavigate","state","useLocation","token","getToken","useEffect","path","onSubmit","value","fetch","loginEndpoint","body","URLSearchParams","method","mode","response","status","json","description","Error","message","spacing","mx","maxW","maxH","py","px","align","fontSize","rounded","bg","boxShadow","p","direction","base","sm","justify","color","type","isLoading","loadingText","variant","_hover","as","BrowserLink","to","textAlign","isRequired","isInvalid","username","id","placeholder","required","pattern","password","maxLength","minLength"],"sourceRoot":""}